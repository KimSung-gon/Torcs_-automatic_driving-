
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800100  000022d8  0000236c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  008002b2  008002b2  0000251e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000251e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006f0  00000000  00000000  00002530  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00010f9f  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000038a5  00000000  00000000  00013bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004315  00000000  00000000  00017464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001208  00000000  00000000  0001b77c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003691  00000000  00000000  0001c984  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005e41  00000000  00000000  00020015  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000698  00000000  00000000  00025e56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	Serial.println(re);
}

void printFloat(float f)
{
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
	Serial.println(f);
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__vector_7>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__vector_16>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_18>
      4c:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__vector_19>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	25 0c       	add	r2, r5
      6a:	29 0c       	add	r2, r9
      6c:	f5 0b       	sbc	r31, r21
      6e:	f8 0b       	sbc	r31, r24
      70:	fc 0b       	sbc	r31, r28
      72:	00 0c       	add	r0, r0
      74:	03 0c       	add	r0, r3
      76:	07 0c       	add	r0, r7
      78:	0a 0c       	add	r0, r10
      7a:	0d 0c       	add	r0, r13
      7c:	10 0c       	add	r1, r0
      7e:	14 0c       	add	r1, r4
      80:	18 0c       	add	r1, r8
      82:	1c 0c       	add	r1, r12
      84:	1f 0c       	add	r1, r15

00000086 <__trampolines_end>:
      86:	00 00       	nop
      88:	00 08       	sbc	r0, r0
      8a:	00 02       	muls	r16, r16
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 03       	mulsu	r16, r16
      90:	04 07       	cpc	r16, r20
	...

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_port_PGM>:
      ae:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      be:	03 03 03 03                                         ....

000000c2 <port_to_output_PGM>:
      c2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000cc <port_to_mode_PGM>:
      cc:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000d6 <__ctors_start>:
      d6:	03 01       	movw	r0, r6
      d8:	74 0a       	sbc	r7, r20

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d8 e0       	ldi	r29, 0x08	; 8
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	12 e0       	ldi	r17, 0x02	; 2
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e8 ed       	ldi	r30, 0xD8	; 216
      ee:	f2 e2       	ldi	r31, 0x22	; 34
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	a2 3b       	cpi	r26, 0xB2	; 178
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	23 e0       	ldi	r18, 0x03	; 3
      fe:	a2 eb       	ldi	r26, 0xB2	; 178
     100:	b2 e0       	ldi	r27, 0x02	; 2
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	aa 3d       	cpi	r26, 0xDA	; 218
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>

0000010c <__do_global_ctors>:
     10c:	10 e0       	ldi	r17, 0x00	; 0
     10e:	ca ed       	ldi	r28, 0xDA	; 218
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	04 c0       	rjmp	.+8      	; 0x11c <__do_global_ctors+0x10>
     114:	22 97       	sbiw	r28, 0x02	; 2
     116:	fe 01       	movw	r30, r28
     118:	0e 94 66 11 	call	0x22cc	; 0x22cc <__tablejump__>
     11c:	c6 3d       	cpi	r28, 0xD6	; 214
     11e:	d1 07       	cpc	r29, r17
     120:	c9 f7       	brne	.-14     	; 0x114 <__do_global_ctors+0x8>
     122:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
     126:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <EE_avr8_terminate_savestk>:
	.global	EE_avr8_terminate_savestk
EE_avr8_terminate_savestk:
	/* Please note that the interrupt are ENABLED */

	/* Save working registers of preempted thread */
	push	r2
     12e:	2f 92       	push	r2
	push	r3
     130:	3f 92       	push	r3
	push	r4
     132:	4f 92       	push	r4
	push	r5
     134:	5f 92       	push	r5
	push	r6
     136:	6f 92       	push	r6
	push	r7
     138:	7f 92       	push	r7
	push	r8
     13a:	8f 92       	push	r8
	push	r9
     13c:	9f 92       	push	r9
	push	r10
     13e:	af 92       	push	r10
	push	r11
     140:	bf 92       	push	r11
	push	r12
     142:	cf 92       	push	r12
	push	r13
     144:	df 92       	push	r13
	push	r14
     146:	ef 92       	push	r14
	push	r15
     148:	ff 92       	push	r15
	push	r16
     14a:	0f 93       	push	r16
	push	r17
     14c:	1f 93       	push	r17
	push	r28
     14e:	cf 93       	push	r28
	push	r29
     150:	df 93       	push	r29

	/* save sp in terminate_data[t] */
	movw	r30,	r24	/* r25:r24 -> r31:r30 */
     152:	fc 01       	movw	r30, r24
	in	r24,	0x3D	/* spl -> r24 */
     154:	8d b7       	in	r24, 0x3d	; 61
	in	r25,	0x3E	/* sph -> r25 */
     156:	9e b7       	in	r25, 0x3e	; 62
	st	z+,	r24
     158:	81 93       	st	Z+, r24
	st	z,	r25
     15a:	90 83       	st	Z, r25

	/* terminate_real_th_body[t]() */
	movw	r30,	r22
     15c:	fb 01       	movw	r30, r22
	icall
     15e:	09 95       	icall

	/* EE_thread_not_terminated() */
	call	EE_thread_not_terminated
     160:	0e 94 01 07 	call	0xe02	; 0xe02 <EE_thread_not_terminated>

00000164 <EE_avr8_terminate_task>:
 * r25:r24 = &terminate_data[t]
 */
	.global	EE_avr8_terminate_task
EE_avr8_terminate_task:
	/* reload sp from terminate_data[t] */
	movw	r30,	r24	/* r25:r24 -> r31:r30 */
     164:	fc 01       	movw	r30, r24
	ld	r24,	z+
     166:	81 91       	ld	r24, Z+
	ld	r25,	z
     168:	90 81       	ld	r25, Z
	out	0x3D,	r24	/* r24 -> spl */
     16a:	8d bf       	out	0x3d, r24	; 61
	out	0x3E,	r25	/* r25 -> sph */
     16c:	9e bf       	out	0x3e, r25	; 62

	/* restore working registers */
	pop	r29
     16e:	df 91       	pop	r29
	pop	r28
     170:	cf 91       	pop	r28
	pop	r17
     172:	1f 91       	pop	r17
	pop	r16
     174:	0f 91       	pop	r16
	pop	r15
     176:	ff 90       	pop	r15
	pop	r14
     178:	ef 90       	pop	r14
	pop	r13
     17a:	df 90       	pop	r13
	pop	r12
     17c:	cf 90       	pop	r12
	pop	r11
     17e:	bf 90       	pop	r11
	pop	r10
     180:	af 90       	pop	r10
	pop	r9
     182:	9f 90       	pop	r9
	pop	r8
     184:	8f 90       	pop	r8
	pop	r7
     186:	7f 90       	pop	r7
	pop	r6
     188:	6f 90       	pop	r6
	pop	r5
     18a:	5f 90       	pop	r5
	pop	r4
     18c:	4f 90       	pop	r4
	pop	r3
     18e:	3f 90       	pop	r3
	pop	r2
     190:	2f 90       	pop	r2

	/* return back to the caller */
	ret
     192:	08 95       	ret

00000194 <_Z16setup_every250uSv>:
MCP_CAN CAN(9);

void setup_every250uS()
{
// set prescalar to "/32" = 011
TCCR2B = _BV(CS21) | _BV(CS20);
     194:	83 e0       	ldi	r24, 0x03	; 3
     196:	80 93 b1 00 	sts	0x00B1, r24

// set WGM to CTC mode (010)
// In this mode Timer2 counts up until it matches OCR2A
// we need to use OCR2A instead of the overflow so we can interrupt
// more often
TCCR2A = _BV(WGM21);
     19a:	82 e0       	ldi	r24, 0x02	; 2
     19c:	80 93 b0 00 	sts	0x00B0, r24
//   0 : 40409.6hz
//  10 : 22730.3
// 100 :  2475.6
// 124 :  2000.3
// 125 :  1984.4
OCR2A = 124;
     1a0:	9c e7       	ldi	r25, 0x7C	; 124
     1a2:	90 93 b3 00 	sts	0x00B3, r25

// When the OCR2A register matches the Timer2 count, cause an interrupt
TIMSK2 = _BV(OCIE2A);
     1a6:	80 93 70 00 	sts	0x0070, r24
     1aa:	08 95       	ret

000001ac <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     1ac:	26 e0       	ldi	r18, 0x06	; 6
     1ae:	40 e8       	ldi	r20, 0x80	; 128
     1b0:	55 e2       	ldi	r21, 0x25	; 37
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	82 ed       	ldi	r24, 0xD2	; 210
     1b8:	92 e0       	ldi	r25, 0x02	; 2
     1ba:	0e 94 44 09 	call	0x1288	; 0x1288 <_ZN14HardwareSerial5beginEmh>

void setup(void)
{

	Serial.begin(9600);
	Serial.println("Serial Communication Established");
     1be:	6a e6       	ldi	r22, 0x6A	; 106
     1c0:	71 e0       	ldi	r23, 0x01	; 1
     1c2:	82 ed       	ldi	r24, 0xD2	; 210
     1c4:	92 e0       	ldi	r25, 0x02	; 2
     1c6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_ZN5Print7printlnEPKc>
	if(CAN_initialize(CAN_1000KBPS)!=CAN_OK)
     1ca:	8f e0       	ldi	r24, 0x0F	; 15
     1cc:	0e 94 1e 04 	call	0x83c	; 0x83c <CAN_initialize>
     1d0:	88 23       	and	r24, r24
     1d2:	31 f0       	breq	.+12     	; 0x1e0 <setup+0x34>
	{
		Serial.println("CAN Initialize Failed");
     1d4:	6b e8       	ldi	r22, 0x8B	; 139
     1d6:	71 e0       	ldi	r23, 0x01	; 1
     1d8:	82 ed       	ldi	r24, 0xD2	; 210
     1da:	92 e0       	ldi	r25, 0x02	; 2
     1dc:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_ZN5Print7printlnEPKc>
	}
	setup_every250uS();   // Used for ISR.
     1e0:	0c 94 ca 00 	jmp	0x194	; 0x194 <_Z16setup_every250uSv>

000001e4 <main>:
 *************************************************************************/

__INLINE__ void EE_mcu_init(void)
{
  /* Interrupt Vector Table Recall. */
  EE_atmega_intvect();
     1e4:	0e 94 11 06 	call	0xc22	; 0xc22 <EE_atmega_intvect>

int main(void)
{
	EE_mcu_init();

	init();
     1e8:	0e 94 26 08 	call	0x104c	; 0x104c <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     1ec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setup>

	StartOS(appmode1);
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	0e 94 67 04 	call	0x8ce	; 0x8ce <EE_oo_StartOS>

	for (;;) {

		if (serialEventRun) serialEventRun();
     1f6:	8e e8       	ldi	r24, 0x8E	; 142
     1f8:	98 e0       	ldi	r25, 0x08	; 8
     1fa:	89 2b       	or	r24, r25
     1fc:	19 f0       	breq	.+6      	; 0x204 <main+0x20>
     1fe:	0e 94 8e 08 	call	0x111c	; 0x111c <_Z14serialEventRunv>
     202:	fd cf       	rjmp	.-6      	; 0x1fe <main+0x1a>
     204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x20>

00000206 <_GLOBAL__sub_I_CAN>:
#include "ee.h"
#include "Arduino.h"
#include "can.h"
#include "mcp_can.h"

MCP_CAN CAN(9);
     206:	69 e0       	ldi	r22, 0x09	; 9
     208:	88 eb       	ldi	r24, 0xB8	; 184
     20a:	92 e0       	ldi	r25, 0x02	; 2
     20c:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <_ZN7MCP_CANC1Eh>

00000210 <isr>:
float right_steer ;
float steer_value;
float steer_lock = 0.366519; // Do not Edit.


ISR (isr){
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	2f 93       	push	r18
     21c:	3f 93       	push	r19
     21e:	4f 93       	push	r20
     220:	5f 93       	push	r21
     222:	6f 93       	push	r22
     224:	7f 93       	push	r23
     226:	8f 93       	push	r24
     228:	9f 93       	push	r25
     22a:	af 93       	push	r26
     22c:	bf 93       	push	r27
     22e:	ef 93       	push	r30
     230:	ff 93       	push	r31
	static int count = 1;
	if (count == 4){
     232:	80 91 22 01 	lds	r24, 0x0122
     236:	90 91 23 01 	lds	r25, 0x0123
     23a:	04 97       	sbiw	r24, 0x04	; 4
     23c:	39 f4       	brne	.+14     	; 0x24c <isr+0x3c>
		IncrementCounter(SysTimerCnt);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	0e 94 d4 05 	call	0xba8	; 0xba8 <EE_oo_IncrementCounter>
		count = 0;
     244:	10 92 23 01 	sts	0x0123, r1
     248:	10 92 22 01 	sts	0x0122, r1
	}
	count++;
     24c:	80 91 22 01 	lds	r24, 0x0122
     250:	90 91 23 01 	lds	r25, 0x0123
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	90 93 23 01 	sts	0x0123, r25
     25a:	80 93 22 01 	sts	0x0122, r24
}
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	bf 91       	pop	r27
     264:	af 91       	pop	r26
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	7f 91       	pop	r23
     26c:	6f 91       	pop	r22
     26e:	5f 91       	pop	r21
     270:	4f 91       	pop	r20
     272:	3f 91       	pop	r19
     274:	2f 91       	pop	r18
     276:	0f 90       	pop	r0
     278:	0f be       	out	0x3f, r0	; 63
     27a:	0f 90       	pop	r0
     27c:	1f 90       	pop	r1
     27e:	18 95       	reti

00000280 <FuncRCV>:

TASK(RCV){
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
     28c:	2d 97       	sbiw	r28, 0x0d	; 13
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61

	unsigned char buf[8]={0};
     298:	8e 01       	movw	r16, r28
     29a:	0f 5f       	subi	r16, 0xFF	; 255
     29c:	1f 4f       	sbci	r17, 0xFF	; 255
     29e:	88 e0       	ldi	r24, 0x08	; 8
     2a0:	f8 01       	movw	r30, r16
     2a2:	11 92       	st	Z+, r1
     2a4:	8a 95       	dec	r24
     2a6:	e9 f7       	brne	.-6      	; 0x2a2 <FuncRCV+0x22>
	unsigned long id;
	unsigned char len;

	while(1)
	{
		CAN_read(&id, &len, buf);
     2a8:	a8 01       	movw	r20, r16
     2aa:	be 01       	movw	r22, r28
     2ac:	63 5f       	subi	r22, 0xF3	; 243
     2ae:	7f 4f       	sbci	r23, 0xFF	; 255
     2b0:	ce 01       	movw	r24, r28
     2b2:	09 96       	adiw	r24, 0x09	; 9
     2b4:	0e 94 33 04 	call	0x866	; 0x866 <CAN_read>
		if(len != 0){
     2b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ba:	88 23       	and	r24, r24
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <FuncRCV+0x40>
     2be:	ba c0       	rjmp	.+372    	; 0x434 <FuncRCV+0x1b4>
			switch(id)
     2c0:	89 85       	ldd	r24, Y+9	; 0x09
     2c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2c4:	ab 85       	ldd	r26, Y+11	; 0x0b
     2c6:	bc 85       	ldd	r27, Y+12	; 0x0c
     2c8:	80 3b       	cpi	r24, 0xB0	; 176
     2ca:	91 05       	cpc	r25, r1
     2cc:	a1 05       	cpc	r26, r1
     2ce:	b1 05       	cpc	r27, r1
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <FuncRCV+0x54>
     2d2:	65 c0       	rjmp	.+202    	; 0x39e <FuncRCV+0x11e>
     2d4:	20 f5       	brcc	.+72     	; 0x31e <FuncRCV+0x9e>
     2d6:	80 3a       	cpi	r24, 0xA0	; 160
     2d8:	91 05       	cpc	r25, r1
     2da:	a1 05       	cpc	r26, r1
     2dc:	b1 05       	cpc	r27, r1
     2de:	09 f4       	brne	.+2      	; 0x2e2 <FuncRCV+0x62>
     2e0:	45 c0       	rjmp	.+138    	; 0x36c <FuncRCV+0xec>
     2e2:	81 3a       	cpi	r24, 0xA1	; 161
     2e4:	91 05       	cpc	r25, r1
     2e6:	a1 05       	cpc	r26, r1
     2e8:	b1 05       	cpc	r27, r1
     2ea:	f1 f6       	brne	.-68     	; 0x2a8 <FuncRCV+0x28>
					memcpy(&LKAS_trigger, buf+2, sizeof(short));
					memcpy(&current_speed, buf+4, sizeof(float));
					break;

				case 0x0A1:
					memcpy(&target_speed, buf, sizeof(float));
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	9a 81       	ldd	r25, Y+2	; 0x02
     2f0:	ab 81       	ldd	r26, Y+3	; 0x03
     2f2:	bc 81       	ldd	r27, Y+4	; 0x04
     2f4:	80 93 c5 03 	sts	0x03C5, r24
     2f8:	90 93 c6 03 	sts	0x03C6, r25
     2fc:	a0 93 c7 03 	sts	0x03C7, r26
     300:	b0 93 c8 03 	sts	0x03C8, r27
					memcpy(&accel, buf+4, sizeof(float));
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	9e 81       	ldd	r25, Y+6	; 0x06
     308:	af 81       	ldd	r26, Y+7	; 0x07
     30a:	b8 85       	ldd	r27, Y+8	; 0x08
     30c:	80 93 91 03 	sts	0x0391, r24
     310:	90 93 92 03 	sts	0x0392, r25
     314:	a0 93 93 03 	sts	0x0393, r26
     318:	b0 93 94 03 	sts	0x0394, r27
					break;
     31c:	c5 cf       	rjmp	.-118    	; 0x2a8 <FuncRCV+0x28>

	while(1)
	{
		CAN_read(&id, &len, buf);
		if(len != 0){
			switch(id)
     31e:	82 3b       	cpi	r24, 0xB2	; 178
     320:	91 05       	cpc	r25, r1
     322:	a1 05       	cpc	r26, r1
     324:	b1 05       	cpc	r27, r1
     326:	09 f4       	brne	.+2      	; 0x32a <FuncRCV+0xaa>
     328:	6c c0       	rjmp	.+216    	; 0x402 <FuncRCV+0x182>
     32a:	08 f4       	brcc	.+2      	; 0x32e <FuncRCV+0xae>
     32c:	51 c0       	rjmp	.+162    	; 0x3d0 <FuncRCV+0x150>
     32e:	80 3c       	cpi	r24, 0xC0	; 192
     330:	91 05       	cpc	r25, r1
     332:	a1 05       	cpc	r26, r1
     334:	b1 05       	cpc	r27, r1
     336:	09 f0       	breq	.+2      	; 0x33a <FuncRCV+0xba>
     338:	b7 cf       	rjmp	.-146    	; 0x2a8 <FuncRCV+0x28>
				case 0x0B2:
					memcpy(&toMiddle, buf, sizeof(float));
					memcpy(&width, buf+4, sizeof(float));
					break;
				case 0x0C0:
					memcpy(&speed_error, buf, sizeof(float));
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	ab 81       	ldd	r26, Y+3	; 0x03
     340:	bc 81       	ldd	r27, Y+4	; 0x04
     342:	80 93 95 03 	sts	0x0395, r24
     346:	90 93 96 03 	sts	0x0396, r25
     34a:	a0 93 97 03 	sts	0x0397, r26
     34e:	b0 93 98 03 	sts	0x0398, r27
					memcpy(&lateral_error, buf+4, sizeof(float));
     352:	8d 81       	ldd	r24, Y+5	; 0x05
     354:	9e 81       	ldd	r25, Y+6	; 0x06
     356:	af 81       	ldd	r26, Y+7	; 0x07
     358:	b8 85       	ldd	r27, Y+8	; 0x08
     35a:	80 93 a3 03 	sts	0x03A3, r24
     35e:	90 93 a4 03 	sts	0x03A4, r25
     362:	a0 93 a5 03 	sts	0x03A5, r26
     366:	b0 93 a6 03 	sts	0x03A6, r27
					break;
     36a:	9e cf       	rjmp	.-196    	; 0x2a8 <FuncRCV+0x28>
		CAN_read(&id, &len, buf);
		if(len != 0){
			switch(id)
			{
				case 0x0A0:
					memcpy(&CC_trigger, buf, sizeof(short));
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	90 93 bc 03 	sts	0x03BC, r25
     374:	80 93 bb 03 	sts	0x03BB, r24
					memcpy(&LKAS_trigger, buf+2, sizeof(short));
     378:	8b 81       	ldd	r24, Y+3	; 0x03
     37a:	9c 81       	ldd	r25, Y+4	; 0x04
     37c:	90 93 9a 03 	sts	0x039A, r25
     380:	80 93 99 03 	sts	0x0399, r24
					memcpy(&current_speed, buf+4, sizeof(float));
     384:	8d 81       	ldd	r24, Y+5	; 0x05
     386:	9e 81       	ldd	r25, Y+6	; 0x06
     388:	af 81       	ldd	r26, Y+7	; 0x07
     38a:	b8 85       	ldd	r27, Y+8	; 0x08
     38c:	80 93 af 03 	sts	0x03AF, r24
     390:	90 93 b0 03 	sts	0x03B0, r25
     394:	a0 93 b1 03 	sts	0x03B1, r26
     398:	b0 93 b2 03 	sts	0x03B2, r27
					break;
     39c:	85 cf       	rjmp	.-246    	; 0x2a8 <FuncRCV+0x28>
					memcpy(&target_speed, buf, sizeof(float));
					memcpy(&accel, buf+4, sizeof(float));
					break;

				case 0x0B0:
					memcpy(&road_direction, buf, sizeof(float));
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	9a 81       	ldd	r25, Y+2	; 0x02
     3a2:	ab 81       	ldd	r26, Y+3	; 0x03
     3a4:	bc 81       	ldd	r27, Y+4	; 0x04
     3a6:	80 93 9b 03 	sts	0x039B, r24
     3aa:	90 93 9c 03 	sts	0x039C, r25
     3ae:	a0 93 9d 03 	sts	0x039D, r26
     3b2:	b0 93 9e 03 	sts	0x039E, r27
					memcpy(&yaw, buf+4, sizeof(float));
     3b6:	8d 81       	ldd	r24, Y+5	; 0x05
     3b8:	9e 81       	ldd	r25, Y+6	; 0x06
     3ba:	af 81       	ldd	r26, Y+7	; 0x07
     3bc:	b8 85       	ldd	r27, Y+8	; 0x08
     3be:	80 93 c1 03 	sts	0x03C1, r24
     3c2:	90 93 c2 03 	sts	0x03C2, r25
     3c6:	a0 93 c3 03 	sts	0x03C3, r26
     3ca:	b0 93 c4 03 	sts	0x03C4, r27
					break;
     3ce:	6c cf       	rjmp	.-296    	; 0x2a8 <FuncRCV+0x28>

				case 0x0B1:
					memcpy(&toLeft, buf, sizeof(float));
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	9a 81       	ldd	r25, Y+2	; 0x02
     3d4:	ab 81       	ldd	r26, Y+3	; 0x03
     3d6:	bc 81       	ldd	r27, Y+4	; 0x04
     3d8:	80 93 a7 03 	sts	0x03A7, r24
     3dc:	90 93 a8 03 	sts	0x03A8, r25
     3e0:	a0 93 a9 03 	sts	0x03A9, r26
     3e4:	b0 93 aa 03 	sts	0x03AA, r27
					memcpy(&toRight, buf+4, sizeof(float));
     3e8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ea:	9e 81       	ldd	r25, Y+6	; 0x06
     3ec:	af 81       	ldd	r26, Y+7	; 0x07
     3ee:	b8 85       	ldd	r27, Y+8	; 0x08
     3f0:	80 93 8d 03 	sts	0x038D, r24
     3f4:	90 93 8e 03 	sts	0x038E, r25
     3f8:	a0 93 8f 03 	sts	0x038F, r26
     3fc:	b0 93 90 03 	sts	0x0390, r27
					break;
     400:	53 cf       	rjmp	.-346    	; 0x2a8 <FuncRCV+0x28>

				case 0x0B2:
					memcpy(&toMiddle, buf, sizeof(float));
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	9a 81       	ldd	r25, Y+2	; 0x02
     406:	ab 81       	ldd	r26, Y+3	; 0x03
     408:	bc 81       	ldd	r27, Y+4	; 0x04
     40a:	80 93 cd 03 	sts	0x03CD, r24
     40e:	90 93 ce 03 	sts	0x03CE, r25
     412:	a0 93 cf 03 	sts	0x03CF, r26
     416:	b0 93 d0 03 	sts	0x03D0, r27
					memcpy(&width, buf+4, sizeof(float));
     41a:	8d 81       	ldd	r24, Y+5	; 0x05
     41c:	9e 81       	ldd	r25, Y+6	; 0x06
     41e:	af 81       	ldd	r26, Y+7	; 0x07
     420:	b8 85       	ldd	r27, Y+8	; 0x08
     422:	80 93 d1 03 	sts	0x03D1, r24
     426:	90 93 d2 03 	sts	0x03D2, r25
     42a:	a0 93 d3 03 	sts	0x03D3, r26
     42e:	b0 93 d4 03 	sts	0x03D4, r27
					break;
     432:	3a cf       	rjmp	.-396    	; 0x2a8 <FuncRCV+0x28>
			}
		}
		else
			break;
	}
	TerminateTask();
     434:	0e 94 3a 04 	call	0x874	; 0x874 <EE_oo_TerminateTask>

};
     438:	2d 96       	adiw	r28, 0x0d	; 13
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	08 95       	ret

0000044e <FuncCC>:


TASK(CC) {
     44e:	cf 92       	push	r12
     450:	df 92       	push	r13
     452:	ef 92       	push	r14
     454:	ff 92       	push	r15
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	28 97       	sbiw	r28, 0x08	; 8
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61

	unsigned char buf[8];

	if(CC_trigger>0.5)
     46a:	60 91 bb 03 	lds	r22, 0x03BB
     46e:	70 91 bc 03 	lds	r23, 0x03BC
     472:	88 27       	eor	r24, r24
     474:	77 fd       	sbrc	r23, 7
     476:	80 95       	com	r24
     478:	98 2f       	mov	r25, r24
     47a:	0e 94 8e 10 	call	0x211c	; 0x211c <__floatsisf>
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	5f e3       	ldi	r21, 0x3F	; 63
     486:	0e 94 3e 11 	call	0x227c	; 0x227c <__gesf2>
     48a:	18 16       	cp	r1, r24
     48c:	0c f0       	brlt	.+2      	; 0x490 <FuncCC+0x42>
     48e:	51 c0       	rjmp	.+162    	; 0x532 <FuncCC+0xe4>
	{


		if(current_speed < 99.5)
     490:	c0 90 af 03 	lds	r12, 0x03AF
     494:	d0 90 b0 03 	lds	r13, 0x03B0
     498:	e0 90 b1 03 	lds	r14, 0x03B1
     49c:	f0 90 b2 03 	lds	r15, 0x03B2
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	47 ec       	ldi	r20, 0xC7	; 199
     4a6:	52 e4       	ldi	r21, 0x42	; 66
     4a8:	c7 01       	movw	r24, r14
     4aa:	b6 01       	movw	r22, r12
     4ac:	0e 94 20 10 	call	0x2040	; 0x2040 <__cmpsf2>
     4b0:	87 ff       	sbrs	r24, 7
     4b2:	05 c0       	rjmp	.+10     	; 0x4be <FuncCC+0x70>
			accel = 0.224;
     4b4:	82 e4       	ldi	r24, 0x42	; 66
     4b6:	90 e6       	ldi	r25, 0x60	; 96
     4b8:	a5 e6       	ldi	r26, 0x65	; 101
     4ba:	be e3       	ldi	r27, 0x3E	; 62
     4bc:	0e c0       	rjmp	.+28     	; 0x4da <FuncCC+0x8c>
		else if(current_speed <= 100.0)
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	48 ec       	ldi	r20, 0xC8	; 200
     4c4:	52 e4       	ldi	r21, 0x42	; 66
     4c6:	c7 01       	movw	r24, r14
     4c8:	b6 01       	movw	r22, r12
     4ca:	0e 94 20 10 	call	0x2040	; 0x2040 <__cmpsf2>
     4ce:	18 16       	cp	r1, r24
     4d0:	6c f0       	brlt	.+26     	; 0x4ec <FuncCC+0x9e>
			accel = 0.225;
     4d2:	86 e6       	ldi	r24, 0x66	; 102
     4d4:	96 e6       	ldi	r25, 0x66	; 102
     4d6:	a6 e6       	ldi	r26, 0x66	; 102
     4d8:	be e3       	ldi	r27, 0x3E	; 62
     4da:	80 93 91 03 	sts	0x0391, r24
     4de:	90 93 92 03 	sts	0x0392, r25
     4e2:	a0 93 93 03 	sts	0x0393, r26
     4e6:	b0 93 94 03 	sts	0x0394, r27
     4ea:	2b c0       	rjmp	.+86     	; 0x542 <FuncCC+0xf4>
		else if(current_speed <= 100.7)
     4ec:	26 e6       	ldi	r18, 0x66	; 102
     4ee:	36 e6       	ldi	r19, 0x66	; 102
     4f0:	49 ec       	ldi	r20, 0xC9	; 201
     4f2:	52 e4       	ldi	r21, 0x42	; 66
     4f4:	c7 01       	movw	r24, r14
     4f6:	b6 01       	movw	r22, r12
     4f8:	0e 94 20 10 	call	0x2040	; 0x2040 <__cmpsf2>
     4fc:	18 16       	cp	r1, r24
     4fe:	2c f0       	brlt	.+10     	; 0x50a <FuncCC+0xbc>
			accel = 0.212;
     500:	87 e8       	ldi	r24, 0x87	; 135
     502:	96 e1       	ldi	r25, 0x16	; 22
     504:	a9 e5       	ldi	r26, 0x59	; 89
     506:	be e3       	ldi	r27, 0x3E	; 62
     508:	e8 cf       	rjmp	.-48     	; 0x4da <FuncCC+0x8c>
		else if(current_speed <= 100.9)
     50a:	2d ec       	ldi	r18, 0xCD	; 205
     50c:	3c ec       	ldi	r19, 0xCC	; 204
     50e:	49 ec       	ldi	r20, 0xC9	; 201
     510:	52 e4       	ldi	r21, 0x42	; 66
     512:	c7 01       	movw	r24, r14
     514:	b6 01       	movw	r22, r12
     516:	0e 94 20 10 	call	0x2040	; 0x2040 <__cmpsf2>
     51a:	18 16       	cp	r1, r24
     51c:	2c f0       	brlt	.+10     	; 0x528 <FuncCC+0xda>
			accel = 0.205;
     51e:	85 e8       	ldi	r24, 0x85	; 133
     520:	9b ee       	ldi	r25, 0xEB	; 235
     522:	a1 e5       	ldi	r26, 0x51	; 81
     524:	be e3       	ldi	r27, 0x3E	; 62
     526:	d9 cf       	rjmp	.-78     	; 0x4da <FuncCC+0x8c>
		else
			accel = 0.207;
     528:	8f ec       	ldi	r24, 0xCF	; 207
     52a:	97 ef       	ldi	r25, 0xF7	; 247
     52c:	a3 e5       	ldi	r26, 0x53	; 83
     52e:	be e3       	ldi	r27, 0x3E	; 62
     530:	d4 cf       	rjmp	.-88     	; 0x4da <FuncCC+0x8c>

	}
	else
	{
		accel = 0;
     532:	10 92 91 03 	sts	0x0391, r1
     536:	10 92 92 03 	sts	0x0392, r1
     53a:	10 92 93 03 	sts	0x0393, r1
     53e:	10 92 94 03 	sts	0x0394, r1
	}

	memcpy(buf, &accel, sizeof(float));
     542:	80 91 91 03 	lds	r24, 0x0391
     546:	90 91 92 03 	lds	r25, 0x0392
     54a:	a0 91 93 03 	lds	r26, 0x0393
     54e:	b0 91 94 03 	lds	r27, 0x0394
     552:	89 83       	std	Y+1, r24	; 0x01
     554:	9a 83       	std	Y+2, r25	; 0x02
     556:	ab 83       	std	Y+3, r26	; 0x03
     558:	bc 83       	std	Y+4, r27	; 0x04
	memcpy(buf+4, &brake, sizeof(float));
     55a:	80 91 c9 03 	lds	r24, 0x03C9
     55e:	90 91 ca 03 	lds	r25, 0x03CA
     562:	a0 91 cb 03 	lds	r26, 0x03CB
     566:	b0 91 cc 03 	lds	r27, 0x03CC
     56a:	8d 83       	std	Y+5, r24	; 0x05
     56c:	9e 83       	std	Y+6, r25	; 0x06
     56e:	af 83       	std	Y+7, r26	; 0x07
     570:	b8 87       	std	Y+8, r27	; 0x08

	CAN_write(0x0A5, 8, buf);
     572:	9e 01       	movw	r18, r28
     574:	2f 5f       	subi	r18, 0xFF	; 255
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	48 e0       	ldi	r20, 0x08	; 8
     57a:	65 ea       	ldi	r22, 0xA5	; 165
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 23 04 	call	0x846	; 0x846 <CAN_write>
	TerminateTask();
     586:	0e 94 3a 04 	call	0x874	; 0x874 <EE_oo_TerminateTask>

};
     58a:	28 96       	adiw	r28, 0x08	; 8
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	08 95       	ret

000005a4 <Calculate_Steer_Value>:



   /* Do NOT Edit This Function */
void Calculate_Steer_Value(float angle)
{
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
	steer_value = angle/steer_lock;
     5ac:	20 91 24 01 	lds	r18, 0x0124
     5b0:	30 91 25 01 	lds	r19, 0x0125
     5b4:	40 91 26 01 	lds	r20, 0x0126
     5b8:	50 91 27 01 	lds	r21, 0x0127
     5bc:	0e 94 24 10 	call	0x2048	; 0x2048 <__divsf3>
     5c0:	6b 01       	movw	r12, r22
     5c2:	7c 01       	movw	r14, r24
     5c4:	60 93 b7 03 	sts	0x03B7, r22
     5c8:	70 93 b8 03 	sts	0x03B8, r23
     5cc:	80 93 b9 03 	sts	0x03B9, r24
     5d0:	90 93 ba 03 	sts	0x03BA, r25

	if(steer_value>0.0)
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	a9 01       	movw	r20, r18
     5da:	0e 94 3e 11 	call	0x227c	; 0x227c <__gesf2>
     5de:	18 16       	cp	r1, r24
     5e0:	7c f5       	brge	.+94     	; 0x640 <Calculate_Steer_Value+0x9c>
	{
		if(steer_value > 1.0)
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e8       	ldi	r20, 0x80	; 128
     5e8:	5f e3       	ldi	r21, 0x3F	; 63
     5ea:	c7 01       	movw	r24, r14
     5ec:	b6 01       	movw	r22, r12
     5ee:	0e 94 3e 11 	call	0x227c	; 0x227c <__gesf2>
     5f2:	18 16       	cp	r1, r24
     5f4:	64 f4       	brge	.+24     	; 0x60e <Calculate_Steer_Value+0x6a>
		{
			steer_value = 1.0;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e8       	ldi	r26, 0x80	; 128
     5fc:	bf e3       	ldi	r27, 0x3F	; 63
     5fe:	80 93 b7 03 	sts	0x03B7, r24
     602:	90 93 b8 03 	sts	0x03B8, r25
     606:	a0 93 b9 03 	sts	0x03B9, r26
     60a:	b0 93 ba 03 	sts	0x03BA, r27
		}

		left_steer = steer_value;
     60e:	80 91 b7 03 	lds	r24, 0x03B7
     612:	90 91 b8 03 	lds	r25, 0x03B8
     616:	a0 91 b9 03 	lds	r26, 0x03B9
     61a:	b0 91 ba 03 	lds	r27, 0x03BA
     61e:	80 93 9f 03 	sts	0x039F, r24
     622:	90 93 a0 03 	sts	0x03A0, r25
     626:	a0 93 a1 03 	sts	0x03A1, r26
     62a:	b0 93 a2 03 	sts	0x03A2, r27
		right_steer = 0.0;
     62e:	10 92 ab 03 	sts	0x03AB, r1
     632:	10 92 ac 03 	sts	0x03AC, r1
     636:	10 92 ad 03 	sts	0x03AD, r1
     63a:	10 92 ae 03 	sts	0x03AE, r1
     63e:	38 c0       	rjmp	.+112    	; 0x6b0 <Calculate_Steer_Value+0x10c>
	}

	else if(steer_value < 0.0)
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	a9 01       	movw	r20, r18
     646:	c7 01       	movw	r24, r14
     648:	b6 01       	movw	r22, r12
     64a:	0e 94 20 10 	call	0x2040	; 0x2040 <__cmpsf2>
     64e:	87 ff       	sbrs	r24, 7
     650:	2f c0       	rjmp	.+94     	; 0x6b0 <Calculate_Steer_Value+0x10c>
	{
		if(steer_value < -1.0)
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e8       	ldi	r20, 0x80	; 128
     658:	5f eb       	ldi	r21, 0xBF	; 191
     65a:	c7 01       	movw	r24, r14
     65c:	b6 01       	movw	r22, r12
     65e:	0e 94 20 10 	call	0x2040	; 0x2040 <__cmpsf2>
     662:	87 ff       	sbrs	r24, 7
     664:	0c c0       	rjmp	.+24     	; 0x67e <Calculate_Steer_Value+0xda>
		{
			steer_value = -1.0;
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	a0 e8       	ldi	r26, 0x80	; 128
     66c:	bf eb       	ldi	r27, 0xBF	; 191
     66e:	80 93 b7 03 	sts	0x03B7, r24
     672:	90 93 b8 03 	sts	0x03B8, r25
     676:	a0 93 b9 03 	sts	0x03B9, r26
     67a:	b0 93 ba 03 	sts	0x03BA, r27
		}

		right_steer = -(steer_value);
     67e:	80 91 b7 03 	lds	r24, 0x03B7
     682:	90 91 b8 03 	lds	r25, 0x03B8
     686:	a0 91 b9 03 	lds	r26, 0x03B9
     68a:	b0 91 ba 03 	lds	r27, 0x03BA
     68e:	b0 58       	subi	r27, 0x80	; 128
     690:	80 93 ab 03 	sts	0x03AB, r24
     694:	90 93 ac 03 	sts	0x03AC, r25
     698:	a0 93 ad 03 	sts	0x03AD, r26
     69c:	b0 93 ae 03 	sts	0x03AE, r27
		left_steer = 0.0;
     6a0:	10 92 9f 03 	sts	0x039F, r1
     6a4:	10 92 a0 03 	sts	0x03A0, r1
     6a8:	10 92 a1 03 	sts	0x03A1, r1
     6ac:	10 92 a2 03 	sts	0x03A2, r1
	}

}
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	08 95       	ret

000006ba <FuncLKAS>:
	CAN_write(0x0A5, 8, buf);
	TerminateTask();

};

TASK(LKAS){
     6ba:	cf 92       	push	r12
     6bc:	df 92       	push	r13
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	28 97       	sbiw	r28, 0x08	; 8
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61

	unsigned char buf[8];
	float angle;

	if(LKAS_trigger>0.5)
     6d6:	60 91 99 03 	lds	r22, 0x0399
     6da:	70 91 9a 03 	lds	r23, 0x039A
     6de:	88 27       	eor	r24, r24
     6e0:	77 fd       	sbrc	r23, 7
     6e2:	80 95       	com	r24
     6e4:	98 2f       	mov	r25, r24
     6e6:	0e 94 8e 10 	call	0x211c	; 0x211c <__floatsisf>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	5f e3       	ldi	r21, 0x3F	; 63
     6f2:	0e 94 3e 11 	call	0x227c	; 0x227c <__gesf2>
     6f6:	18 16       	cp	r1, r24
     6f8:	0c f0       	brlt	.+2      	; 0x6fc <FuncLKAS+0x42>
     6fa:	5f c0       	rjmp	.+190    	; 0x7ba <FuncLKAS+0x100>
//				angle = road_direction - yaw + 0.015;
//		}
//		else {
//			angle = road_direction - yaw + 0.03;
//		}
		if(toLeft < 3.5)
     6fc:	c0 90 a7 03 	lds	r12, 0x03A7
     700:	d0 90 a8 03 	lds	r13, 0x03A8
     704:	e0 90 a9 03 	lds	r14, 0x03A9
     708:	f0 90 aa 03 	lds	r15, 0x03AA
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e6       	ldi	r20, 0x60	; 96
     712:	50 e4       	ldi	r21, 0x40	; 64
     714:	c7 01       	movw	r24, r14
     716:	b6 01       	movw	r22, r12
     718:	0e 94 20 10 	call	0x2040	; 0x2040 <__cmpsf2>
     71c:	87 ff       	sbrs	r24, 7
     71e:	19 c0       	rjmp	.+50     	; 0x752 <FuncLKAS+0x98>
			angle = road_direction - yaw - 0.017;
     720:	20 91 c1 03 	lds	r18, 0x03C1
     724:	30 91 c2 03 	lds	r19, 0x03C2
     728:	40 91 c3 03 	lds	r20, 0x03C3
     72c:	50 91 c4 03 	lds	r21, 0x03C4
     730:	60 91 9b 03 	lds	r22, 0x039B
     734:	70 91 9c 03 	lds	r23, 0x039C
     738:	80 91 9d 03 	lds	r24, 0x039D
     73c:	90 91 9e 03 	lds	r25, 0x039E
     740:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     744:	26 e9       	ldi	r18, 0x96	; 150
     746:	33 e4       	ldi	r19, 0x43	; 67
     748:	4b e8       	ldi	r20, 0x8B	; 139
     74a:	5c e3       	ldi	r21, 0x3C	; 60
     74c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     750:	31 c0       	rjmp	.+98     	; 0x7b4 <FuncLKAS+0xfa>
		else if(toLeft <= 6.5)
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	40 ed       	ldi	r20, 0xD0	; 208
     758:	50 e4       	ldi	r21, 0x40	; 64
     75a:	c7 01       	movw	r24, r14
     75c:	b6 01       	movw	r22, r12
     75e:	0e 94 20 10 	call	0x2040	; 0x2040 <__cmpsf2>
			angle = road_direction - yaw + 0.015;
     762:	20 91 c1 03 	lds	r18, 0x03C1
     766:	30 91 c2 03 	lds	r19, 0x03C2
     76a:	40 91 c3 03 	lds	r20, 0x03C3
     76e:	50 91 c4 03 	lds	r21, 0x03C4
//		else {
//			angle = road_direction - yaw + 0.03;
//		}
		if(toLeft < 3.5)
			angle = road_direction - yaw - 0.017;
		else if(toLeft <= 6.5)
     772:	18 16       	cp	r1, r24
     774:	7c f0       	brlt	.+30     	; 0x794 <FuncLKAS+0xda>
			angle = road_direction - yaw + 0.015;
     776:	60 91 9b 03 	lds	r22, 0x039B
     77a:	70 91 9c 03 	lds	r23, 0x039C
     77e:	80 91 9d 03 	lds	r24, 0x039D
     782:	90 91 9e 03 	lds	r25, 0x039E
     786:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     78a:	2f e8       	ldi	r18, 0x8F	; 143
     78c:	32 ec       	ldi	r19, 0xC2	; 194
     78e:	45 e7       	ldi	r20, 0x75	; 117
     790:	5c e3       	ldi	r21, 0x3C	; 60
     792:	0e c0       	rjmp	.+28     	; 0x7b0 <FuncLKAS+0xf6>
		else
			angle = road_direction - yaw + 0.032;
     794:	60 91 9b 03 	lds	r22, 0x039B
     798:	70 91 9c 03 	lds	r23, 0x039C
     79c:	80 91 9d 03 	lds	r24, 0x039D
     7a0:	90 91 9e 03 	lds	r25, 0x039E
     7a4:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     7a8:	2f e6       	ldi	r18, 0x6F	; 111
     7aa:	32 e1       	ldi	r19, 0x12	; 18
     7ac:	43 e0       	ldi	r20, 0x03	; 3
     7ae:	5d e3       	ldi	r21, 0x3D	; 61
     7b0:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__addsf3>
		/* Don't Edit This Function */
		Calculate_Steer_Value(angle);
     7b4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Calculate_Steer_Value>
     7b8:	10 c0       	rjmp	.+32     	; 0x7da <FuncLKAS+0x120>

	}

	else
	{
		left_steer = right_steer = 0.0;
     7ba:	10 92 ab 03 	sts	0x03AB, r1
     7be:	10 92 ac 03 	sts	0x03AC, r1
     7c2:	10 92 ad 03 	sts	0x03AD, r1
     7c6:	10 92 ae 03 	sts	0x03AE, r1
     7ca:	10 92 9f 03 	sts	0x039F, r1
     7ce:	10 92 a0 03 	sts	0x03A0, r1
     7d2:	10 92 a1 03 	sts	0x03A1, r1
     7d6:	10 92 a2 03 	sts	0x03A2, r1
	}

	memcpy(buf, &left_steer, sizeof(float));
     7da:	80 91 9f 03 	lds	r24, 0x039F
     7de:	90 91 a0 03 	lds	r25, 0x03A0
     7e2:	a0 91 a1 03 	lds	r26, 0x03A1
     7e6:	b0 91 a2 03 	lds	r27, 0x03A2
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	9a 83       	std	Y+2, r25	; 0x02
     7ee:	ab 83       	std	Y+3, r26	; 0x03
     7f0:	bc 83       	std	Y+4, r27	; 0x04
	memcpy(buf+4, &right_steer, sizeof(float));
     7f2:	80 91 ab 03 	lds	r24, 0x03AB
     7f6:	90 91 ac 03 	lds	r25, 0x03AC
     7fa:	a0 91 ad 03 	lds	r26, 0x03AD
     7fe:	b0 91 ae 03 	lds	r27, 0x03AE
     802:	8d 83       	std	Y+5, r24	; 0x05
     804:	9e 83       	std	Y+6, r25	; 0x06
     806:	af 83       	std	Y+7, r26	; 0x07
     808:	b8 87       	std	Y+8, r27	; 0x08

	CAN_write(0x0B5, 8, buf);
     80a:	9e 01       	movw	r18, r28
     80c:	2f 5f       	subi	r18, 0xFF	; 255
     80e:	3f 4f       	sbci	r19, 0xFF	; 255
     810:	48 e0       	ldi	r20, 0x08	; 8
     812:	65 eb       	ldi	r22, 0xB5	; 181
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 23 04 	call	0x846	; 0x846 <CAN_write>

	TerminateTask();
     81e:	0e 94 3a 04 	call	0x874	; 0x874 <EE_oo_TerminateTask>
};
     822:	28 96       	adiw	r28, 0x08	; 8
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	df 90       	pop	r13
     838:	cf 90       	pop	r12
     83a:	08 95       	ret

0000083c <CAN_initialize>:
CAN_100KBPS, CAN_125KBPS, CAN_200KBPS, CAN_250KBPS, CAN_500KBPS, CAN_1000KBPS
********************************************************************************/

byte CAN_initialize(byte Baudrate)
{
	return CAN.begin(Baudrate);
     83c:	68 2f       	mov	r22, r24
     83e:	88 eb       	ldi	r24, 0xB8	; 184
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <_ZN7MCP_CAN5beginEh>

00000846 <CAN_write>:

ID : CC = 0x0A5 // LKAS = 0x0B5
********************************************************************************/

byte CAN_write(unsigned long id, byte len, unsigned char *buf)
{
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
	return CAN.sendMsgBuf(id, 0, len, buf);
     84c:	79 01       	movw	r14, r18
     84e:	04 2f       	mov	r16, r20
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	ab 01       	movw	r20, r22
     854:	bc 01       	movw	r22, r24
     856:	88 eb       	ldi	r24, 0xB8	; 184
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZN7MCP_CAN10sendMsgBufEmhhPh>
}
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	08 95       	ret

00000866 <CAN_read>:

ID for LKAS : 0x0B0~0x0B3 ,  CC : 0x0A0~0x0A1
********************************************************************************/

byte CAN_read( unsigned long *id, unsigned char *len, unsigned char *buf)
{
     866:	9a 01       	movw	r18, r20
	return CAN.readMsgBufID(id, len, buf);
     868:	ab 01       	movw	r20, r22
     86a:	bc 01       	movw	r22, r24
     86c:	88 eb       	ldi	r24, 0xB8	; 184
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <_ZN7MCP_CAN12readMsgBufIDEPmPhS1_>

00000874 <EE_oo_TerminateTask>:
       E_OS_CALLLEVEL if called at interrupt level
*/

#ifndef __PRIVATE_TERMINATETASK__
StatusType EE_oo_TerminateTask(void)
{
     874:	cf 93       	push	r28
/*
 * Supend interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_avr8_suspendIRQ()
{
  register EE_FREG sr = SREG;
     876:	cf b7       	in	r28, 0x3f	; 63
/*
 * Disable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_disableIRQ(void)
{
  cli();
     878:	f8 94       	cli
  } else
#endif /* EE_AS_USER_SPINLOCKS__ */
#endif /* __OO_EXTENDED_STATUS__ */
  {
#ifndef __OO_NO_CHAINTASK__
    EE_th_terminate_nextask[EE_stk_queryfirst()] = EE_NIL;
     87a:	80 91 1b 01 	lds	r24, 0x011B
     87e:	99 27       	eor	r25, r25
     880:	87 fd       	sbrc	r24, 7
     882:	90 95       	com	r25
     884:	fc 01       	movw	r30, r24
     886:	ee 5f       	subi	r30, 0xFE	; 254
     888:	fe 4f       	sbci	r31, 0xFE	; 254
     88a:	2f ef       	ldi	r18, 0xFF	; 255
     88c:	20 83       	st	Z, r18
  );
}

__INLINE__ void __ALWAYS_INLINE__ EE_hal_terminate_task(EE_TID t)
{
  EE_avr8_terminate_task(&EE_terminate_data[t]);
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	8d 58       	subi	r24, 0x8D	; 141
     898:	9c 4f       	sbci	r25, 0xFC	; 252
     89a:	0e 94 b2 00 	call	0x164	; 0x164 <EE_avr8_terminate_task>
 * Resume interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_resumeIRQ(EE_FREG sr)
{
  EE_barrier();
  SREG = sr;
     89e:	cf bf       	out	0x3f, r28	; 63

  EE_ORTI_set_service_out(EE_SERVICETRACE_TERMINATETASK);
  EE_OS_EXIT_CRITICAL_SECTION();

  return ev;
}
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <EE_oo_thread_stub>:
extern void EE_avr8_terminate_savestk(EE_ADDR sp, EE_ADDR realbody);
extern void EE_avr8_terminate_task(EE_ADDR sp);

__INLINE__ void __ALWAYS_INLINE__ EE_hal_terminate_savestk(EE_TID t)
{
  EE_avr8_terminate_savestk(
     8a6:	80 91 1b 01 	lds	r24, 0x011B
     8aa:	99 27       	eor	r25, r25
     8ac:	87 fd       	sbrc	r24, 7
     8ae:	90 95       	com	r25
    &EE_terminate_data[t],
    (EE_ADDR)EE_terminate_real_th_body[t]
     8b0:	fc 01       	movw	r30, r24
     8b2:	ee 0f       	add	r30, r30
     8b4:	ff 1f       	adc	r31, r31
     8b6:	ec 59       	subi	r30, 0x9C	; 156
     8b8:	fe 4f       	sbci	r31, 0xFE	; 254
extern void EE_avr8_terminate_savestk(EE_ADDR sp, EE_ADDR realbody);
extern void EE_avr8_terminate_task(EE_ADDR sp);

__INLINE__ void __ALWAYS_INLINE__ EE_hal_terminate_savestk(EE_TID t)
{
  EE_avr8_terminate_savestk(
     8ba:	60 81       	ld	r22, Z
     8bc:	71 81       	ldd	r23, Z+1	; 0x01
    &EE_terminate_data[t],
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
extern void EE_avr8_terminate_savestk(EE_ADDR sp, EE_ADDR realbody);
extern void EE_avr8_terminate_task(EE_ADDR sp);

__INLINE__ void __ALWAYS_INLINE__ EE_hal_terminate_savestk(EE_TID t)
{
  EE_avr8_terminate_savestk(
     8c6:	8d 58       	subi	r24, 0x8D	; 141
     8c8:	9c 4f       	sbci	r25, 0xFC	; 252
     8ca:	0c 94 97 00 	jmp	0x12e	; 0x12e <EE_avr8_terminate_savestk>

000008ce <EE_oo_StartOS>:
  }
}
#endif /* __OO_STARTOS_OLD__ && !__MSRP__ */

StatusType EE_oo_StartOS(AppModeType Mode)
{
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
  register StatusType ev = E_OK;

  EE_ORTI_set_service_in(EE_SERVICETRACE_STARTOS);

  /* Check if this is the first time that I call StartOS */
  if ( EE_oo_started != 0U ) {
     8da:	90 91 d5 03 	lds	r25, 0x03D5
     8de:	91 11       	cpse	r25, r1
     8e0:	57 c0       	rjmp	.+174    	; 0x990 <__stack+0x91>
/*
 * Disable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_disableIRQ(void)
{
  cli();
     8e2:	f8 94       	cli
        Mode = OSDEFAULTAPPMODE;
      }
#endif /* __MSRP__ && !EE_AS_MULTICORE_NO_SYNC */

      /* Set EE_ApplicationMode for this core */
      EE_ApplicationMode = Mode;
     8e4:	80 93 8c 03 	sts	0x038C, r24

      /* Set the StartOS flag after all error checks and before return to user
         code in StartupHook */
      EE_oo_started = 1U;
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	90 93 d5 03 	sts	0x03D5, r25

#if defined(__OO_AUTOSTART_TASK__) || defined(__OO_AUTOSTART_ALARM__) ||\
  defined(EE_AS_AUTOSTART_SCHEDULETABLE__)
static void EE_oo_autostart_os ( AppModeType Mode )
{
  if ( Mode < EE_MAX_APPMODE ) {
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	28 f0       	brcs	.+10     	; 0x8fc <EE_oo_StartOS+0x2e>
#endif /* __MSRP__ && !EE_AS_MULTICORE_NO_SYNC */

      /* Check if there is a preemption.
          This code is optimized for this case, but for code readability we
          could have been used EE_oo_preemption_point too. */
      rq = EE_rq_queryfirst();
     8f2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <EE_rq_queryfirst>
      if ( rq != EE_NIL ) {
     8f6:	8f 3f       	cpi	r24, 0xFF	; 255
     8f8:	91 f5       	brne	.+100    	; 0x95e <__stack+0x5f>
     8fa:	47 c0       	rjmp	.+142    	; 0x98a <__stack+0x8b>
}

static void  EE_oo_autostart_alarms(AppModeType Mode)
{
  register EE_UREG n, t;
  n = EE_oo_autostart_alarm_data[Mode].n;
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	ec 01       	movw	r28, r24
     900:	cc 0f       	add	r28, r28
     902:	dd 1f       	adc	r29, r29
     904:	c8 0f       	add	r28, r24
     906:	d9 1f       	adc	r29, r25
     908:	c2 5d       	subi	r28, 0xD2	; 210
     90a:	de 4f       	sbci	r29, 0xFE	; 254
     90c:	f9 90       	ld	r15, Y+
     90e:	00 e0       	ldi	r16, 0x00	; 0
     910:	10 e0       	ldi	r17, 0x00	; 0
  EE_oo_handle_rel_counter_object_insertion( CounterObjectType ObjectID,
    TickType increment, TickType cycle )
{

  /* first, use the alarm and set the cycle */
  EE_oo_counter_object_RAM[ObjectID].used = 1U;
     912:	ee 24       	eor	r14, r14
     914:	e3 94       	inc	r14
  for ( t = 0U; t < n; t++ ) {
     916:	0f 15       	cp	r16, r15
     918:	60 f7       	brcc	.-40     	; 0x8f2 <EE_oo_StartOS+0x24>
    EE_TYPEALARM alarm_temp = compute_alarm_id(
     91a:	88 81       	ld	r24, Y
     91c:	99 81       	ldd	r25, Y+1	; 0x01
static EE_TYPEALARM compute_alarm_id(const EE_TYPEALARM alarm_id_vec[],
  EE_UREG t)
{
  EE_TYPEALARM res = (EE_TYPEALARM)EE_NIL;

  if ( alarm_id_vec != NULL ) {
     91e:	00 97       	sbiw	r24, 0x00	; 0
     920:	29 f0       	breq	.+10     	; 0x92c <__stack+0x2d>
    res = alarm_id_vec[t];
     922:	fc 01       	movw	r30, r24
     924:	e0 0f       	add	r30, r16
     926:	f1 1f       	adc	r31, r17
     928:	80 81       	ld	r24, Z
     92a:	01 c0       	rjmp	.+2      	; 0x92e <__stack+0x2f>
 * a check on alarm_id_vec has been added
 */
static EE_TYPEALARM compute_alarm_id(const EE_TYPEALARM alarm_id_vec[],
  EE_UREG t)
{
  EE_TYPEALARM res = (EE_TYPEALARM)EE_NIL;
     92c:	8f ef       	ldi	r24, 0xFF	; 255
  register EE_UREG n, t;
  n = EE_oo_autostart_alarm_data[Mode].n;
  for ( t = 0U; t < n; t++ ) {
    EE_TYPEALARM alarm_temp = compute_alarm_id(
      EE_oo_autostart_alarm_data[Mode].alarm, t);
    EE_oo_handle_rel_counter_object_insertion(alarm_temp,
     92e:	e8 2f       	mov	r30, r24
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	df 01       	movw	r26, r30
     934:	a8 5d       	subi	r26, 0xD8	; 216
     936:	be 4f       	sbci	r27, 0xFE	; 254
     938:	9c 91       	ld	r25, X
     93a:	df 01       	movw	r26, r30
     93c:	a5 5d       	subi	r26, 0xD5	; 213
     93e:	be 4f       	sbci	r27, 0xFE	; 254
     940:	6c 91       	ld	r22, X
     942:	ee 0f       	add	r30, r30
     944:	ff 1f       	adc	r31, r31
     946:	ee 0f       	add	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	e1 58       	subi	r30, 0x81	; 129
     94c:	fc 4f       	sbci	r31, 0xFC	; 252
     94e:	e0 82       	st	Z, r14
  EE_oo_counter_object_RAM[ObjectID].cycle = cycle;
     950:	91 83       	std	Z+1, r25	; 0x01

  /* then, insert the task into the delta queue with an increment equal
     (increment - 1U) increment equal to 0 means next tick */
  EE_oo_counter_object_insert(ObjectID, (increment - 1U));
     952:	61 50       	subi	r22, 0x01	; 1
     954:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <EE_oo_counter_object_insert>
     958:	0f 5f       	subi	r16, 0xFF	; 255
     95a:	1f 4f       	sbci	r17, 0xFF	; 255
     95c:	dc cf       	rjmp	.-72     	; 0x916 <__stack+0x17>
          This code is optimized for this case, but for code readability we
          could have been used EE_oo_preemption_point too. */
      rq = EE_rq_queryfirst();
      if ( rq != EE_NIL ) {
        /* Get the internal resource */
        EE_sys_ceiling |= EE_th_dispatch_prio[rq];
     95e:	99 27       	eor	r25, r25
     960:	87 fd       	sbrc	r24, 7
     962:	90 95       	com	r25
     964:	fc 01       	movw	r30, r24
     966:	e2 5a       	subi	r30, 0xA2	; 162
     968:	fe 4f       	sbci	r31, 0xFE	; 254
     96a:	20 91 b7 02 	lds	r18, 0x02B7
     96e:	30 81       	ld	r19, Z
     970:	23 2b       	or	r18, r19
     972:	20 93 b7 02 	sts	0x02B7, r18
        /* Put the task in running state */
        EE_th_status[rq] = RUNNING;
     976:	fc 01       	movw	r30, r24
     978:	e1 5e       	subi	r30, 0xE1	; 225
     97a:	fe 4f       	sbci	r31, 0xFE	; 254
     97c:	10 82       	st	Z, r1
          the stack... (we do not have to check the was stacked field)
          So the code is equal for basic and extended task
          (all classes: BCC1, BCC2, ECC1, ECC2 are equal here)
          Look at EE_oo_run_next_task in ee_internal.h to see the usual
          differences. */
        EE_hal_ready2stacked(EE_rq2stk_exchange());
     97e:	0e 94 19 07 	call	0xe32	; 0xe32 <EE_rq2stk_exchange>
#define EE_std_need_context_change(tid) ((tid) >= 0)

__INLINE__ void __ALWAYS_INLINE__ EE_std_change_context(EE_TID tid)
{
    do {
        tid = EE_std_run_task_code(tid);
     982:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EE_std_run_task_code>
    } while (EE_std_need_context_change(tid));
     986:	87 ff       	sbrs	r24, 7
     988:	fc cf       	rjmp	.-8      	; 0x982 <__stack+0x83>
/*
 * Enable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_enableIRQ(void)
{
  sei();
     98a:	78 94       	sei
  register  AppModeType mode_to_check = DONOTCARE;
#endif /* __MSRP__ && !EE_AS_MULTICORE_NO_SYNC */
  /* Ready Queue Head Index */
  register EE_TID     rq;
  /* Error Value */
  register StatusType ev = E_OK;
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	04 c0       	rjmp	.+8      	; 0x998 <__stack+0x99>
/*
 * Supend interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_avr8_suspendIRQ()
{
  register EE_FREG sr = SREG;
     990:	8f b7       	in	r24, 0x3f	; 63
/*
 * Disable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_disableIRQ(void)
{
  cli();
     992:	f8 94       	cli
 * Resume interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_resumeIRQ(EE_FREG sr)
{
  EE_barrier();
  SREG = sr;
     994:	8f bf       	out	0x3f, r24	; 63

  EE_ORTI_set_service_in(EE_SERVICETRACE_STARTOS);

  /* Check if this is the first time that I call StartOS */
  if ( EE_oo_started != 0U ) {
    ev = E_OS_STATE;
     996:	87 e0       	ldi	r24, 0x07	; 7
    EE_ORTI_set_service_out(EE_SERVICETRACE_STARTOS);
    EE_hal_end_nested_primitive(flag);
  }

  return ev;
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	08 95       	ret

000009a6 <EE_rq_queryfirst>:
    x = EE_rq_lookup[EE_rq_bitmask];
  } else {
    x += (EE_INT8)8;
  }
#else
  x = EE_rq_lookup[EE_rq_bitmask];
     9a6:	e0 91 b6 02 	lds	r30, 0x02B6
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	ef 55       	subi	r30, 0x5F	; 95
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	e0 81       	ld	r30, Z
#endif

  /* now x contains the highest priority non-empty queue number */
  if (x == (EE_INT8)-1) {
     9b2:	ef 3f       	cpi	r30, 0xFF	; 255
     9b4:	69 f0       	breq	.+26     	; 0x9d0 <EE_rq_queryfirst+0x2a>
    return EE_NIL;
  } else {
    return EE_rq_pairs_tid[EE_rq_queues_head[x]];
     9b6:	ff 27       	eor	r31, r31
     9b8:	e7 fd       	sbrc	r30, 7
     9ba:	f0 95       	com	r31
     9bc:	ed 5e       	subi	r30, 0xED	; 237
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	e0 81       	ld	r30, Z
     9c2:	ff 27       	eor	r31, r31
     9c4:	e7 fd       	sbrc	r30, 7
     9c6:	f0 95       	com	r31
     9c8:	e0 59       	subi	r30, 0x90	; 144
     9ca:	fc 4f       	sbci	r31, 0xFC	; 252
     9cc:	80 81       	ld	r24, Z
     9ce:	08 95       	ret
  x = EE_rq_lookup[EE_rq_bitmask];
#endif

  /* now x contains the highest priority non-empty queue number */
  if (x == (EE_INT8)-1) {
    return EE_NIL;
     9d0:	8f ef       	ldi	r24, 0xFF	; 255
  } else {
    return EE_rq_pairs_tid[EE_rq_queues_head[x]];
  }
}
     9d2:	08 95       	ret

000009d4 <EE_oo_counter_object_insert>:
   utilize all values from zero to counter.maxallowedvalue range */
void EE_oo_counter_object_insert( CounterObjectType ObjectID,
  TickType increment )
{
  register CounterObjectType  current, previous;
  register CounterType        c = EE_oo_counter_object_ROM[ObjectID].c;
     9d4:	44 e0       	ldi	r20, 0x04	; 4
     9d6:	84 9f       	mul	r24, r20
     9d8:	90 01       	movw	r18, r0
     9da:	11 24       	eor	r1, r1
     9dc:	f9 01       	movw	r30, r18
     9de:	e7 5b       	subi	r30, 0xB7	; 183
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254

#ifdef __OO_ORTI_ALARMTIME__
  EE_ORTI_alarmtime[ObjectID] = increment + 1U + EE_counter_RAM[c].value;
#endif /* __OO_ORTI_ALARMTIME__ */

  current = EE_counter_RAM[c].first;
     9e2:	e0 81       	ld	r30, Z
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	ef 5f       	subi	r30, 0xFF	; 255
     9ec:	fe 4f       	sbci	r31, 0xFE	; 254
     9ee:	90 81       	ld	r25, Z

  if ( current == INVALID_COUNTER_OBJECT ) {
     9f0:	9f 3f       	cpi	r25, 0xFF	; 255
     9f2:	11 f4       	brne	.+4      	; 0x9f8 <EE_oo_counter_object_insert+0x24>
    /* The alarm becomes the first into the delta queue, because the queue was
       empty */
    EE_counter_RAM[c].first = ObjectID;
     9f4:	80 83       	st	Z, r24
     9f6:	2d c0       	rjmp	.+90     	; 0xa52 <EE_oo_counter_object_insert+0x7e>
  } else if ( EE_oo_counter_object_RAM[current].delta > increment ) {
     9f8:	74 e0       	ldi	r23, 0x04	; 4
     9fa:	97 9f       	mul	r25, r23
     9fc:	d0 01       	movw	r26, r0
     9fe:	11 24       	eor	r1, r1
     a00:	a1 58       	subi	r26, 0x81	; 129
     a02:	bc 4f       	sbci	r27, 0xFC	; 252
     a04:	12 96       	adiw	r26, 0x02	; 2
     a06:	4c 91       	ld	r20, X
     a08:	12 97       	sbiw	r26, 0x02	; 2
     a0a:	64 17       	cp	r22, r20
     a0c:	28 f4       	brcc	.+10     	; 0xa18 <EE_oo_counter_object_insert+0x44>
    /* The alarm becomes the first into the delta queue, because increment is
       less than previous delta */
    EE_counter_RAM[c].first = ObjectID;
     a0e:	80 83       	st	Z, r24
    EE_oo_counter_object_RAM[current].delta -= increment;
     a10:	46 1b       	sub	r20, r22
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	4c 93       	st	X, r20
     a16:	1d c0       	rjmp	.+58     	; 0xa52 <EE_oo_counter_object_insert+0x7e>
  } else {
    /* The alarm is not the first into the delta queue */

    /* Follow the delta chain until I reach the right place */
    do {
      increment -= EE_oo_counter_object_RAM[current].delta;
     a18:	74 e0       	ldi	r23, 0x04	; 4
     a1a:	97 9f       	mul	r25, r23
     a1c:	a0 01       	movw	r20, r0
     a1e:	11 24       	eor	r1, r1
     a20:	fa 01       	movw	r30, r20
     a22:	e1 58       	subi	r30, 0x81	; 129
     a24:	fc 4f       	sbci	r31, 0xFC	; 252
     a26:	92 81       	ldd	r25, Z+2	; 0x02
     a28:	69 1b       	sub	r22, r25
      previous = current;
      current = EE_oo_counter_object_RAM[current].next;
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
    } while( (current != INVALID_COUNTER_OBJECT) &&
             (EE_oo_counter_object_RAM[current].delta <= increment) );
     a2c:	9f 3f       	cpi	r25, 0xFF	; 255
     a2e:	69 f0       	breq	.+26     	; 0xa4a <EE_oo_counter_object_insert+0x76>
     a30:	74 e0       	ldi	r23, 0x04	; 4
     a32:	97 9f       	mul	r25, r23
     a34:	f0 01       	movw	r30, r0
     a36:	11 24       	eor	r1, r1
     a38:	e1 58       	subi	r30, 0x81	; 129
     a3a:	fc 4f       	sbci	r31, 0xFC	; 252
     a3c:	df 01       	movw	r26, r30
     a3e:	12 96       	adiw	r26, 0x02	; 2
     a40:	72 81       	ldd	r23, Z+2	; 0x02
    /* Follow the delta chain until I reach the right place */
    do {
      increment -= EE_oo_counter_object_RAM[current].delta;
      previous = current;
      current = EE_oo_counter_object_RAM[current].next;
    } while( (current != INVALID_COUNTER_OBJECT) &&
     a42:	67 17       	cp	r22, r23
     a44:	48 f7       	brcc	.-46     	; 0xa18 <EE_oo_counter_object_insert+0x44>
             (EE_oo_counter_object_RAM[current].delta <= increment) );

    /* Insert the alarm between previous and current */
    if ( current != INVALID_COUNTER_OBJECT ) {
      EE_oo_counter_object_RAM[current].delta -= increment;
     a46:	76 1b       	sub	r23, r22
     a48:	7c 93       	st	X, r23
    }
    EE_oo_counter_object_RAM[previous].next = ObjectID;
     a4a:	fa 01       	movw	r30, r20
     a4c:	e1 58       	subi	r30, 0x81	; 129
     a4e:	fc 4f       	sbci	r31, 0xFC	; 252
     a50:	83 83       	std	Z+3, r24	; 0x03
  }

  EE_oo_counter_object_RAM[ObjectID].delta = increment;
     a52:	f9 01       	movw	r30, r18
     a54:	e1 58       	subi	r30, 0x81	; 129
     a56:	fc 4f       	sbci	r31, 0xFC	; 252
     a58:	62 83       	std	Z+2, r22	; 0x02
  EE_oo_counter_object_RAM[ObjectID].next = current;
     a5a:	93 83       	std	Z+3, r25	; 0x03
     a5c:	08 95       	ret

00000a5e <EE_oo_IncrementCounterImplementation>:
}
#endif /* EE_MAX_SCHEDULETABLE > 0 */
#endif /* EE_AS_SCHEDULETABLES__ */

void EE_oo_IncrementCounterImplementation(CounterType CounterID)
{
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
  /* to_fire: Is the head of the splitted queue that have to be served at this
              counter tick. */
  register CounterObjectType to_fire = EE_counter_RAM[CounterID].first;
     a68:	a8 2f       	mov	r26, r24
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	9d 01       	movw	r18, r26
     a6e:	22 0f       	add	r18, r18
     a70:	33 1f       	adc	r19, r19
     a72:	f9 01       	movw	r30, r18
     a74:	ef 5f       	subi	r30, 0xFF	; 255
     a76:	fe 4f       	sbci	r31, 0xFE	; 254
     a78:	10 81       	ld	r17, Z

  /* Increment the counter value or reset it when overcome maxallowedvalue.
     I need this behaviour for AS services GetCounterValue and GetElapsedValue
   */
  EE_counter_RAM[CounterID].value += 1U;
     a7a:	f9 01       	movw	r30, r18
     a7c:	e0 50       	subi	r30, 0x00	; 0
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	80 81       	ld	r24, Z
     a82:	8f 5f       	subi	r24, 0xFF	; 255
     a84:	80 83       	st	Z, r24
  if (EE_counter_RAM[CounterID].value >
      EE_counter_ROM[CounterID].maxallowedvalue)
     a86:	a2 0f       	add	r26, r18
     a88:	b3 1f       	adc	r27, r19
     a8a:	a8 5a       	subi	r26, 0xA8	; 168
     a8c:	be 4f       	sbci	r27, 0xFE	; 254

  /* Increment the counter value or reset it when overcome maxallowedvalue.
     I need this behaviour for AS services GetCounterValue and GetElapsedValue
   */
  EE_counter_RAM[CounterID].value += 1U;
  if (EE_counter_RAM[CounterID].value >
     a8e:	9c 91       	ld	r25, X
     a90:	98 17       	cp	r25, r24
     a92:	08 f4       	brcc	.+2      	; 0xa96 <EE_oo_IncrementCounterImplementation+0x38>
      EE_counter_ROM[CounterID].maxallowedvalue)
  {
    EE_counter_RAM[CounterID].value = 0U;
     a94:	10 82       	st	Z, r1
  /* I split Alarm queue in two: The queue that SHALL be handled at this tick
     and the remainder.
     current & previous are double indexes used to split the alarm queue.
   */
  /* If the alarm queue is empty I have to do nothing */
  if ( to_fire != INVALID_COUNTER_OBJECT ) {
     a96:	1f 3f       	cpi	r17, 0xFF	; 255
     a98:	09 f4       	brne	.+2      	; 0xa9c <EE_oo_IncrementCounterImplementation+0x3e>
     a9a:	80 c0       	rjmp	.+256    	; 0xb9c <EE_oo_IncrementCounterImplementation+0x13e>
    /* If the head of alarm queue has not delta equal to zero I have only
       to decrement the first alarm delta    */
    if (EE_oo_counter_object_RAM[to_fire].delta == 0U) {
     a9c:	44 e0       	ldi	r20, 0x04	; 4
     a9e:	14 9f       	mul	r17, r20
     aa0:	f0 01       	movw	r30, r0
     aa2:	11 24       	eor	r1, r1
     aa4:	e1 58       	subi	r30, 0x81	; 129
     aa6:	fc 4f       	sbci	r31, 0xFC	; 252
     aa8:	82 81       	ldd	r24, Z+2	; 0x02
     aaa:	81 11       	cpse	r24, r1
     aac:	75 c0       	rjmp	.+234    	; 0xb98 <EE_oo_IncrementCounterImplementation+0x13a>
     aae:	e1 2f       	mov	r30, r17
      register CounterObjectType previous;

      do {
        /* Now I will use previous to hold the previous checked alarm */
        previous = current;
        current = EE_oo_counter_object_RAM[current].next;
     ab0:	44 e0       	ldi	r20, 0x04	; 4
     ab2:	e4 9f       	mul	r30, r20
     ab4:	c0 01       	movw	r24, r0
     ab6:	11 24       	eor	r1, r1
     ab8:	fc 01       	movw	r30, r24
     aba:	e1 58       	subi	r30, 0x81	; 129
     abc:	fc 4f       	sbci	r31, 0xFC	; 252
     abe:	e3 81       	ldd	r30, Z+3	; 0x03
      } while ( (current != INVALID_COUNTER_OBJECT) &&
          (EE_oo_counter_object_RAM[current].delta == 0U) );
     ac0:	ef 3f       	cpi	r30, 0xFF	; 255
     ac2:	51 f0       	breq	.+20     	; 0xad8 <EE_oo_IncrementCounterImplementation+0x7a>
     ac4:	44 e0       	ldi	r20, 0x04	; 4
     ac6:	e4 9f       	mul	r30, r20
     ac8:	d0 01       	movw	r26, r0
     aca:	11 24       	eor	r1, r1
     acc:	a1 58       	subi	r26, 0x81	; 129
     ace:	bc 4f       	sbci	r27, 0xFC	; 252

      do {
        /* Now I will use previous to hold the previous checked alarm */
        previous = current;
        current = EE_oo_counter_object_RAM[current].next;
      } while ( (current != INVALID_COUNTER_OBJECT) &&
     ad0:	12 96       	adiw	r26, 0x02	; 2
     ad2:	4c 91       	ld	r20, X
     ad4:	44 23       	and	r20, r20
     ad6:	61 f3       	breq	.-40     	; 0xab0 <EE_oo_IncrementCounterImplementation+0x52>
          (EE_oo_counter_object_RAM[current].delta == 0U) );

      /* I set the end of handled queue */
      EE_oo_counter_object_RAM[previous].next = INVALID_COUNTER_OBJECT;
     ad8:	dc 01       	movw	r26, r24
     ada:	a1 58       	subi	r26, 0x81	; 129
     adc:	bc 4f       	sbci	r27, 0xFC	; 252
     ade:	4f ef       	ldi	r20, 0xFF	; 255
     ae0:	13 96       	adiw	r26, 0x03	; 3
     ae2:	4c 93       	st	X, r20

      /* I set the head of the alarm queue to the current value (maybe -1) */
      EE_counter_RAM[CounterID].first = current;
     ae4:	d9 01       	movw	r26, r18
     ae6:	af 5f       	subi	r26, 0xFF	; 255
     ae8:	be 4f       	sbci	r27, 0xFE	; 254
     aea:	ec 93       	st	X, r30

      /* If not empty I decrement the first alarm delta in queue */
      if ( current != INVALID_COUNTER_OBJECT ) {
     aec:	ef 3f       	cpi	r30, 0xFF	; 255
     aee:	49 f0       	breq	.+18     	; 0xb02 <EE_oo_IncrementCounterImplementation+0xa4>
        --EE_oo_counter_object_RAM[current].delta;
     af0:	84 e0       	ldi	r24, 0x04	; 4
     af2:	e8 9f       	mul	r30, r24
     af4:	f0 01       	movw	r30, r0
     af6:	11 24       	eor	r1, r1
     af8:	e1 58       	subi	r30, 0x81	; 129
     afa:	fc 4f       	sbci	r31, 0xFC	; 252
     afc:	82 81       	ldd	r24, Z+2	; 0x02
     afe:	81 50       	subi	r24, 0x01	; 1
     b00:	82 83       	std	Z+2, r24	; 0x02
      do {
        /* Select which handler call */
        switch ( EE_oo_counter_object_ROM[to_fire].kind ) {
#if defined(EE_MAX_ALARM) && (EE_MAX_ALARM > 0U)
          case EE_ALARM:
            EE_oo_handle_action(&EE_oo_action_ROM[EE_alarm_ROM[
     b02:	06 e0       	ldi	r16, 0x06	; 6
    running. in that case we have to check and queue it anyway
  */
__INLINE__ void __ALWAYS_INLINE__ EE_oo_set_th_status_ready(TaskType TaskID)
{
    if (EE_th_status[TaskID] == SUSPENDED) {
        EE_th_status[TaskID] = READY;
     b04:	22 e0       	ldi	r18, 0x02	; 2
     b06:	f2 2e       	mov	r15, r18
      }

      /* Handle the alarm queue active at this tick */
      do {
        /* Select which handler call */
        switch ( EE_oo_counter_object_ROM[to_fire].kind ) {
     b08:	44 e0       	ldi	r20, 0x04	; 4
     b0a:	14 9f       	mul	r17, r20
     b0c:	e0 01       	movw	r28, r0
     b0e:	11 24       	eor	r1, r1
     b10:	fe 01       	movw	r30, r28
     b12:	e7 5b       	subi	r30, 0xB7	; 183
     b14:	fe 4f       	sbci	r31, 0xFE	; 254
     b16:	82 81       	ldd	r24, Z+2	; 0x02
     b18:	93 81       	ldd	r25, Z+3	; 0x03
     b1a:	89 2b       	or	r24, r25
     b1c:	61 f5       	brne	.+88     	; 0xb76 <EE_oo_IncrementCounterImplementation+0x118>
#if defined(EE_MAX_ALARM) && (EE_MAX_ALARM > 0U)
          case EE_ALARM:
            EE_oo_handle_action(&EE_oo_action_ROM[EE_alarm_ROM[
              EE_oo_counter_object_ROM[to_fire].spec_id].action_id]);
     b1e:	a1 81       	ldd	r26, Z+1	; 0x01
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	ab 5a       	subi	r26, 0xAB	; 171
     b24:	be 4f       	sbci	r27, 0xFE	; 254
      do {
        /* Select which handler call */
        switch ( EE_oo_counter_object_ROM[to_fire].kind ) {
#if defined(EE_MAX_ALARM) && (EE_MAX_ALARM > 0U)
          case EE_ALARM:
            EE_oo_handle_action(&EE_oo_action_ROM[EE_alarm_ROM[
     b26:	ec 91       	ld	r30, X
     b28:	0e 9f       	mul	r16, r30
     b2a:	f0 01       	movw	r30, r0
     b2c:	11 24       	eor	r1, r1
     b2e:	e9 5c       	subi	r30, 0xC9	; 201
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
}
#endif /* EE_AS_OSAPPLICATIONS__ && EE_SERVICE_PROTECTION__ */

static void EE_oo_handle_action(EE_oo_action_ROM_type const * const p_action)
{
  if ( p_action != NULL ) {
     b32:	30 97       	sbiw	r30, 0x00	; 0
     b34:	01 f1       	breq	.+64     	; 0xb76 <EE_oo_IncrementCounterImplementation+0x118>

    switch ( p_action->action_kind ) {
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	39 f0       	breq	.+14     	; 0xb4c <EE_oo_IncrementCounterImplementation+0xee>
     b3e:	03 97       	sbiw	r24, 0x03	; 3
     b40:	d1 f4       	brne	.+52     	; 0xb76 <EE_oo_IncrementCounterImplementation+0x118>
}
#else /* EE_AS_OSAPPLICATIONS__ && EE_SERVICE_PROTECTION__ */
static void EE_oo_handle_action_callback ( const EE_oo_action_ROM_type *
  const p_action ) {
  if ( p_action != NULL ) {
    (p_action->f)();
     b42:	03 80       	ldd	r0, Z+3	; 0x03
     b44:	f4 81       	ldd	r31, Z+4	; 0x04
     b46:	e0 2d       	mov	r30, r0
     b48:	09 95       	icall
     b4a:	15 c0       	rjmp	.+42     	; 0xb76 <EE_oo_IncrementCounterImplementation+0x118>
/* Activate the task; NOTE: no pre-emption at all...
   This code was directly copied from ActivateTask */
  register TaskType TaskID = 0;

  if ( p_action != NULL ) {
    TaskID = p_action->TaskID;
     b4c:	82 81       	ldd	r24, Z+2	; 0x02
      /* XXX: This means a configuration Error it should never happens! */
    } else
#endif /* __OO_EXTENDED_STATUS__ */

    /* check for pending activations */
    if ( EE_th_rnact[TaskID] == 0U ) {
     b4e:	e8 2f       	mov	r30, r24
     b50:	ff 27       	eor	r31, r31
     b52:	e7 fd       	sbrc	r30, 7
     b54:	f0 95       	com	r31
     b56:	df 01       	movw	r26, r30
     b58:	a8 5f       	subi	r26, 0xF8	; 248
     b5a:	be 4f       	sbci	r27, 0xFE	; 254
     b5c:	9c 91       	ld	r25, X
     b5e:	99 23       	and	r25, r25
     b60:	51 f0       	breq	.+20     	; 0xb76 <EE_oo_IncrementCounterImplementation+0x118>
#endif /* defined(__OO_BCC2__) || defined(__OO_ECC2__) */

__INLINE__ void __ALWAYS_INLINE__ EE_oo_task_in_ready_queue( TaskType tid )
{
  /* Decrement the residual number activation */
  --EE_th_rnact[tid];
     b62:	91 50       	subi	r25, 0x01	; 1
     b64:	9c 93       	st	X, r25
    If the task is BCC2/ECC2 it can be that it is ready or 
    running. in that case we have to check and queue it anyway
  */
__INLINE__ void __ALWAYS_INLINE__ EE_oo_set_th_status_ready(TaskType TaskID)
{
    if (EE_th_status[TaskID] == SUSPENDED) {
     b66:	e1 5e       	subi	r30, 0xE1	; 225
     b68:	fe 4f       	sbci	r31, 0xFE	; 254
     b6a:	90 81       	ld	r25, Z
     b6c:	93 30       	cpi	r25, 0x03	; 3
     b6e:	09 f4       	brne	.+2      	; 0xb72 <EE_oo_IncrementCounterImplementation+0x114>
        EE_th_status[TaskID] = READY;
     b70:	f0 82       	st	Z, r15
  /* Decrement the residual number activation */
  --EE_th_rnact[tid];
  /* Set the status READY handling multiple activations */
  EE_oo_set_th_status_ready(tid);
  /* insert the task in the ready queue */
  EE_rq_insert(tid);
     b72:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <EE_rq_insert>
             break;
        }

        /* Save the actual alarm in previous and get the next to be executed */
        previous = to_fire;
        to_fire = EE_oo_counter_object_RAM[to_fire].next;
     b76:	fe 01       	movw	r30, r28
     b78:	e1 58       	subi	r30, 0x81	; 129
     b7a:	fc 4f       	sbci	r31, 0xFC	; 252
     b7c:	c3 81       	ldd	r28, Z+3	; 0x03

        /* The previous alarm is cyclic? */
        if (EE_oo_counter_object_RAM[previous].cycle > 0U) {
     b7e:	61 81       	ldd	r22, Z+1	; 0x01
     b80:	66 23       	and	r22, r22
     b82:	29 f0       	breq	.+10     	; 0xb8e <EE_oo_IncrementCounterImplementation+0x130>
          /* Enqueue it again */
          EE_oo_counter_object_insert(previous,
     b84:	61 50       	subi	r22, 0x01	; 1
     b86:	81 2f       	mov	r24, r17
     b88:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <EE_oo_counter_object_insert>
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <EE_oo_IncrementCounterImplementation+0x132>
            (EE_oo_counter_object_RAM[previous].cycle - 1U));
        } else {
          /* Counter Object no more used! */
          EE_oo_counter_object_RAM[previous].used = 0U;
     b8e:	10 82       	st	Z, r1
        }
      } while ( to_fire != INVALID_COUNTER_OBJECT );
     b90:	cf 3f       	cpi	r28, 0xFF	; 255
     b92:	21 f0       	breq	.+8      	; 0xb9c <EE_oo_IncrementCounterImplementation+0x13e>
             break;
        }

        /* Save the actual alarm in previous and get the next to be executed */
        previous = to_fire;
        to_fire = EE_oo_counter_object_RAM[to_fire].next;
     b94:	1c 2f       	mov	r17, r28
     b96:	b8 cf       	rjmp	.-144    	; 0xb08 <EE_oo_IncrementCounterImplementation+0xaa>
          EE_oo_counter_object_RAM[previous].used = 0U;
        }
      } while ( to_fire != INVALID_COUNTER_OBJECT );
    } else {
      /* I do not handle any alarm but I have to decrement the first delta */
      --EE_oo_counter_object_RAM[to_fire].delta;
     b98:	81 50       	subi	r24, 0x01	; 1
     b9a:	82 83       	std	Z+2, r24	; 0x02
    }
  }
}
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	08 95       	ret

00000ba8 <EE_oo_IncrementCounter>:
}

#ifndef __PRIVATE_INCREMENTCOUNTER__
/* [OS399]: IncrementCounter */
StatusType EE_oo_IncrementCounter(CounterType CounterID)
{
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
/*
 * Supend interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_avr8_suspendIRQ()
{
  register EE_FREG sr = SREG;
     bac:	df b7       	in	r29, 0x3f	; 63
/*
 * Disable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_disableIRQ(void)
{
  cli();
     bae:	f8 94       	cli
#endif /* EE_AS_OSAPPLICATIONS__ || E_SERVICE_PROTECTION__ ||
E_SERVICE_PROTECTION__ ||
__OO_EXTENDED_STATUS__ */
  {
    /* Call to function that actually increment the counter */
    EE_oo_IncrementCounterImplementation(CounterID);
     bb0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <EE_oo_IncrementCounterImplementation>

    /* After all counter updates check if I'm not in a ISR2 and then
       execute rescheduling. */
    if ( EE_hal_get_IRQ_nesting_level() == 0U ) {
     bb4:	80 91 d6 03 	lds	r24, 0x03D6
     bb8:	81 11       	cpse	r24, r1
     bba:	2c c0       	rjmp	.+88     	; 0xc14 <EE_oo_IncrementCounter+0x6c>
   we suppose that this function can be called ALSO at interrupt ENABLED!!!
   (see WaitEvent.c) */
#ifndef __PRIVATE_STK_QUERYFIRST__
__INLINE__ EE_TID __ALWAYS_INLINE__ EE_stk_queryfirst(void)
{
    return EE_stkfirst;  
     bbc:	c0 91 1b 01 	lds	r28, 0x011B
{
  register EE_TID current, rq;

  /* check if there is a preemption */
  current = EE_stk_queryfirst();
  rq      = EE_rq_queryfirst();
     bc0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <EE_rq_queryfirst>
        (EE_as_Application_ROM[EE_as_active_app].Mode == EE_MEMPROT_TRUST_MODE)
     )
#endif /* EE_SYSCALL_NR > EE_MAX_SYS_SERVICEID */
#endif /* EE_AS_OSAPPLICATIONS__ && __EE_MEMORY_PROTECTION__ */
  {
    if ( rq != EE_NIL ) {
     bc4:	8f 3f       	cpi	r24, 0xFF	; 255
     bc6:	31 f1       	breq	.+76     	; 0xc14 <EE_oo_IncrementCounter+0x6c>
      /* We check if the system ceiling is greater or not the first task
         in the ready queue */
      if ( EE_sys_ceiling < EE_th_ready_prio[rq] ) {
     bc8:	30 91 b7 02 	lds	r19, 0x02B7
     bcc:	99 27       	eor	r25, r25
     bce:	87 fd       	sbrc	r24, 7
     bd0:	90 95       	com	r25
     bd2:	dc 01       	movw	r26, r24
     bd4:	af 59       	subi	r26, 0x9F	; 159
     bd6:	be 4f       	sbci	r27, 0xFE	; 254
     bd8:	2c 91       	ld	r18, X
     bda:	32 17       	cp	r19, r18
     bdc:	d8 f4       	brcc	.+54     	; 0xc14 <EE_oo_IncrementCounter+0x6c>

        if ( current != EE_NIL ) {
     bde:	cf 3f       	cpi	r28, 0xFF	; 255
     be0:	41 f0       	breq	.+16     	; 0xbf2 <EE_oo_IncrementCounter+0x4a>
          EE_oo_call_PostTaskHook();
          /* We have to put the task in the READY status */
          EE_th_status[current] = READY;
     be2:	ec 2f       	mov	r30, r28
     be4:	ff 27       	eor	r31, r31
     be6:	e7 fd       	sbrc	r30, 7
     be8:	f0 95       	com	r31
     bea:	e1 5e       	subi	r30, 0xE1	; 225
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	22 e0       	ldi	r18, 0x02	; 2
     bf0:	20 83       	st	Z, r18
          /* !!! BUT NOT IN THE READY QUEUE !!!
             The task remains into the Stacked Queue! */
        }

        /* Get the new internal resource */
        EE_sys_ceiling |= EE_th_dispatch_prio[rq];
     bf2:	fc 01       	movw	r30, r24
     bf4:	e2 5a       	subi	r30, 0xA2	; 162
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	20 81       	ld	r18, Z
     bfa:	23 2b       	or	r18, r19
     bfc:	20 93 b7 02 	sts	0x02B7, r18
        /* Put the task in running state */
        EE_th_status[rq] = RUNNING;
     c00:	fc 01       	movw	r30, r24
     c02:	e1 5e       	subi	r30, 0xE1	; 225
     c04:	fe 4f       	sbci	r31, 0xFE	; 254
     c06:	10 82       	st	Z, r1
/* 
  This method actually do a CONTEXT SWITCH, with the highest priority TASK
*/
__INLINE__ void __ALWAYS_INLINE__ EE_oo_run_next_task(void)
{
    EE_hal_ready2stacked(EE_rq2stk_exchange());
     c08:	0e 94 19 07 	call	0xe32	; 0xe32 <EE_rq2stk_exchange>
#define EE_std_need_context_change(tid) ((tid) >= 0)

__INLINE__ void __ALWAYS_INLINE__ EE_std_change_context(EE_TID tid)
{
    do {
        tid = EE_std_run_task_code(tid);
     c0c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EE_std_run_task_code>
    } while (EE_std_need_context_change(tid));
     c10:	87 ff       	sbrs	r24, 7
     c12:	fc cf       	rjmp	.-8      	; 0xc0c <EE_oo_IncrementCounter+0x64>
 * Resume interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_resumeIRQ(EE_FREG sr)
{
  EE_barrier();
  SREG = sr;
     c14:	df bf       	out	0x3f, r29	; 63

  EE_ORTI_set_service_out(EE_SERVICETRACE_INCREMENTCOUNTER);
  EE_OS_EXIT_CRITICAL_SECTION();

  return ev;
}
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <DUMMY_vect>:
#include "cpu/avr8/inc/ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
EE_AVR8_ISR_NOT_DEFINED(DUMMY_vect)
     c1e:	f8 94       	cli
     c20:	ff cf       	rjmp	.-2      	; 0xc20 <DUMMY_vect+0x2>

00000c22 <EE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void EE_atmega_intvect(void) {
  EE_AVR8_REQUEST_IRQ_ENTRY(DUMMY_vect);
     c22:	ee e1       	ldi	r30, 0x1E	; 30
     c24:	08 95       	ret

00000c26 <__vector_7>:
  defined(__AVR_ATmega328P__)	|| \
  defined(__AVR_ATmega1281__)	   \
)
/* TIMER2_COMPA interrupt vector */
#if defined(EE_AVR8_TIMER2_COMPA_ISR) && (EE_AVR8_TIMER2_COMPA_ISR_CAT == 2)
EE_AVR8_ISR2_DEFINITION(TIMER2_COMPA_vect, EE_AVR8_TIMER2_COMPA_ISR)
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	0e 94 1c 06 	call	0xc38	; 0xc38 <EE_avr8_isr2_stub>
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	08 95       	ret

00000c38 <EE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void EE_COMPILER_KEEP EE_NAKED EE_avr8_isr2_stub(EE_VOID_CALLBACK f)
{

  EE_AVR8_ISR_PREINSTUB();
     c38:	1f 92       	push	r1
     c3a:	0f 92       	push	r0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	0f 92       	push	r0
     c40:	11 24       	eor	r1, r1
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	af 93       	push	r26
     c50:	bf 93       	push	r27
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
/*
 * Disable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_disableIRQ(void)
{
  cli();
     c56:	f8 94       	cli

  }
#endif	/* __IRQ_STACK_NEEDED__ */

  /* Increment nesting level here, with IRQ disabled */
  EE_increment_IRQ_nesting_level();
     c58:	20 91 d6 03 	lds	r18, 0x03D6
     c5c:	2f 5f       	subi	r18, 0xFF	; 255
     c5e:	20 93 d6 03 	sts	0x03D6, r18
/*
 * Enable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_enableIRQ(void)
{
  sei();
     c62:	78 94       	sei

  /* Enable IRQ if nesting is allowed */
  EE_std_enableIRQ_nested();

  /* Call The ISR User Handler */
  f();
     c64:	fc 01       	movw	r30, r24
     c66:	09 95       	icall
/*
 * Disable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_disableIRQ(void)
{
  cli();
     c68:	f8 94       	cli
    defined(__OO_ECC2__) || defined(__AS_SC4__)
/* Function to be called at the end of a function service interrupt, to execute
   clean-up specifiend in Autosar standard */
__INLINE__ void __ALWAYS_INLINE__ EE_std_end_IRQ_post_stub(void)
{
  EE_IRQ_end_post_stub();
     c6a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <EE_IRQ_end_post_stub>
   * EE_decrement_IRQ_nesting_level()
   */
  EE_std_end_IRQ_post_stub();

  /* Decrement nesting level here, with IRQ disabled */
  EE_decrement_IRQ_nesting_level();
     c6e:	80 91 d6 03 	lds	r24, 0x03D6
     c72:	81 50       	subi	r24, 0x01	; 1
     c74:	80 93 d6 03 	sts	0x03D6, r24
  /* Call the scheduler */
  EE_avr8_after_IRQ_schedule();
#endif	/* __ATXMEGA__ */

#ifdef	__ATMEGA__
  if ( !EE_is_inside_ISR_call() ) {
     c78:	88 23       	and	r24, r24
     c7a:	89 f0       	breq	.+34     	; 0xc9e <EE_avr8_isr2_stub+0x66>

  }

#endif	/* __ATMEGA__ */

  EE_AVR8_ISR_POSTINSTUB();
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	bf 91       	pop	r27
     c82:	af 91       	pop	r26
     c84:	7f 91       	pop	r23
     c86:	6f 91       	pop	r22
     c88:	5f 91       	pop	r21
     c8a:	4f 91       	pop	r20
     c8c:	3f 91       	pop	r19
     c8e:	2f 91       	pop	r18
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
/*
 * Enable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_enableIRQ(void)
{
  sei();
     c98:	78 94       	sei

  /* Enable IRQ */
  EE_hal_enableIRQ();

  EE_return();
     c9a:	08 95       	ret
     c9c:	0b c0       	rjmp	.+22     	; 0xcb4 <EE_std_run_task_code>
 * the scheduler and launch a new scheduled task (if any), or change the current
 * stack (if needed); return whenever there is nothing else to do.
 */
__INLINE__ void __ALWAYS_INLINE__ EE_std_after_IRQ_schedule(void)
{
    EE_IRQ_end_instance();
     c9e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <EE_IRQ_end_instance>
    if (EE_std_need_context_change(EE_std_endcycle_next_tid)) {
     ca2:	80 91 d7 03 	lds	r24, 0x03D7
     ca6:	87 fd       	sbrc	r24, 7
     ca8:	e9 cf       	rjmp	.-46     	; 0xc7c <EE_avr8_isr2_stub+0x44>
#define EE_std_need_context_change(tid) ((tid) >= 0)

__INLINE__ void __ALWAYS_INLINE__ EE_std_change_context(EE_TID tid)
{
    do {
        tid = EE_std_run_task_code(tid);
     caa:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EE_std_run_task_code>
    } while (EE_std_need_context_change(tid));
     cae:	87 ff       	sbrs	r24, 7
     cb0:	fc cf       	rjmp	.-8      	; 0xcaa <EE_avr8_isr2_stub+0x72>
     cb2:	e4 cf       	rjmp	.-56     	; 0xc7c <EE_avr8_isr2_stub+0x44>

00000cb4 <EE_std_run_task_code>:
     cb4:	78 94       	sei
{
    EE_hal_enableIRQ();
/* Call a the body of a task */
#if defined(__OO_BCC1__) || defined(__OO_BCC2__) || \
 defined(__OO_ECC1__) || defined(__OO_ECC2__)
    EE_oo_thread_stub();
     cb6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <EE_oo_thread_stub>
/*
 * Disable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_avr8_disableIRQ(void)
{
  cli();
     cba:	f8 94       	cli
    if ( EE_hal_thread_body[tid] != 0 ) {
        EE_hal_thread_body[tid]();
    }
#endif
    EE_hal_disableIRQ();
    EE_thread_end_instance(); /* Call the scheduler */
     cbc:	0e 94 63 06 	call	0xcc6	; 0xcc6 <EE_thread_end_instance>
    return EE_std_endcycle_next_tid;
}
     cc0:	80 91 d7 03 	lds	r24, 0x03D7
     cc4:	08 95       	ret

00000cc6 <EE_thread_end_instance>:
  /* Remember: after hal_endcycle_XXX there MUST be NOTHING!!! */
}
#endif /* __OO_ECC1__ || __OO_ECC2__ */

void EE_thread_end_instance(void)
{
     cc6:	cf 93       	push	r28
   we suppose that this function can be called ALSO at interrupt ENABLED!!!
   (see WaitEvent.c) */
#ifndef __PRIVATE_STK_QUERYFIRST__
__INLINE__ EE_TID __ALWAYS_INLINE__ EE_stk_queryfirst(void)
{
    return EE_stkfirst;  
     cc8:	40 91 1b 01 	lds	r20, 0x011B
      (SRS_Os_11008) */
  /* Reset ALL TP Budgets, just in case */
  EE_as_tp_active_reset_budgets();

  /* Reset ISRs counters */
  EE_oo_IRQ_disable_count = 0U;
     ccc:	10 92 d8 03 	sts	0x03D8, r1

  /* Increase the remaining activations...*/
  EE_th_rnact[current]++;
     cd0:	24 2f       	mov	r18, r20
     cd2:	33 27       	eor	r19, r19
     cd4:	27 fd       	sbrc	r18, 7
     cd6:	30 95       	com	r19
     cd8:	f9 01       	movw	r30, r18
     cda:	e8 5f       	subi	r30, 0xF8	; 248
     cdc:	fe 4f       	sbci	r31, 0xFE	; 254
     cde:	90 81       	ld	r25, Z
     ce0:	9f 5f       	subi	r25, 0xFF	; 255
     ce2:	90 83       	st	Z, r25

#ifndef __OO_NO_CHAINTASK__
  /* If we called a ChainTask, 
     EE_th_terminate_nextask[current] != NIL */
  TaskID = EE_th_terminate_nextask[current];
     ce4:	f9 01       	movw	r30, r18
     ce6:	ee 5f       	subi	r30, 0xFE	; 254
     ce8:	fe 4f       	sbci	r31, 0xFE	; 254
     cea:	80 81       	ld	r24, Z

#ifndef __PRIVATE_THREAD_END_INSTANCE__

#if defined(__OO_BCC2__) || defined(__OO_ECC2__)
static EE_BIT EE_thread_rnact_max(EE_TID current) {
  return (EE_th_rnact[current] == EE_th_rnact_max[current]) ? 1U : 0U;
     cec:	f9 01       	movw	r30, r18
     cee:	e5 5a       	subi	r30, 0xA5	; 165
     cf0:	fe 4f       	sbci	r31, 0xFE	; 254
     cf2:	50 81       	ld	r21, Z
     cf4:	f9 01       	movw	r30, r18
     cf6:	e1 5e       	subi	r30, 0xE1	; 225
     cf8:	fe 4f       	sbci	r31, 0xFE	; 254
     cfa:	95 13       	cpse	r25, r21
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <EE_thread_end_instance+0x3c>
   * instance. Note that status=READY and
   * rnact==maximum number of pending activations ==>> the task is
   * SUSPENDED!!! */
#if defined(__OO_BCC2__) || defined(__OO_ECC2__)
  if( (1U == EE_thread_rnact_max(current)) || (current == TaskID) ) {
    EE_th_status[current] = SUSPENDED;
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <EE_thread_end_instance+0x42>
  /* The task state switch from STACKED TO READY because it end its
   * instance. Note that status=READY and
   * rnact==maximum number of pending activations ==>> the task is
   * SUSPENDED!!! */
#if defined(__OO_BCC2__) || defined(__OO_ECC2__)
  if( (1U == EE_thread_rnact_max(current)) || (current == TaskID) ) {
     d02:	48 17       	cp	r20, r24
     d04:	e1 f3       	breq	.-8      	; 0xcfe <EE_thread_end_instance+0x38>
    EE_th_status[current] = SUSPENDED;
  } else {   
    EE_th_status[current] = READY;
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	90 83       	st	Z, r25
#else /* __OO_BCC2__ || __OO_ECC2__ */
  EE_th_status[current] = SUSPENDED;
#endif /* __OO_BCC2__ || __OO_ECC2__ */

  /* Reset the thread priority bit in the system_ceiling */
  EE_sys_ceiling &= ~EE_th_dispatch_prio[current];
     d0a:	f9 01       	movw	r30, r18
     d0c:	e2 5a       	subi	r30, 0xA2	; 162
     d0e:	fe 4f       	sbci	r31, 0xFE	; 254
     d10:	40 81       	ld	r20, Z
     d12:	40 95       	com	r20
     d14:	90 91 b7 02 	lds	r25, 0x02B7
     d18:	94 23       	and	r25, r20
     d1a:	90 93 b7 02 	sts	0x02B7, r25

/* Extract the RUNNING task from the stack, and return the new head */
#ifndef __PRIVATE_STK_GETFIRST__
__INLINE__ EE_TID __ALWAYS_INLINE__ EE_stk_getfirst(void)
{
  return (EE_stkfirst = EE_th_next[EE_stkfirst]);
     d1e:	f9 01       	movw	r30, r18
     d20:	e4 5e       	subi	r30, 0xE4	; 228
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	c0 81       	ld	r28, Z
     d26:	c0 93 1b 01 	sts	0x011B, r28
  current = EE_stk_getfirst();

#ifndef __OO_NO_CHAINTASK__
  /* If we called a ChainTask, 
     EE_th_terminate_nextask[current] != NIL */
  if ( TaskID != EE_NIL ) {
     d2a:	8f 3f       	cpi	r24, 0xFF	; 255
     d2c:	69 f0       	breq	.+26     	; 0xd48 <EE_thread_end_instance+0x82>
    If the task is BCC2/ECC2 it can be that it is ready or 
    running. in that case we have to check and queue it anyway
  */
__INLINE__ void __ALWAYS_INLINE__ EE_oo_set_th_status_ready(TaskType TaskID)
{
    if (EE_th_status[TaskID] == SUSPENDED) {
     d2e:	e8 2f       	mov	r30, r24
     d30:	ff 27       	eor	r31, r31
     d32:	e7 fd       	sbrc	r30, 7
     d34:	f0 95       	com	r31
     d36:	e1 5e       	subi	r30, 0xE1	; 225
     d38:	fe 4f       	sbci	r31, 0xFE	; 254
     d3a:	90 81       	ld	r25, Z
     d3c:	93 30       	cpi	r25, 0x03	; 3
     d3e:	11 f4       	brne	.+4      	; 0xd44 <EE_thread_end_instance+0x7e>
        EE_th_status[TaskID] = READY;
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	90 83       	st	Z, r25
       - if the task is basic/BCC2 it can be that it is ready or 
         running. In that case we have to check and queue it anyway */
    EE_oo_set_th_status_ready(TaskID);

    /* insert the task in the ready queue */
    EE_rq_insert(TaskID);
     d44:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <EE_rq_insert>
  }
#endif /* __OO_NO_CHAINTASK__ */

  /* Check if there is to schedule a ready thread or pop a preempted thread */
  rqfirst = EE_rq_queryfirst();
     d48:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <EE_rq_queryfirst>
  if ( rqfirst == EE_NIL ) {
     d4c:	8f 3f       	cpi	r24, 0xFF	; 255
     d4e:	59 f4       	brne	.+22     	; 0xd66 <EE_thread_end_instance+0xa0>
    /* No threads in the ready queue, return to the preempted TASK
      (maybe Idle) */
    if ( current != EE_NIL ) {
     d50:	cf 3f       	cpi	r28, 0xFF	; 255
     d52:	39 f0       	breq	.+14     	; 0xd62 <EE_thread_end_instance+0x9c>
      EE_th_status[current] = RUNNING;
     d54:	ec 2f       	mov	r30, r28
     d56:	ff 27       	eor	r31, r31
     d58:	e7 fd       	sbrc	r30, 7
     d5a:	f0 95       	com	r31
     d5c:	e1 5e       	subi	r30, 0xE1	; 225
     d5e:	fe 4f       	sbci	r31, 0xFE	; 254
     d60:	10 82       	st	Z, r1
}
#else
#define EE_hal_endcycle_stacked(x) EE_hal_endcycle_stacked_impl()
__INLINE__ void __ALWAYS_INLINE__ EE_hal_endcycle_stacked_impl(void)
{
    EE_std_endcycle_next_tid = ((EE_TID)-1);
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	18 c0       	rjmp	.+48     	; 0xd96 <EE_thread_end_instance+0xd0>
      /* We are switching back to the Idle loop */
      EE_as_set_execution_context( Idle_Context );
      EE_as_tp_active_start_idle();
    }
    EE_hal_endcycle_stacked(current);
  } else if ( EE_sys_ceiling >= EE_th_ready_prio[rqfirst] ) {
     d66:	20 91 b7 02 	lds	r18, 0x02B7
     d6a:	99 27       	eor	r25, r25
     d6c:	87 fd       	sbrc	r24, 7
     d6e:	90 95       	com	r25
     d70:	dc 01       	movw	r26, r24
     d72:	af 59       	subi	r26, 0x9F	; 159
     d74:	be 4f       	sbci	r27, 0xFE	; 254
     d76:	3c 91       	ld	r19, X
     d78:	23 17       	cp	r18, r19
     d7a:	60 f7       	brcc	.-40     	; 0xd54 <EE_thread_end_instance+0x8e>
    EE_as_tp_active_set_from_TASK(current);
    /* Prepare to Context SWITCH, It doesn't do the switch by it self. */
    EE_hal_endcycle_stacked(current);
  } else {
    /* We have to schedule a ready thread */
    EE_th_status[rqfirst] = RUNNING;
     d7c:	fc 01       	movw	r30, r24
     d7e:	e1 5e       	subi	r30, 0xE1	; 225
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	10 82       	st	Z, r1
    EE_sys_ceiling |= EE_th_dispatch_prio[rqfirst];
     d84:	fc 01       	movw	r30, r24
     d86:	e2 5a       	subi	r30, 0xA2	; 162
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	80 81       	ld	r24, Z
     d8c:	82 2b       	or	r24, r18
     d8e:	80 93 b7 02 	sts	0x02B7, r24
  /* Remember: after hal_endcycle_XXX there MUST be NOTHING!!! */
}
#else /* __OO_ECC1__ || __OO_ECC2__ */
static void EE_thread_endcycle_next(void)
{
  EE_hal_endcycle_ready(EE_rq2stk_exchange());
     d92:	0e 94 19 07 	call	0xe32	; 0xe32 <EE_rq2stk_exchange>
}


__INLINE__ void __ALWAYS_INLINE__ EE_hal_endcycle_ready(EE_TID tid)
{
    EE_std_endcycle_next_tid = tid;
     d96:	80 93 d7 03 	sts	0x03D7, r24

    /* Prepare to Context SWITCH, It doesn't do the switch by it self. */
    EE_thread_endcycle_next();
  }
  /* Remember: after hal_endcycle_XXX there MUST be NOTHING!!! */
}
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <EE_IRQ_end_instance>:
*/
void EE_IRQ_end_instance( void )
{
  register EE_TID rqfirst, current;

  rqfirst = EE_rq_queryfirst();
     d9e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <EE_rq_queryfirst>
   we suppose that this function can be called ALSO at interrupt ENABLED!!!
   (see WaitEvent.c) */
#ifndef __PRIVATE_STK_QUERYFIRST__
__INLINE__ EE_TID __ALWAYS_INLINE__ EE_stk_queryfirst(void)
{
    return EE_stkfirst;  
     da2:	e0 91 1b 01 	lds	r30, 0x011B
  current = EE_stk_queryfirst();

  if ( (rqfirst != EE_NIL) && (EE_sys_ceiling < EE_th_ready_prio[rqfirst]) ) {
     da6:	8f 3f       	cpi	r24, 0xFF	; 255
     da8:	11 f1       	breq	.+68     	; 0xdee <EE_IRQ_end_instance+0x50>
     daa:	20 91 b7 02 	lds	r18, 0x02B7
     dae:	99 27       	eor	r25, r25
     db0:	87 fd       	sbrc	r24, 7
     db2:	90 95       	com	r25
     db4:	dc 01       	movw	r26, r24
     db6:	af 59       	subi	r26, 0x9F	; 159
     db8:	be 4f       	sbci	r27, 0xFE	; 254
     dba:	3c 91       	ld	r19, X
     dbc:	23 17       	cp	r18, r19
     dbe:	b8 f4       	brcc	.+46     	; 0xdee <EE_IRQ_end_instance+0x50>
    /* We have to schedule a READY thread */

    if ( current != EE_NIL ) {
     dc0:	ef 3f       	cpi	r30, 0xFF	; 255
     dc2:	39 f0       	breq	.+14     	; 0xdd2 <EE_IRQ_end_instance+0x34>
      /* There is a post task hook only if a TASK that was RUNNING */
      EE_oo_call_PostTaskHook();
      /* The RUNNING TASK is now preempted-> READY status + still in stacked
         queue */
      EE_th_status[current] = READY;
     dc4:	ff 27       	eor	r31, r31
     dc6:	e7 fd       	sbrc	r30, 7
     dc8:	f0 95       	com	r31
     dca:	e1 5e       	subi	r30, 0xE1	; 225
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	32 e0       	ldi	r19, 0x02	; 2
     dd0:	30 83       	st	Z, r19
    }

    /* Another TASK is put into the RUNNING state */
    EE_th_status[rqfirst] = RUNNING;
     dd2:	fc 01       	movw	r30, r24
     dd4:	e1 5e       	subi	r30, 0xE1	; 225
     dd6:	fe 4f       	sbci	r31, 0xFE	; 254
     dd8:	10 82       	st	Z, r1

    EE_sys_ceiling |= EE_th_dispatch_prio[rqfirst];
     dda:	fc 01       	movw	r30, r24
     ddc:	e2 5a       	subi	r30, 0xA2	; 162
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	80 81       	ld	r24, Z
     de2:	82 2b       	or	r24, r18
     de4:	80 93 b7 02 	sts	0x02B7, r24
  }
}
#else /* __OO_ECC1__ || __OO_ECC2__ */
static void EE_IRQ_run_next_task( void )
{
  EE_hal_IRQ_ready(EE_rq2stk_exchange());
     de8:	0e 94 19 07 	call	0xe32	; 0xe32 <EE_rq2stk_exchange>
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <EE_IRQ_end_instance+0x52>
}
#else
#define EE_hal_endcycle_stacked(x) EE_hal_endcycle_stacked_impl()
__INLINE__ void __ALWAYS_INLINE__ EE_hal_endcycle_stacked_impl(void)
{
    EE_std_endcycle_next_tid = ((EE_TID)-1);
     dee:	8f ef       	ldi	r24, 0xFF	; 255
     df0:	80 93 d7 03 	sts	0x03D7, r24
     df4:	08 95       	ret

00000df6 <EE_IRQ_end_post_stub>:
      the Operating System shall perform the missing service and shall call
      the ErrorHook() (if configured) with the status E_OS_DISABLEDINT. */

  /* Only check and reset ISR flags an counters because ISR re-enabling is done
     in CPU layer */
  if ( EE_oo_check_disableint_error() )
     df6:	80 91 d8 03 	lds	r24, 0x03D8
     dfa:	81 11       	cpse	r24, r1
  {
    EE_ORTI_set_lasterror(E_OS_DISABLEDINT);
    EE_oo_notify_error_service(OSId_ISR2Body, E_OS_DISABLEDINT);
    /* Reset ISRs counter */
    EE_oo_IRQ_disable_count = 0U;
     dfc:	10 92 d8 03 	sts	0x03D8, r1
     e00:	08 95       	ret

00000e02 <EE_thread_not_terminated>:
     e02:	f8 94       	cli
     bit set to one.
     If i subtract one to this I obtain a bit mask with all
     ones before the starting one and all zeros after 
     (exactly what I want to release resources!)
  */
  EE_sys_ceiling &= (EE_th_dispatch_prio[tid] - 1U);
     e04:	80 91 1b 01 	lds	r24, 0x011B
     e08:	99 27       	eor	r25, r25
     e0a:	87 fd       	sbrc	r24, 7
     e0c:	90 95       	com	r25
     e0e:	fc 01       	movw	r30, r24
     e10:	e2 5a       	subi	r30, 0xA2	; 162
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	30 81       	ld	r19, Z
     e16:	31 50       	subi	r19, 0x01	; 1
     e18:	20 91 b7 02 	lds	r18, 0x02B7
     e1c:	23 23       	and	r18, r19
     e1e:	20 93 b7 02 	sts	0x02B7, r18
  );
}

__INLINE__ void __ALWAYS_INLINE__ EE_hal_terminate_task(EE_TID t)
{
  EE_avr8_terminate_task(&EE_terminate_data[t]);
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	8d 58       	subi	r24, 0x8D	; 141
     e2c:	9c 4f       	sbci	r25, 0xFC	; 252
     e2e:	0c 94 b2 00 	jmp	0x164	; 0x164 <EE_avr8_terminate_task>

00000e32 <EE_rq2stk_exchange>:
}
#endif

#if defined(__OO_BCC2__) || defined(__OO_ECC2__)
EE_TID EE_rq2stk_exchange(void)
{
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
    x = EE_rq_lookup[EE_rq_bitmask];
  } else {
    x += (EE_INT8)8;
  }
#else
  x = EE_rq_lookup[EE_rq_bitmask];
     e36:	40 91 b6 02 	lds	r20, 0x02B6
     e3a:	e4 2f       	mov	r30, r20
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	ef 55       	subi	r30, 0x5F	; 95
     e40:	fe 4f       	sbci	r31, 0xFE	; 254
#endif

  /* now x contains the highest priority non-empty queue number */

  /* get the TID to insert in the stacked queue */
  temp = EE_rq_pairs_tid[EE_rq_queues_head[x]];
     e42:	50 81       	ld	r21, Z
     e44:	25 2f       	mov	r18, r21
     e46:	33 27       	eor	r19, r19
     e48:	27 fd       	sbrc	r18, 7
     e4a:	30 95       	com	r19
     e4c:	d9 01       	movw	r26, r18
     e4e:	ad 5e       	subi	r26, 0xED	; 237
     e50:	be 4f       	sbci	r27, 0xFE	; 254
     e52:	6c 91       	ld	r22, X
     e54:	e6 2f       	mov	r30, r22
     e56:	ff 27       	eor	r31, r31
     e58:	e7 fd       	sbrc	r30, 7
     e5a:	f0 95       	com	r31
     e5c:	ef 01       	movw	r28, r30
     e5e:	c0 59       	subi	r28, 0x90	; 144
     e60:	dc 4f       	sbci	r29, 0xFC	; 252
     e62:	88 81       	ld	r24, Y

  /* free the descriptor */
  y = EE_rq_queues_head[x];
  EE_rq_queues_head[x] = EE_rq_pairs_next[EE_rq_queues_head[x]];
     e64:	eb 5f       	subi	r30, 0xFB	; 251
     e66:	fe 4f       	sbci	r31, 0xFE	; 254
     e68:	90 81       	ld	r25, Z
     e6a:	9c 93       	st	X, r25
  EE_rq_pairs_next[y] = EE_rq_free;
     e6c:	70 91 b2 02 	lds	r23, 0x02B2
     e70:	70 83       	st	Z, r23
  EE_rq_free = y;
     e72:	60 93 b2 02 	sts	0x02B2, r22
  
  if (EE_rq_queues_head[x] == (EE_SREG)-1) {
     e76:	9f 3f       	cpi	r25, 0xFF	; 255
     e78:	79 f4       	brne	.+30     	; 0xe98 <EE_rq2stk_exchange+0x66>
    EE_rq_queues_tail[x] = -1;
     e7a:	f9 01       	movw	r30, r18
     e7c:	e5 5f       	subi	r30, 0xF5	; 245
     e7e:	fe 4f       	sbci	r31, 0xFE	; 254
     e80:	90 83       	st	Z, r25
    /* reset the (x)th bit in the bitfield; casts are for MISRA compliance */
    EE_rq_bitmask &= (EE_TYPE_RQ_MASK)~((EE_TYPE_RQ_MASK)((EE_TYPE_RQ_MASK)1U << x));
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	05 2e       	mov	r0, r21
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <EE_rq2stk_exchange+0x5a>
     e8a:	22 0f       	add	r18, r18
     e8c:	0a 94       	dec	r0
     e8e:	ea f7       	brpl	.-6      	; 0xe8a <EE_rq2stk_exchange+0x58>
     e90:	20 95       	com	r18
     e92:	24 23       	and	r18, r20
     e94:	20 93 b6 02 	sts	0x02B6, r18
  }

  /* insert the extracted task on the top of the stack */
  EE_th_next[temp] = EE_stkfirst;
     e98:	e8 2f       	mov	r30, r24
     e9a:	ff 27       	eor	r31, r31
     e9c:	e7 fd       	sbrc	r30, 7
     e9e:	f0 95       	com	r31
     ea0:	e4 5e       	subi	r30, 0xE4	; 228
     ea2:	fe 4f       	sbci	r31, 0xFE	; 254
     ea4:	90 91 1b 01 	lds	r25, 0x011B
     ea8:	90 83       	st	Z, r25
  EE_stkfirst = temp;
     eaa:	80 93 1b 01 	sts	0x011B, r24

  return temp;
}
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <EE_rq_insert>:
void EE_rq_insert(EE_TID t)
{
  EE_TYPEPAIR temp;
  EE_TYPEPRIO p;
  
  p = EE_rq_link[t];
     eb4:	28 2f       	mov	r18, r24
     eb6:	33 27       	eor	r19, r19
     eb8:	27 fd       	sbrc	r18, 7
     eba:	30 95       	com	r19
     ebc:	f9 01       	movw	r30, r18
     ebe:	ed 54       	subi	r30, 0x4D	; 77
     ec0:	fd 4f       	sbci	r31, 0xFD	; 253
     ec2:	90 81       	ld	r25, Z

  /* take a free pair */
  temp = EE_rq_free;
     ec4:	60 91 b2 02 	lds	r22, 0x02B2
  EE_rq_free = EE_rq_pairs_next[EE_rq_free];
     ec8:	46 2f       	mov	r20, r22
     eca:	55 27       	eor	r21, r21
     ecc:	47 fd       	sbrc	r20, 7
     ece:	50 95       	com	r21
     ed0:	fa 01       	movw	r30, r20
     ed2:	eb 5f       	subi	r30, 0xFB	; 251
     ed4:	fe 4f       	sbci	r31, 0xFE	; 254
     ed6:	70 81       	ld	r23, Z
     ed8:	70 93 b2 02 	sts	0x02B2, r23

  /* fill it with the TID */
  EE_rq_pairs_tid[temp] = t;
     edc:	da 01       	movw	r26, r20
     ede:	a0 59       	subi	r26, 0x90	; 144
     ee0:	bc 4f       	sbci	r27, 0xFC	; 252
     ee2:	8c 93       	st	X, r24
  EE_rq_pairs_next[temp] = -1;
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	80 83       	st	Z, r24

  /* put it at the tail of its priority queue */
  if (EE_rq_queues_tail[p] == (EE_SREG)-1) {
     ee8:	89 2f       	mov	r24, r25
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	dc 01       	movw	r26, r24
     eee:	a5 5f       	subi	r26, 0xF5	; 245
     ef0:	be 4f       	sbci	r27, 0xFE	; 254
     ef2:	ec 91       	ld	r30, X
     ef4:	ef 3f       	cpi	r30, 0xFF	; 255
     ef6:	69 f4       	brne	.+26     	; 0xf12 <EE_rq_insert+0x5e>
    /* no tasks in this priority queue */
    /* set the bit field to say that a task is in the right queue */
    EE_rq_bitmask |= (EE_TYPE_RQ_MASK)EE_th_ready_prio[t];
     ef8:	f9 01       	movw	r30, r18
     efa:	ef 59       	subi	r30, 0x9F	; 159
     efc:	fe 4f       	sbci	r31, 0xFE	; 254
     efe:	40 91 b6 02 	lds	r20, 0x02B6
     f02:	20 81       	ld	r18, Z
     f04:	42 2b       	or	r20, r18
     f06:	40 93 b6 02 	sts	0x02B6, r20
    EE_rq_queues_head[p] = temp;
     f0a:	fc 01       	movw	r30, r24
     f0c:	ed 5e       	subi	r30, 0xED	; 237
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <EE_rq_insert+0x68>
  } else {
    EE_rq_pairs_next[EE_rq_queues_tail[p]] = temp;
     f12:	ff 27       	eor	r31, r31
     f14:	e7 fd       	sbrc	r30, 7
     f16:	f0 95       	com	r31
     f18:	eb 5f       	subi	r30, 0xFB	; 251
     f1a:	fe 4f       	sbci	r31, 0xFE	; 254
     f1c:	60 83       	st	Z, r22
  }
  EE_rq_queues_tail[p] = temp;
     f1e:	6c 93       	st	X, r22
     f20:	08 95       	ret

00000f22 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     f22:	1f 92       	push	r1
     f24:	0f 92       	push	r0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
     f34:	af 93       	push	r26
     f36:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     f38:	80 91 ca 02 	lds	r24, 0x02CA
     f3c:	90 91 cb 02 	lds	r25, 0x02CB
     f40:	a0 91 cc 02 	lds	r26, 0x02CC
     f44:	b0 91 cd 02 	lds	r27, 0x02CD
	unsigned char f = timer0_fract;
     f48:	30 91 c9 02 	lds	r19, 0x02C9

	m += MILLIS_INC;
	f += FRACT_INC;
     f4c:	23 e0       	ldi	r18, 0x03	; 3
     f4e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     f50:	2d 37       	cpi	r18, 0x7D	; 125
     f52:	20 f4       	brcc	.+8      	; 0xf5c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	a1 1d       	adc	r26, r1
     f58:	b1 1d       	adc	r27, r1
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     f5c:	26 e8       	ldi	r18, 0x86	; 134
     f5e:	23 0f       	add	r18, r19
		m += 1;
     f60:	02 96       	adiw	r24, 0x02	; 2
     f62:	a1 1d       	adc	r26, r1
     f64:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     f66:	20 93 c9 02 	sts	0x02C9, r18
	timer0_millis = m;
     f6a:	80 93 ca 02 	sts	0x02CA, r24
     f6e:	90 93 cb 02 	sts	0x02CB, r25
     f72:	a0 93 cc 02 	sts	0x02CC, r26
     f76:	b0 93 cd 02 	sts	0x02CD, r27
	timer0_overflow_count++;
     f7a:	80 91 ce 02 	lds	r24, 0x02CE
     f7e:	90 91 cf 02 	lds	r25, 0x02CF
     f82:	a0 91 d0 02 	lds	r26, 0x02D0
     f86:	b0 91 d1 02 	lds	r27, 0x02D1
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	a1 1d       	adc	r26, r1
     f8e:	b1 1d       	adc	r27, r1
     f90:	80 93 ce 02 	sts	0x02CE, r24
     f94:	90 93 cf 02 	sts	0x02CF, r25
     f98:	a0 93 d0 02 	sts	0x02D0, r26
     f9c:	b0 93 d1 02 	sts	0x02D1, r27
}
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     fb6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     fb8:	f8 94       	cli
	m = timer0_overflow_count;
     fba:	80 91 ce 02 	lds	r24, 0x02CE
     fbe:	90 91 cf 02 	lds	r25, 0x02CF
     fc2:	a0 91 d0 02 	lds	r26, 0x02D0
     fc6:	b0 91 d1 02 	lds	r27, 0x02D1
#if defined(TCNT0)
	t = TCNT0;
     fca:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     fcc:	a8 9b       	sbis	0x15, 0	; 21
     fce:	05 c0       	rjmp	.+10     	; 0xfda <micros+0x24>
     fd0:	2f 3f       	cpi	r18, 0xFF	; 255
     fd2:	19 f0       	breq	.+6      	; 0xfda <micros+0x24>
		m++;
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	a1 1d       	adc	r26, r1
     fd8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     fda:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     fdc:	66 27       	eor	r22, r22
     fde:	78 2f       	mov	r23, r24
     fe0:	89 2f       	mov	r24, r25
     fe2:	9a 2f       	mov	r25, r26
     fe4:	62 0f       	add	r22, r18
     fe6:	71 1d       	adc	r23, r1
     fe8:	81 1d       	adc	r24, r1
     fea:	91 1d       	adc	r25, r1
     fec:	42 e0       	ldi	r20, 0x02	; 2
     fee:	66 0f       	add	r22, r22
     ff0:	77 1f       	adc	r23, r23
     ff2:	88 1f       	adc	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	4a 95       	dec	r20
     ff8:	d1 f7       	brne	.-12     	; 0xfee <micros+0x38>
}
     ffa:	08 95       	ret

00000ffc <delay>:

void delay(unsigned long ms)
{
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    100c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <micros>
    1010:	eb 01       	movw	r28, r22

	while (ms > 0) {
    1012:	c1 14       	cp	r12, r1
    1014:	d1 04       	cpc	r13, r1
    1016:	e1 04       	cpc	r14, r1
    1018:	f1 04       	cpc	r15, r1
    101a:	89 f0       	breq	.+34     	; 0x103e <delay+0x42>
		yield();
    101c:	0e 94 11 0a 	call	0x1422	; 0x1422 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    1020:	0e 94 db 07 	call	0xfb6	; 0xfb6 <micros>
    1024:	6c 1b       	sub	r22, r28
    1026:	7d 0b       	sbc	r23, r29
    1028:	68 3e       	cpi	r22, 0xE8	; 232
    102a:	73 40       	sbci	r23, 0x03	; 3
    102c:	90 f3       	brcs	.-28     	; 0x1012 <delay+0x16>
			ms--;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	c8 1a       	sub	r12, r24
    1032:	d1 08       	sbc	r13, r1
    1034:	e1 08       	sbc	r14, r1
    1036:	f1 08       	sbc	r15, r1
			start += 1000;
    1038:	c8 51       	subi	r28, 0x18	; 24
    103a:	dc 4f       	sbci	r29, 0xFC	; 252
    103c:	ea cf       	rjmp	.-44     	; 0x1012 <delay+0x16>
		}
	}
}
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	08 95       	ret

0000104c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    104c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    104e:	84 b5       	in	r24, 0x24	; 36
    1050:	82 60       	ori	r24, 0x02	; 2
    1052:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1054:	84 b5       	in	r24, 0x24	; 36
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    105a:	85 b5       	in	r24, 0x25	; 37
    105c:	82 60       	ori	r24, 0x02	; 2
    105e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1060:	85 b5       	in	r24, 0x25	; 37
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1066:	ee e6       	ldi	r30, 0x6E	; 110
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	81 60       	ori	r24, 0x01	; 1
    106e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1070:	e1 e8       	ldi	r30, 0x81	; 129
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1076:	80 81       	ld	r24, Z
    1078:	82 60       	ori	r24, 0x02	; 2
    107a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    107c:	80 81       	ld	r24, Z
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1082:	e0 e8       	ldi	r30, 0x80	; 128
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	81 60       	ori	r24, 0x01	; 1
    108a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    108c:	e1 eb       	ldi	r30, 0xB1	; 177
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	84 60       	ori	r24, 0x04	; 4
    1094:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1096:	e0 eb       	ldi	r30, 0xB0	; 176
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	81 60       	ori	r24, 0x01	; 1
    109e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    10a0:	ea e7       	ldi	r30, 0x7A	; 122
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	84 60       	ori	r24, 0x04	; 4
    10a8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    10aa:	80 81       	ld	r24, Z
    10ac:	82 60       	ori	r24, 0x02	; 2
    10ae:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    10b0:	80 81       	ld	r24, Z
    10b2:	81 60       	ori	r24, 0x01	; 1
    10b4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10b6:	80 81       	ld	r24, Z
    10b8:	80 68       	ori	r24, 0x80	; 128
    10ba:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    10bc:	10 92 c1 00 	sts	0x00C1, r1
    10c0:	08 95       	ret

000010c2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    10c2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    10c4:	81 8d       	ldd	r24, Z+25	; 0x19
    10c6:	22 8d       	ldd	r18, Z+26	; 0x1a
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	80 5c       	subi	r24, 0xC0	; 192
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	82 1b       	sub	r24, r18
    10d0:	91 09       	sbc	r25, r1
}
    10d2:	8f 73       	andi	r24, 0x3F	; 63
    10d4:	99 27       	eor	r25, r25
    10d6:	08 95       	ret

000010d8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    10d8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    10da:	91 8d       	ldd	r25, Z+25	; 0x19
    10dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    10de:	98 17       	cp	r25, r24
    10e0:	31 f0       	breq	.+12     	; 0x10ee <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    10e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    10e4:	e8 0f       	add	r30, r24
    10e6:	f1 1d       	adc	r31, r1
    10e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    10f2:	08 95       	ret

000010f4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    10f4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    10f6:	91 8d       	ldd	r25, Z+25	; 0x19
    10f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    10fa:	98 17       	cp	r25, r24
    10fc:	61 f0       	breq	.+24     	; 0x1116 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    10fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1100:	df 01       	movw	r26, r30
    1102:	a8 0f       	add	r26, r24
    1104:	b1 1d       	adc	r27, r1
    1106:	5d 96       	adiw	r26, 0x1d	; 29
    1108:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    110a:	92 8d       	ldd	r25, Z+26	; 0x1a
    110c:	9f 5f       	subi	r25, 0xFF	; 255
    110e:	9f 73       	andi	r25, 0x3F	; 63
    1110:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    111a:	08 95       	ret

0000111c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    111c:	8a e6       	ldi	r24, 0x6A	; 106
    111e:	9a e0       	ldi	r25, 0x0A	; 10
    1120:	89 2b       	or	r24, r25
    1122:	49 f0       	breq	.+18     	; 0x1136 <_Z14serialEventRunv+0x1a>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	89 2b       	or	r24, r25
    112a:	29 f0       	breq	.+10     	; 0x1136 <_Z14serialEventRunv+0x1a>
    112c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_Z17Serial0_availablev>
    1130:	81 11       	cpse	r24, r1
    1132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1136:	08 95       	ret

00001138 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1138:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    113a:	84 8d       	ldd	r24, Z+28	; 0x1c
    113c:	df 01       	movw	r26, r30
    113e:	a8 0f       	add	r26, r24
    1140:	b1 1d       	adc	r27, r1
    1142:	a3 5a       	subi	r26, 0xA3	; 163
    1144:	bf 4f       	sbci	r27, 0xFF	; 255
    1146:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1148:	84 8d       	ldd	r24, Z+28	; 0x1c
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	8f 73       	andi	r24, 0x3F	; 63
    1150:	99 27       	eor	r25, r25
    1152:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1154:	a6 89       	ldd	r26, Z+22	; 0x16
    1156:	b7 89       	ldd	r27, Z+23	; 0x17
    1158:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    115a:	a0 89       	ldd	r26, Z+16	; 0x10
    115c:	b1 89       	ldd	r27, Z+17	; 0x11
    115e:	8c 91       	ld	r24, X
    1160:	80 64       	ori	r24, 0x40	; 64
    1162:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1164:	93 8d       	ldd	r25, Z+27	; 0x1b
    1166:	84 8d       	ldd	r24, Z+28	; 0x1c
    1168:	98 13       	cpse	r25, r24
    116a:	06 c0       	rjmp	.+12     	; 0x1178 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    116c:	02 88       	ldd	r0, Z+18	; 0x12
    116e:	f3 89       	ldd	r31, Z+19	; 0x13
    1170:	e0 2d       	mov	r30, r0
    1172:	80 81       	ld	r24, Z
    1174:	8f 7d       	andi	r24, 0xDF	; 223
    1176:	80 83       	st	Z, r24
    1178:	08 95       	ret

0000117a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1180:	88 8d       	ldd	r24, Y+24	; 0x18
    1182:	88 23       	and	r24, r24
    1184:	c9 f0       	breq	.+50     	; 0x11b8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1186:	ea 89       	ldd	r30, Y+18	; 0x12
    1188:	fb 89       	ldd	r31, Y+19	; 0x13
    118a:	80 81       	ld	r24, Z
    118c:	85 fd       	sbrc	r24, 5
    118e:	05 c0       	rjmp	.+10     	; 0x119a <_ZN14HardwareSerial5flushEv+0x20>
    1190:	a8 89       	ldd	r26, Y+16	; 0x10
    1192:	b9 89       	ldd	r27, Y+17	; 0x11
    1194:	8c 91       	ld	r24, X
    1196:	86 fd       	sbrc	r24, 6
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	07 fc       	sbrc	r0, 7
    119e:	f5 cf       	rjmp	.-22     	; 0x118a <_ZN14HardwareSerial5flushEv+0x10>
    11a0:	80 81       	ld	r24, Z
    11a2:	85 ff       	sbrs	r24, 5
    11a4:	f2 cf       	rjmp	.-28     	; 0x118a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    11a6:	a8 89       	ldd	r26, Y+16	; 0x10
    11a8:	b9 89       	ldd	r27, Y+17	; 0x11
    11aa:	8c 91       	ld	r24, X
    11ac:	85 ff       	sbrs	r24, 5
    11ae:	ed cf       	rjmp	.-38     	; 0x118a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    11b0:	ce 01       	movw	r24, r28
    11b2:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    11b6:	e7 cf       	rjmp	.-50     	; 0x1186 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    11be:	cf 92       	push	r12
    11c0:	df 92       	push	r13
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	1f 92       	push	r1
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	6c 01       	movw	r12, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    11d4:	dc 01       	movw	r26, r24
    11d6:	5b 96       	adiw	r26, 0x1b	; 27
    11d8:	9c 91       	ld	r25, X
    11da:	5b 97       	sbiw	r26, 0x1b	; 27
    11dc:	5c 96       	adiw	r26, 0x1c	; 28
    11de:	8c 91       	ld	r24, X
    11e0:	5c 97       	sbiw	r26, 0x1c	; 28
    11e2:	98 13       	cpse	r25, r24
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <_ZN14HardwareSerial5writeEh+0x36>
    11e6:	50 96       	adiw	r26, 0x10	; 16
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	51 97       	sbiw	r26, 0x11	; 17
    11ee:	80 81       	ld	r24, Z
    11f0:	85 fd       	sbrc	r24, 5
    11f2:	32 c0       	rjmp	.+100    	; 0x1258 <_ZN14HardwareSerial5writeEh+0x9a>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    11f4:	f6 01       	movw	r30, r12
    11f6:	03 8d       	ldd	r16, Z+27	; 0x1b
    11f8:	10 e0       	ldi	r17, 0x00	; 0
    11fa:	0f 5f       	subi	r16, 0xFF	; 255
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	0f 73       	andi	r16, 0x3F	; 63
    1200:	11 27       	eor	r17, r17
    1202:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1204:	f6 01       	movw	r30, r12
    1206:	84 8d       	ldd	r24, Z+28	; 0x1c
    1208:	f8 12       	cpse	r15, r24
    120a:	11 c0       	rjmp	.+34     	; 0x122e <_ZN14HardwareSerial5writeEh+0x70>
    if (bit_is_clear(SREG, SREG_I)) {
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	07 fc       	sbrc	r0, 7
    1210:	f9 cf       	rjmp	.-14     	; 0x1204 <_ZN14HardwareSerial5writeEh+0x46>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1212:	d6 01       	movw	r26, r12
    1214:	50 96       	adiw	r26, 0x10	; 16
    1216:	ed 91       	ld	r30, X+
    1218:	fc 91       	ld	r31, X
    121a:	51 97       	sbiw	r26, 0x11	; 17
    121c:	80 81       	ld	r24, Z
    121e:	85 ff       	sbrs	r24, 5
    1220:	f1 cf       	rjmp	.-30     	; 0x1204 <_ZN14HardwareSerial5writeEh+0x46>
	_tx_udr_empty_irq();
    1222:	c6 01       	movw	r24, r12
    1224:	69 83       	std	Y+1, r22	; 0x01
    1226:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    122a:	69 81       	ldd	r22, Y+1	; 0x01
    122c:	eb cf       	rjmp	.-42     	; 0x1204 <_ZN14HardwareSerial5writeEh+0x46>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    122e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1230:	e8 0f       	add	r30, r24
    1232:	f1 1d       	adc	r31, r1
    1234:	e3 5a       	subi	r30, 0xA3	; 163
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	60 83       	st	Z, r22
  _tx_buffer_head = i;
    123a:	d6 01       	movw	r26, r12
    123c:	5b 96       	adiw	r26, 0x1b	; 27
    123e:	0c 93       	st	X, r16
    1240:	5b 97       	sbiw	r26, 0x1b	; 27
	
  sbi(*_ucsrb, UDRIE0);
    1242:	52 96       	adiw	r26, 0x12	; 18
    1244:	ed 91       	ld	r30, X+
    1246:	fc 91       	ld	r31, X
    1248:	53 97       	sbiw	r26, 0x13	; 19
    124a:	80 81       	ld	r24, Z
    124c:	80 62       	ori	r24, 0x20	; 32
    124e:	80 83       	st	Z, r24
  _written = true;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	58 96       	adiw	r26, 0x18	; 24
    1254:	8c 93       	st	X, r24
    1256:	0d c0       	rjmp	.+26     	; 0x1272 <_ZN14HardwareSerial5writeEh+0xb4>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1258:	d6 01       	movw	r26, r12
    125a:	56 96       	adiw	r26, 0x16	; 22
    125c:	ed 91       	ld	r30, X+
    125e:	fc 91       	ld	r31, X
    1260:	57 97       	sbiw	r26, 0x17	; 23
    1262:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1264:	50 96       	adiw	r26, 0x10	; 16
    1266:	ed 91       	ld	r30, X+
    1268:	fc 91       	ld	r31, X
    126a:	51 97       	sbiw	r26, 0x11	; 17
    126c:	80 81       	ld	r24, Z
    126e:	80 64       	ori	r24, 0x40	; 64
    1270:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0f 90       	pop	r0
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	08 95       	ret

00001288 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	ec 01       	movw	r28, r24
    1298:	6a 01       	movw	r12, r20
    129a:	7b 01       	movw	r14, r22
    129c:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    129e:	e8 89       	ldd	r30, Y+16	; 0x10
    12a0:	f9 89       	ldd	r31, Y+17	; 0x11
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12a6:	41 15       	cp	r20, r1
    12a8:	81 ee       	ldi	r24, 0xE1	; 225
    12aa:	58 07       	cpc	r21, r24
    12ac:	61 05       	cpc	r22, r1
    12ae:	71 05       	cpc	r23, r1
    12b0:	a1 f0       	breq	.+40     	; 0x12da <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	79 e0       	ldi	r23, 0x09	; 9
    12b6:	8d e3       	ldi	r24, 0x3D	; 61
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a7 01       	movw	r20, r14
    12bc:	96 01       	movw	r18, r12
    12be:	0e 94 42 11 	call	0x2284	; 0x2284 <__udivmodsi4>
    12c2:	21 50       	subi	r18, 0x01	; 1
    12c4:	31 09       	sbc	r19, r1
    12c6:	41 09       	sbc	r20, r1
    12c8:	51 09       	sbc	r21, r1
    12ca:	56 95       	lsr	r21
    12cc:	47 95       	ror	r20
    12ce:	37 95       	ror	r19
    12d0:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12d2:	21 15       	cp	r18, r1
    12d4:	80 e1       	ldi	r24, 0x10	; 16
    12d6:	38 07       	cpc	r19, r24
    12d8:	98 f0       	brcs	.+38     	; 0x1300 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    12da:	e8 89       	ldd	r30, Y+16	; 0x10
    12dc:	f9 89       	ldd	r31, Y+17	; 0x11
    12de:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    12e0:	60 e8       	ldi	r22, 0x80	; 128
    12e2:	74 e8       	ldi	r23, 0x84	; 132
    12e4:	8e e1       	ldi	r24, 0x1E	; 30
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a7 01       	movw	r20, r14
    12ea:	96 01       	movw	r18, r12
    12ec:	0e 94 42 11 	call	0x2284	; 0x2284 <__udivmodsi4>
    12f0:	21 50       	subi	r18, 0x01	; 1
    12f2:	31 09       	sbc	r19, r1
    12f4:	41 09       	sbc	r20, r1
    12f6:	51 09       	sbc	r21, r1
    12f8:	56 95       	lsr	r21
    12fa:	47 95       	ror	r20
    12fc:	37 95       	ror	r19
    12fe:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1300:	ec 85       	ldd	r30, Y+12	; 0x0c
    1302:	fd 85       	ldd	r31, Y+13	; 0x0d
    1304:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1306:	ee 85       	ldd	r30, Y+14	; 0x0e
    1308:	ff 85       	ldd	r31, Y+15	; 0x0f
    130a:	20 83       	st	Z, r18

  _written = false;
    130c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    130e:	ec 89       	ldd	r30, Y+20	; 0x14
    1310:	fd 89       	ldd	r31, Y+21	; 0x15
    1312:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    1314:	ea 89       	ldd	r30, Y+18	; 0x12
    1316:	fb 89       	ldd	r31, Y+19	; 0x13
    1318:	80 81       	ld	r24, Z
    131a:	80 61       	ori	r24, 0x10	; 16
    131c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    131e:	ea 89       	ldd	r30, Y+18	; 0x12
    1320:	fb 89       	ldd	r31, Y+19	; 0x13
    1322:	80 81       	ld	r24, Z
    1324:	88 60       	ori	r24, 0x08	; 8
    1326:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1328:	ea 89       	ldd	r30, Y+18	; 0x12
    132a:	fb 89       	ldd	r31, Y+19	; 0x13
    132c:	80 81       	ld	r24, Z
    132e:	80 68       	ori	r24, 0x80	; 128
    1330:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1332:	ea 89       	ldd	r30, Y+18	; 0x12
    1334:	fb 89       	ldd	r31, Y+19	; 0x13
    1336:	80 81       	ld	r24, Z
    1338:	8f 7d       	andi	r24, 0xDF	; 223
    133a:	80 83       	st	Z, r24
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	df 90       	pop	r13
    1346:	cf 90       	pop	r12
    1348:	bf 90       	pop	r11
    134a:	08 95       	ret

0000134c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    134c:	cf 92       	push	r12
    134e:	df 92       	push	r13
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	6c 01       	movw	r12, r24
    135e:	7a 01       	movw	r14, r20
    1360:	eb 01       	movw	r28, r22
    1362:	e6 0e       	add	r14, r22
    1364:	f7 1e       	adc	r15, r23
  size_t n = 0;
    1366:	00 e0       	ldi	r16, 0x00	; 0
    1368:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    136a:	ce 15       	cp	r28, r14
    136c:	df 05       	cpc	r29, r15
    136e:	61 f0       	breq	.+24     	; 0x1388 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
    1370:	69 91       	ld	r22, Y+
    1372:	d6 01       	movw	r26, r12
    1374:	ed 91       	ld	r30, X+
    1376:	fc 91       	ld	r31, X
    1378:	01 90       	ld	r0, Z+
    137a:	f0 81       	ld	r31, Z
    137c:	e0 2d       	mov	r30, r0
    137e:	c6 01       	movw	r24, r12
    1380:	09 95       	icall
    1382:	08 0f       	add	r16, r24
    1384:	19 1f       	adc	r17, r25
    1386:	f1 cf       	rjmp	.-30     	; 0x136a <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
    1388:	c8 01       	movw	r24, r16
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	08 95       	ret

0000139c <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    139c:	61 15       	cp	r22, r1
    139e:	71 05       	cpc	r23, r1
    13a0:	81 f0       	breq	.+32     	; 0x13c2 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    13a2:	db 01       	movw	r26, r22
    13a4:	0d 90       	ld	r0, X+
    13a6:	00 20       	and	r0, r0
    13a8:	e9 f7       	brne	.-6      	; 0x13a4 <_ZN5Print5writeEPKc+0x8>
    13aa:	ad 01       	movw	r20, r26
    13ac:	41 50       	subi	r20, 0x01	; 1
    13ae:	51 09       	sbc	r21, r1
    13b0:	46 1b       	sub	r20, r22
    13b2:	57 0b       	sbc	r21, r23
    13b4:	dc 01       	movw	r26, r24
    13b6:	ed 91       	ld	r30, X+
    13b8:	fc 91       	ld	r31, X
    13ba:	02 80       	ldd	r0, Z+2	; 0x02
    13bc:	f3 81       	ldd	r31, Z+3	; 0x03
    13be:	e0 2d       	mov	r30, r0
    13c0:	09 94       	ijmp
    }
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	08 95       	ret

000013c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    13c8:	dc 01       	movw	r26, r24
    13ca:	ed 91       	ld	r30, X+
    13cc:	fc 91       	ld	r31, X
    13ce:	01 90       	ld	r0, Z+
    13d0:	f0 81       	ld	r31, Z
    13d2:	e0 2d       	mov	r30, r0
    13d4:	09 94       	ijmp

000013d6 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    13e0:	6d e0       	ldi	r22, 0x0D	; 13
    13e2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN5Print5printEc>
    13e6:	8c 01       	movw	r16, r24
  n += print('\n');
    13e8:	6a e0       	ldi	r22, 0x0A	; 10
    13ea:	ce 01       	movw	r24, r28
    13ec:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN5Print5printEc>
  return n;
}
    13f0:	80 0f       	add	r24, r16
    13f2:	91 1f       	adc	r25, r17
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	08 95       	ret

000013fe <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1408:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN5Print5writeEPKc>
    140c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    140e:	ce 01       	movw	r24, r28
    1410:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN5Print7printlnEv>
  return n;
}
    1414:	80 0f       	add	r24, r16
    1416:	91 1f       	adc	r25, r17
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	08 95       	ret

00001422 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1422:	08 95       	ret

00001424 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1424:	1f 92       	push	r1
    1426:	0f 92       	push	r0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	0f 92       	push	r0
    142c:	11 24       	eor	r1, r1
    142e:	2f 93       	push	r18
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1438:	e0 91 e2 02 	lds	r30, 0x02E2
    143c:	f0 91 e3 02 	lds	r31, 0x02E3
    1440:	80 81       	ld	r24, Z
    1442:	e0 91 e8 02 	lds	r30, 0x02E8
    1446:	f0 91 e9 02 	lds	r31, 0x02E9
    144a:	82 fd       	sbrc	r24, 2
    144c:	12 c0       	rjmp	.+36     	; 0x1472 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    144e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1450:	80 91 eb 02 	lds	r24, 0x02EB
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1458:	20 91 ec 02 	lds	r18, 0x02EC
    145c:	82 17       	cp	r24, r18
    145e:	51 f0       	breq	.+20     	; 0x1474 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1460:	e0 91 eb 02 	lds	r30, 0x02EB
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	ee 52       	subi	r30, 0x2E	; 46
    1468:	fd 4f       	sbci	r31, 0xFD	; 253
    146a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    146c:	80 93 eb 02 	sts	0x02EB, r24
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1472:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1474:	ff 91       	pop	r31
    1476:	ef 91       	pop	r30
    1478:	9f 91       	pop	r25
    147a:	8f 91       	pop	r24
    147c:	2f 91       	pop	r18
    147e:	0f 90       	pop	r0
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	0f 90       	pop	r0
    1484:	1f 90       	pop	r1
    1486:	18 95       	reti

00001488 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1488:	1f 92       	push	r1
    148a:	0f 92       	push	r0
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	0f 92       	push	r0
    1490:	11 24       	eor	r1, r1
    1492:	2f 93       	push	r18
    1494:	3f 93       	push	r19
    1496:	4f 93       	push	r20
    1498:	5f 93       	push	r21
    149a:	6f 93       	push	r22
    149c:	7f 93       	push	r23
    149e:	8f 93       	push	r24
    14a0:	9f 93       	push	r25
    14a2:	af 93       	push	r26
    14a4:	bf 93       	push	r27
    14a6:	ef 93       	push	r30
    14a8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    14aa:	82 ed       	ldi	r24, 0xD2	; 210
    14ac:	92 e0       	ldi	r25, 0x02	; 2
    14ae:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    14b2:	ff 91       	pop	r31
    14b4:	ef 91       	pop	r30
    14b6:	bf 91       	pop	r27
    14b8:	af 91       	pop	r26
    14ba:	9f 91       	pop	r25
    14bc:	8f 91       	pop	r24
    14be:	7f 91       	pop	r23
    14c0:	6f 91       	pop	r22
    14c2:	5f 91       	pop	r21
    14c4:	4f 91       	pop	r20
    14c6:	3f 91       	pop	r19
    14c8:	2f 91       	pop	r18
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	0f 90       	pop	r0
    14d0:	1f 90       	pop	r1
    14d2:	18 95       	reti

000014d4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    14d4:	82 ed       	ldi	r24, 0xD2	; 210
    14d6:	92 e0       	ldi	r25, 0x02	; 2
    14d8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN14HardwareSerial9availableEv>
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	89 2b       	or	r24, r25
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <_Z17Serial0_availablev+0x10>
    14e2:	20 e0       	ldi	r18, 0x00	; 0
}
    14e4:	82 2f       	mov	r24, r18
    14e6:	08 95       	ret

000014e8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    14e8:	10 92 d5 02 	sts	0x02D5, r1
    14ec:	10 92 d4 02 	sts	0x02D4, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    14f0:	88 ee       	ldi	r24, 0xE8	; 232
    14f2:	93 e0       	ldi	r25, 0x03	; 3
    14f4:	a0 e0       	ldi	r26, 0x00	; 0
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	80 93 d6 02 	sts	0x02D6, r24
    14fc:	90 93 d7 02 	sts	0x02D7, r25
    1500:	a0 93 d8 02 	sts	0x02D8, r26
    1504:	b0 93 d9 02 	sts	0x02D9, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1508:	85 ea       	ldi	r24, 0xA5	; 165
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	90 93 d3 02 	sts	0x02D3, r25
    1510:	80 93 d2 02 	sts	0x02D2, r24
    1514:	85 ec       	ldi	r24, 0xC5	; 197
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	90 93 df 02 	sts	0x02DF, r25
    151c:	80 93 de 02 	sts	0x02DE, r24
    1520:	84 ec       	ldi	r24, 0xC4	; 196
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	90 93 e1 02 	sts	0x02E1, r25
    1528:	80 93 e0 02 	sts	0x02E0, r24
    152c:	80 ec       	ldi	r24, 0xC0	; 192
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	90 93 e3 02 	sts	0x02E3, r25
    1534:	80 93 e2 02 	sts	0x02E2, r24
    1538:	81 ec       	ldi	r24, 0xC1	; 193
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	90 93 e5 02 	sts	0x02E5, r25
    1540:	80 93 e4 02 	sts	0x02E4, r24
    1544:	82 ec       	ldi	r24, 0xC2	; 194
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	90 93 e7 02 	sts	0x02E7, r25
    154c:	80 93 e6 02 	sts	0x02E6, r24
    1550:	86 ec       	ldi	r24, 0xC6	; 198
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	90 93 e9 02 	sts	0x02E9, r25
    1558:	80 93 e8 02 	sts	0x02E8, r24
    155c:	10 92 eb 02 	sts	0x02EB, r1
    1560:	10 92 ec 02 	sts	0x02EC, r1
    1564:	10 92 ed 02 	sts	0x02ED, r1
    1568:	10 92 ee 02 	sts	0x02EE, r1
    156c:	08 95       	ret

0000156e <_ZN8SPIClass8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    156e:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    1570:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    1572:	0d b4       	in	r0, 0x2d	; 45
    1574:	07 fe       	sbrs	r0, 7
    1576:	fd cf       	rjmp	.-6      	; 0x1572 <_ZN8SPIClass8transferEh+0x4>
    return SPDR;
    1578:	8e b5       	in	r24, 0x2e	; 46
  }
    157a:	08 95       	ret

0000157c <_ZN7MCP_CAN13mcp2515_resetEv>:
/*********************************************************************************************************
** Function name:           mcp2515_reset
** Descriptions:            reset the device
*********************************************************************************************************/
void MCP_CAN::mcp2515_reset(void)
{
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	ec 01       	movw	r28, r24
    MCP2515_SELECT();
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	88 89       	ldd	r24, Y+16	; 0x10
    1586:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>
    spi_readwrite(MCP_RESET);
    158a:	80 ec       	ldi	r24, 0xC0	; 192
    158c:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    MCP2515_UNSELECT();
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	88 89       	ldd	r24, Y+16	; 0x10
    1594:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>
    delay(10);
    1598:	6a e0       	ldi	r22, 0x0A	; 10
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
}
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
void MCP_CAN::mcp2515_reset(void)
{
    MCP2515_SELECT();
    spi_readwrite(MCP_RESET);
    MCP2515_UNSELECT();
    delay(10);
    15a4:	0c 94 fe 07 	jmp	0xffc	; 0xffc <delay>

000015a8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>:
/*********************************************************************************************************
** Function name:           mcp2515_readRegister
** Descriptions:            read register
*********************************************************************************************************/
INT8U MCP_CAN::mcp2515_readRegister(const INT8U address)                                                                     
{
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	ec 01       	movw	r28, r24
    15b0:	16 2f       	mov	r17, r22
    INT8U ret;

    MCP2515_SELECT();
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	88 89       	ldd	r24, Y+16	; 0x10
    15b6:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>
    spi_readwrite(MCP_READ);
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    spi_readwrite(address);
    15c0:	81 2f       	mov	r24, r17
    15c2:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    ret = spi_read();
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    15cc:	18 2f       	mov	r17, r24
    MCP2515_UNSELECT();
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	88 89       	ldd	r24, Y+16	; 0x10
    15d2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>

    return ret;
}
    15d6:	81 2f       	mov	r24, r17
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	08 95       	ret

000015e0 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh>:
/*********************************************************************************************************
** Function name:           mcp2515_readRegisterS
** Descriptions:            read registerS
*********************************************************************************************************/
void MCP_CAN::mcp2515_readRegisterS(const INT8U address, INT8U values[], const INT8U n)
{
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x12>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8c 01       	movw	r16, r24
    15f8:	f6 2e       	mov	r15, r22
    15fa:	e2 2e       	mov	r14, r18
	INT8U i;
	MCP2515_SELECT();
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	fc 01       	movw	r30, r24
    1600:	80 89       	ldd	r24, Z+16	; 0x10
    1602:	49 83       	std	Y+1, r20	; 0x01
    1604:	5a 83       	std	Y+2, r21	; 0x02
    1606:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>
	spi_readwrite(MCP_READ);
    160a:	83 e0       	ldi	r24, 0x03	; 3
    160c:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
	spi_readwrite(address);
    1610:	8f 2d       	mov	r24, r15
    1612:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    1616:	49 81       	ldd	r20, Y+1	; 0x01
    1618:	c4 2e       	mov	r12, r20
    161a:	5a 81       	ldd	r21, Y+2	; 0x02
    161c:	d5 2e       	mov	r13, r21
	// mcp2515 has auto-increment of address-pointer
	for (i=0; i<n && i<CAN_MAX_CHAR_IN_MESSAGE; i++) {
    161e:	f1 2c       	mov	r15, r1
    1620:	fe 14       	cp	r15, r14
    1622:	59 f0       	breq	.+22     	; 0x163a <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x5a>
    1624:	f8 e0       	ldi	r31, 0x08	; 8
    1626:	ff 16       	cp	r15, r31
    1628:	41 f0       	breq	.+16     	; 0x163a <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x5a>
		values[i] = spi_read();
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    1630:	f6 01       	movw	r30, r12
    1632:	81 93       	st	Z+, r24
    1634:	6f 01       	movw	r12, r30
	INT8U i;
	MCP2515_SELECT();
	spi_readwrite(MCP_READ);
	spi_readwrite(address);
	// mcp2515 has auto-increment of address-pointer
	for (i=0; i<n && i<CAN_MAX_CHAR_IN_MESSAGE; i++) {
    1636:	f3 94       	inc	r15
    1638:	f3 cf       	rjmp	.-26     	; 0x1620 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x40>
		values[i] = spi_read();
	}
	MCP2515_UNSELECT();
    163a:	61 e0       	ldi	r22, 0x01	; 1
    163c:	f8 01       	movw	r30, r16
    163e:	80 89       	ldd	r24, Z+16	; 0x10
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
	spi_readwrite(address);
	// mcp2515 has auto-increment of address-pointer
	for (i=0; i<n && i<CAN_MAX_CHAR_IN_MESSAGE; i++) {
		values[i] = spi_read();
	}
	MCP2515_UNSELECT();
    1654:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <digitalWrite>

00001658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>:
/*********************************************************************************************************
** Function name:           mcp2515_setRegister
** Descriptions:            set register
*********************************************************************************************************/
void MCP_CAN::mcp2515_setRegister(const INT8U address, const INT8U value)
{
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	1f 92       	push	r1
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	7c 01       	movw	r14, r24
    166a:	16 2f       	mov	r17, r22
    MCP2515_SELECT();
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	fc 01       	movw	r30, r24
    1670:	80 89       	ldd	r24, Z+16	; 0x10
    1672:	49 83       	std	Y+1, r20	; 0x01
    1674:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>
    spi_readwrite(MCP_WRITE);
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    spi_readwrite(address);
    167e:	81 2f       	mov	r24, r17
    1680:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    spi_readwrite(value);
    1684:	49 81       	ldd	r20, Y+1	; 0x01
    1686:	84 2f       	mov	r24, r20
    1688:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    MCP2515_UNSELECT();
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	f7 01       	movw	r30, r14
    1690:	80 89       	ldd	r24, Z+16	; 0x10
}
    1692:	0f 90       	pop	r0
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	ff 90       	pop	r15
    169c:	ef 90       	pop	r14
{
    MCP2515_SELECT();
    spi_readwrite(MCP_WRITE);
    spi_readwrite(address);
    spi_readwrite(value);
    MCP2515_UNSELECT();
    169e:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <digitalWrite>

000016a2 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh>:
/*********************************************************************************************************
** Function name:           mcp2515_setRegisterS
** Descriptions:            set registerS
*********************************************************************************************************/
void MCP_CAN::mcp2515_setRegisterS(const INT8U address, const INT8U values[], const INT8U n)
{
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x12>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	8c 01       	movw	r16, r24
    16ba:	e6 2e       	mov	r14, r22
    16bc:	f2 2e       	mov	r15, r18
    INT8U i;
    MCP2515_SELECT();
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	fc 01       	movw	r30, r24
    16c2:	80 89       	ldd	r24, Z+16	; 0x10
    16c4:	49 83       	std	Y+1, r20	; 0x01
    16c6:	5a 83       	std	Y+2, r21	; 0x02
    16c8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>
    spi_readwrite(MCP_WRITE);
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    spi_readwrite(address);
    16d2:	8e 2d       	mov	r24, r14
    16d4:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    16d8:	49 81       	ldd	r20, Y+1	; 0x01
    16da:	e4 2e       	mov	r14, r20
       
    for (i=0; i<n; i++) 
    16dc:	c4 2e       	mov	r12, r20
    16de:	5a 81       	ldd	r21, Y+2	; 0x02
    16e0:	d5 2e       	mov	r13, r21
    16e2:	8c 2d       	mov	r24, r12
    16e4:	8e 19       	sub	r24, r14
    16e6:	8f 15       	cp	r24, r15
    16e8:	30 f4       	brcc	.+12     	; 0x16f6 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x54>
    {
        spi_readwrite(values[i]);
    16ea:	f6 01       	movw	r30, r12
    16ec:	81 91       	ld	r24, Z+
    16ee:	6f 01       	movw	r12, r30
    16f0:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    16f4:	f6 cf       	rjmp	.-20     	; 0x16e2 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x40>
    }
    MCP2515_UNSELECT();
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	f8 01       	movw	r30, r16
    16fa:	80 89       	ldd	r24, Z+16	; 0x10
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
       
    for (i=0; i<n; i++) 
    {
        spi_readwrite(values[i]);
    }
    MCP2515_UNSELECT();
    1710:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <digitalWrite>

00001714 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>:
/*********************************************************************************************************
** Function name:           mcp2515_modifyRegister
** Descriptions:            set bit of one register
*********************************************************************************************************/
void MCP_CAN::mcp2515_modifyRegister(const INT8U address, const INT8U mask, const INT8U data)
{
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	00 d0       	rcall	.+0      	; 0x1720 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0xc>
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	7c 01       	movw	r14, r24
    1726:	16 2f       	mov	r17, r22
    MCP2515_SELECT();
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	fc 01       	movw	r30, r24
    172c:	80 89       	ldd	r24, Z+16	; 0x10
    172e:	2a 83       	std	Y+2, r18	; 0x02
    1730:	49 83       	std	Y+1, r20	; 0x01
    1732:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>
    spi_readwrite(MCP_BITMOD);
    1736:	85 e0       	ldi	r24, 0x05	; 5
    1738:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    spi_readwrite(address);
    173c:	81 2f       	mov	r24, r17
    173e:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    spi_readwrite(mask);
    1742:	49 81       	ldd	r20, Y+1	; 0x01
    1744:	84 2f       	mov	r24, r20
    1746:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    spi_readwrite(data);
    174a:	2a 81       	ldd	r18, Y+2	; 0x02
    174c:	82 2f       	mov	r24, r18
    174e:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    MCP2515_UNSELECT();
    1752:	61 e0       	ldi	r22, 0x01	; 1
    1754:	f7 01       	movw	r30, r14
    1756:	80 89       	ldd	r24, Z+16	; 0x10
}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    MCP2515_SELECT();
    spi_readwrite(MCP_BITMOD);
    spi_readwrite(address);
    spi_readwrite(mask);
    spi_readwrite(data);
    MCP2515_UNSELECT();
    1766:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <digitalWrite>

0000176a <_ZN7MCP_CAN18mcp2515_readStatusEv>:
/*********************************************************************************************************
** Function name:           mcp2515_readStatus
** Descriptions:            read mcp2515's Status
*********************************************************************************************************/
INT8U MCP_CAN::mcp2515_readStatus(void)                             
{
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	ec 01       	movw	r28, r24
	INT8U i;
	MCP2515_SELECT();
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	88 89       	ldd	r24, Y+16	; 0x10
    1776:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>
	spi_readwrite(MCP_READ_STATUS);
    177a:	80 ea       	ldi	r24, 0xA0	; 160
    177c:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
	i = spi_read();
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN8SPIClass8transferEh>
    1786:	18 2f       	mov	r17, r24
	MCP2515_UNSELECT();
    1788:	61 e0       	ldi	r22, 0x01	; 1
    178a:	88 89       	ldd	r24, Y+16	; 0x10
    178c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>
	
	return i;
}
    1790:	81 2f       	mov	r24, r17
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	08 95       	ret

0000179a <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>:
/*********************************************************************************************************
** Function name:           mcp2515_setCANCTRL_Mode
** Descriptions:            set control mode
*********************************************************************************************************/
INT8U MCP_CAN::mcp2515_setCANCTRL_Mode(const INT8U newmode)
{
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	ec 01       	movw	r28, r24
    17a2:	16 2f       	mov	r17, r22
    INT8U i;

    mcp2515_modifyRegister(MCP_CANCTRL, MODE_MASK, newmode);
    17a4:	26 2f       	mov	r18, r22
    17a6:	40 ee       	ldi	r20, 0xE0	; 224
    17a8:	6f e0       	ldi	r22, 0x0F	; 15
    17aa:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>

    i = mcp2515_readRegister(MCP_CANCTRL);
    17ae:	6f e0       	ldi	r22, 0x0F	; 15
    17b0:	ce 01       	movw	r24, r28
    17b2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    i &= MODE_MASK;
    17b6:	98 2f       	mov	r25, r24
    17b8:	90 7e       	andi	r25, 0xE0	; 224

    if ( i == newmode ) 
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	91 13       	cpse	r25, r17
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x28>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
        return MCP2515_OK;
    }

    return MCP2515_FAIL;

}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	08 95       	ret

000017ca <_ZN7MCP_CAN18mcp2515_configRateEh>:
/*********************************************************************************************************
** Function name:           mcp2515_configRate
** Descriptions:            set boadrate
*********************************************************************************************************/
INT8U MCP_CAN::mcp2515_configRate(const INT8U canSpeed)            
{
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	ec 01       	movw	r28, r24
    INT8U set, cfg1, cfg2, cfg3;
    set = 1;
    switch (canSpeed) 
    17d4:	46 2f       	mov	r20, r22
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	fa 01       	movw	r30, r20
    17da:	31 97       	sbiw	r30, 0x01	; 1
    17dc:	ef 30       	cpi	r30, 0x0F	; 15
    17de:	f1 05       	cpc	r31, r1
    17e0:	90 f5       	brcc	.+100    	; 0x1846 <_ZN7MCP_CAN18mcp2515_configRateEh+0x7c>
    17e2:	ec 5c       	subi	r30, 0xCC	; 204
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__tablejump2__>
        break;

        case (CAN_20KBPS):
        cfg1 = MCP_16MHz_20kBPS_CFG1;
        cfg2 = MCP_16MHz_20kBPS_CFG2;
        cfg3 = MCP_16MHz_20kBPS_CFG3;
    17ea:	17 e8       	ldi	r17, 0x87	; 135
        cfg3 = MCP_16MHz_10kBPS_CFG3;
        break;

        case (CAN_20KBPS):
        cfg1 = MCP_16MHz_20kBPS_CFG1;
        cfg2 = MCP_16MHz_20kBPS_CFG2;
    17ec:	0f ef       	ldi	r16, 0xFF	; 255
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <_ZN7MCP_CAN18mcp2515_configRateEh+0x2a>
        break;
        
        case (CAN_31K25BPS):
        cfg1 = MCP_16MHz_31k25BPS_CFG1;
        cfg2 = MCP_16MHz_31k25BPS_CFG2;
        cfg3 = MCP_16MHz_31k25BPS_CFG3;
    17f0:	15 e8       	ldi	r17, 0x85	; 133
        cfg3 = MCP_16MHz_20kBPS_CFG3;
        break;
        
        case (CAN_31K25BPS):
        cfg1 = MCP_16MHz_31k25BPS_CFG1;
        cfg2 = MCP_16MHz_31k25BPS_CFG2;
    17f2:	01 ef       	ldi	r16, 0xF1	; 241
        cfg2 = MCP_16MHz_20kBPS_CFG2;
        cfg3 = MCP_16MHz_20kBPS_CFG3;
        break;
        
        case (CAN_31K25BPS):
        cfg1 = MCP_16MHz_31k25BPS_CFG1;
    17f4:	4f e0       	ldi	r20, 0x0F	; 15
        cfg2 = MCP_16MHz_31k25BPS_CFG2;
        cfg3 = MCP_16MHz_31k25BPS_CFG3;
        break;
    17f6:	30 c0       	rjmp	.+96     	; 0x1858 <_ZN7MCP_CAN18mcp2515_configRateEh+0x8e>

		case (CAN_33KBPS):
        cfg1 = MCP_16MHz_33kBPS_CFG1;
        cfg2 = MCP_16MHz_33kBPS_CFG2;
        cfg3 = MCP_16MHz_33kBPS_CFG3;
    17f8:	17 e0       	ldi	r17, 0x07	; 7
        cfg3 = MCP_16MHz_31k25BPS_CFG3;
        break;

		case (CAN_33KBPS):
        cfg1 = MCP_16MHz_33kBPS_CFG1;
        cfg2 = MCP_16MHz_33kBPS_CFG2;
    17fa:	0e eb       	ldi	r16, 0xBE	; 190
        cfg2 = MCP_16MHz_31k25BPS_CFG2;
        cfg3 = MCP_16MHz_31k25BPS_CFG3;
        break;

		case (CAN_33KBPS):
        cfg1 = MCP_16MHz_33kBPS_CFG1;
    17fc:	49 e0       	ldi	r20, 0x09	; 9
        cfg2 = MCP_16MHz_33kBPS_CFG2;
        cfg3 = MCP_16MHz_33kBPS_CFG3;
        break;
    17fe:	2c c0       	rjmp	.+88     	; 0x1858 <_ZN7MCP_CAN18mcp2515_configRateEh+0x8e>

        case (CAN_40KBPS):
        cfg1 = MCP_16MHz_40kBPS_CFG1;
        cfg2 = MCP_16MHz_40kBPS_CFG2;
        cfg3 = MCP_16MHz_40kBPS_CFG3;
    1800:	17 e8       	ldi	r17, 0x87	; 135
        cfg3 = MCP_16MHz_33kBPS_CFG3;
        break;

        case (CAN_40KBPS):
        cfg1 = MCP_16MHz_40kBPS_CFG1;
        cfg2 = MCP_16MHz_40kBPS_CFG2;
    1802:	0f ef       	ldi	r16, 0xFF	; 255
    1804:	02 c0       	rjmp	.+4      	; 0x180a <_ZN7MCP_CAN18mcp2515_configRateEh+0x40>
        break;

        case (CAN_50KBPS):
        cfg1 = MCP_16MHz_50kBPS_CFG1;
        cfg2 = MCP_16MHz_50kBPS_CFG2;
        cfg3 = MCP_16MHz_50kBPS_CFG3;
    1806:	17 e8       	ldi	r17, 0x87	; 135
        cfg3 = MCP_16MHz_40kBPS_CFG3;
        break;

        case (CAN_50KBPS):
        cfg1 = MCP_16MHz_50kBPS_CFG1;
        cfg2 = MCP_16MHz_50kBPS_CFG2;
    1808:	0a ef       	ldi	r16, 0xFA	; 250
        cfg2 = MCP_16MHz_40kBPS_CFG2;
        cfg3 = MCP_16MHz_40kBPS_CFG3;
        break;

        case (CAN_50KBPS):
        cfg1 = MCP_16MHz_50kBPS_CFG1;
    180a:	47 e0       	ldi	r20, 0x07	; 7
        cfg2 = MCP_16MHz_50kBPS_CFG2;
        cfg3 = MCP_16MHz_50kBPS_CFG3;
        break;
    180c:	25 c0       	rjmp	.+74     	; 0x1858 <_ZN7MCP_CAN18mcp2515_configRateEh+0x8e>

        case (CAN_80KBPS):
        cfg1 = MCP_16MHz_80kBPS_CFG1;
        cfg2 = MCP_16MHz_80kBPS_CFG2;
        cfg3 = MCP_16MHz_80kBPS_CFG3;
    180e:	17 e8       	ldi	r17, 0x87	; 135
        cfg3 = MCP_16MHz_50kBPS_CFG3;
        break;

        case (CAN_80KBPS):
        cfg1 = MCP_16MHz_80kBPS_CFG1;
        cfg2 = MCP_16MHz_80kBPS_CFG2;
    1810:	0f ef       	ldi	r16, 0xFF	; 255
    1812:	08 c0       	rjmp	.+16     	; 0x1824 <_ZN7MCP_CAN18mcp2515_configRateEh+0x5a>
        break;

		case (CAN_95KBPS):
        cfg1 = MCP_16MHz_95kBPS_CFG1;
        cfg2 = MCP_16MHz_95kBPS_CFG2;
        cfg3 = MCP_16MHz_95kBPS_CFG3;
    1814:	17 e0       	ldi	r17, 0x07	; 7
        cfg3 = MCP_16MHz_80kBPS_CFG3;
        break;

		case (CAN_95KBPS):
        cfg1 = MCP_16MHz_95kBPS_CFG1;
        cfg2 = MCP_16MHz_95kBPS_CFG2;
    1816:	0d ea       	ldi	r16, 0xAD	; 173
    1818:	05 c0       	rjmp	.+10     	; 0x1824 <_ZN7MCP_CAN18mcp2515_configRateEh+0x5a>
        break;

        case (CAN_100KBPS):                                             /* 100KBPS                  */
        cfg1 = MCP_16MHz_100kBPS_CFG1;
        cfg2 = MCP_16MHz_100kBPS_CFG2;
        cfg3 = MCP_16MHz_100kBPS_CFG3;
    181a:	17 e8       	ldi	r17, 0x87	; 135
        cfg3 = MCP_16MHz_95kBPS_CFG3;
        break;

        case (CAN_100KBPS):                                             /* 100KBPS                  */
        cfg1 = MCP_16MHz_100kBPS_CFG1;
        cfg2 = MCP_16MHz_100kBPS_CFG2;
    181c:	0a ef       	ldi	r16, 0xFA	; 250
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <_ZN7MCP_CAN18mcp2515_configRateEh+0x5a>
        break;

        case (CAN_125KBPS):
        cfg1 = MCP_16MHz_125kBPS_CFG1;
        cfg2 = MCP_16MHz_125kBPS_CFG2;
        cfg3 = MCP_16MHz_125kBPS_CFG3;
    1820:	16 e8       	ldi	r17, 0x86	; 134
        cfg3 = MCP_16MHz_100kBPS_CFG3;
        break;

        case (CAN_125KBPS):
        cfg1 = MCP_16MHz_125kBPS_CFG1;
        cfg2 = MCP_16MHz_125kBPS_CFG2;
    1822:	00 ef       	ldi	r16, 0xF0	; 240
        cfg2 = MCP_16MHz_100kBPS_CFG2;
        cfg3 = MCP_16MHz_100kBPS_CFG3;
        break;

        case (CAN_125KBPS):
        cfg1 = MCP_16MHz_125kBPS_CFG1;
    1824:	43 e0       	ldi	r20, 0x03	; 3
        cfg2 = MCP_16MHz_125kBPS_CFG2;
        cfg3 = MCP_16MHz_125kBPS_CFG3;
        break;
    1826:	18 c0       	rjmp	.+48     	; 0x1858 <_ZN7MCP_CAN18mcp2515_configRateEh+0x8e>

        case (CAN_200KBPS):
        cfg1 = MCP_16MHz_200kBPS_CFG1;
        cfg2 = MCP_16MHz_200kBPS_CFG2;
        cfg3 = MCP_16MHz_200kBPS_CFG3;
    1828:	17 e8       	ldi	r17, 0x87	; 135
        cfg3 = MCP_16MHz_125kBPS_CFG3;
        break;

        case (CAN_200KBPS):
        cfg1 = MCP_16MHz_200kBPS_CFG1;
        cfg2 = MCP_16MHz_200kBPS_CFG2;
    182a:	0a ef       	ldi	r16, 0xFA	; 250
        cfg2 = MCP_16MHz_125kBPS_CFG2;
        cfg3 = MCP_16MHz_125kBPS_CFG3;
        break;

        case (CAN_200KBPS):
        cfg1 = MCP_16MHz_200kBPS_CFG1;
    182c:	41 e0       	ldi	r20, 0x01	; 1
        cfg2 = MCP_16MHz_200kBPS_CFG2;
        cfg3 = MCP_16MHz_200kBPS_CFG3;
        break;
    182e:	14 c0       	rjmp	.+40     	; 0x1858 <_ZN7MCP_CAN18mcp2515_configRateEh+0x8e>

        case (CAN_250KBPS):
        cfg1 = MCP_16MHz_250kBPS_CFG1;
        cfg2 = MCP_16MHz_250kBPS_CFG2;
        cfg3 = MCP_16MHz_250kBPS_CFG3;
    1830:	15 e8       	ldi	r17, 0x85	; 133
        cfg3 = MCP_16MHz_200kBPS_CFG3;
        break;

        case (CAN_250KBPS):
        cfg1 = MCP_16MHz_250kBPS_CFG1;
        cfg2 = MCP_16MHz_250kBPS_CFG2;
    1832:	01 ef       	ldi	r16, 0xF1	; 241
        cfg2 = MCP_16MHz_200kBPS_CFG2;
        cfg3 = MCP_16MHz_200kBPS_CFG3;
        break;

        case (CAN_250KBPS):
        cfg1 = MCP_16MHz_250kBPS_CFG1;
    1834:	41 e4       	ldi	r20, 0x41	; 65
        cfg2 = MCP_16MHz_250kBPS_CFG2;
        cfg3 = MCP_16MHz_250kBPS_CFG3;
        break;
    1836:	10 c0       	rjmp	.+32     	; 0x1858 <_ZN7MCP_CAN18mcp2515_configRateEh+0x8e>

        case (CAN_500KBPS):
        cfg1 = MCP_16MHz_500kBPS_CFG1;
        cfg2 = MCP_16MHz_500kBPS_CFG2;
        cfg3 = MCP_16MHz_500kBPS_CFG3;
    1838:	16 e8       	ldi	r17, 0x86	; 134
        cfg3 = MCP_16MHz_250kBPS_CFG3;
        break;

        case (CAN_500KBPS):
        cfg1 = MCP_16MHz_500kBPS_CFG1;
        cfg2 = MCP_16MHz_500kBPS_CFG2;
    183a:	00 ef       	ldi	r16, 0xF0	; 240
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <_ZN7MCP_CAN18mcp2515_configRateEh+0x78>
        break;
        
        case (CAN_1000KBPS):
        cfg1 = MCP_16MHz_1000kBPS_CFG1;
        cfg2 = MCP_16MHz_1000kBPS_CFG2;
        cfg3 = MCP_16MHz_1000kBPS_CFG3;
    183e:	12 e8       	ldi	r17, 0x82	; 130
        cfg3 = MCP_16MHz_500kBPS_CFG3;
        break;
        
        case (CAN_1000KBPS):
        cfg1 = MCP_16MHz_1000kBPS_CFG1;
        cfg2 = MCP_16MHz_1000kBPS_CFG2;
    1840:	00 ed       	ldi	r16, 0xD0	; 208
        cfg2 = MCP_16MHz_500kBPS_CFG2;
        cfg3 = MCP_16MHz_500kBPS_CFG3;
        break;
        
        case (CAN_1000KBPS):
        cfg1 = MCP_16MHz_1000kBPS_CFG1;
    1842:	40 e0       	ldi	r20, 0x00	; 0
        cfg2 = MCP_16MHz_1000kBPS_CFG2;
        cfg3 = MCP_16MHz_1000kBPS_CFG3;
        break;  
    1844:	09 c0       	rjmp	.+18     	; 0x1858 <_ZN7MCP_CAN18mcp2515_configRateEh+0x8e>
        mcp2515_setRegister(MCP_CNF2, cfg2);
        mcp2515_setRegister(MCP_CNF3, cfg3);
        return MCP2515_OK;
    }
    else {
        return MCP2515_FAIL;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	16 c0       	rjmp	.+44     	; 0x1876 <_ZN7MCP_CAN18mcp2515_configRateEh+0xac>
    switch (canSpeed) 
    {
        case (CAN_5KBPS):
        cfg1 = MCP_16MHz_5kBPS_CFG1;
        cfg2 = MCP_16MHz_5kBPS_CFG2;
        cfg3 = MCP_16MHz_5kBPS_CFG3;
    184a:	17 e8       	ldi	r17, 0x87	; 135
    set = 1;
    switch (canSpeed) 
    {
        case (CAN_5KBPS):
        cfg1 = MCP_16MHz_5kBPS_CFG1;
        cfg2 = MCP_16MHz_5kBPS_CFG2;
    184c:	0f ef       	ldi	r16, 0xFF	; 255
    INT8U set, cfg1, cfg2, cfg3;
    set = 1;
    switch (canSpeed) 
    {
        case (CAN_5KBPS):
        cfg1 = MCP_16MHz_5kBPS_CFG1;
    184e:	4f e3       	ldi	r20, 0x3F	; 63
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <_ZN7MCP_CAN18mcp2515_configRateEh+0x8e>
        break;

        case (CAN_10KBPS):
        cfg1 = MCP_16MHz_10kBPS_CFG1;
        cfg2 = MCP_16MHz_10kBPS_CFG2;
        cfg3 = MCP_16MHz_10kBPS_CFG3;
    1852:	17 e8       	ldi	r17, 0x87	; 135
        cfg3 = MCP_16MHz_5kBPS_CFG3;
        break;

        case (CAN_10KBPS):
        cfg1 = MCP_16MHz_10kBPS_CFG1;
        cfg2 = MCP_16MHz_10kBPS_CFG2;
    1854:	0f ef       	ldi	r16, 0xFF	; 255
        cfg2 = MCP_16MHz_5kBPS_CFG2;
        cfg3 = MCP_16MHz_5kBPS_CFG3;
        break;

        case (CAN_10KBPS):
        cfg1 = MCP_16MHz_10kBPS_CFG1;
    1856:	4f e1       	ldi	r20, 0x1F	; 31
        set = 0;
        break;
    }

    if (set) {
        mcp2515_setRegister(MCP_CNF1, cfg1);
    1858:	6a e2       	ldi	r22, 0x2A	; 42
    185a:	ce 01       	movw	r24, r28
    185c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
        mcp2515_setRegister(MCP_CNF2, cfg2);
    1860:	40 2f       	mov	r20, r16
    1862:	69 e2       	ldi	r22, 0x29	; 41
    1864:	ce 01       	movw	r24, r28
    1866:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
        mcp2515_setRegister(MCP_CNF3, cfg3);
    186a:	41 2f       	mov	r20, r17
    186c:	68 e2       	ldi	r22, 0x28	; 40
    186e:	ce 01       	movw	r24, r28
    1870:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
        return MCP2515_OK;
    1874:	80 e0       	ldi	r24, 0x00	; 0
    }
    else {
        return MCP2515_FAIL;
    }
}
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	08 95       	ret

00001880 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>:
/*********************************************************************************************************
** Function name:           mcp2515_initCANBuffers
** Descriptions:            init canbuffers
*********************************************************************************************************/
void MCP_CAN::mcp2515_initCANBuffers(void)
{
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
    //mcp2515_write_id(MCP_RXF5SIDH, std, ulFilt);

                                                                        /* Clear, deactivate the three  */
                                                                        /* transmit buffers             */
                                                                        /* TXBnCTRL -> TXBnD7           */
    a1 = MCP_TXB0CTRL;
    1888:	10 e3       	ldi	r17, 0x30	; 48
    a2 = MCP_TXB1CTRL;
    a3 = MCP_TXB2CTRL;
    for (i = 0; i < 14; i++) {                                          /* in-buffer loop               */
        mcp2515_setRegister(a1, 0);
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	61 2f       	mov	r22, r17
    188e:	ce 01       	movw	r24, r28
    1890:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    1894:	60 e1       	ldi	r22, 0x10	; 16
    1896:	61 0f       	add	r22, r17
        mcp2515_setRegister(a2, 0);
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	ce 01       	movw	r24, r28
    189c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    18a0:	60 e2       	ldi	r22, 0x20	; 32
    18a2:	61 0f       	add	r22, r17
        mcp2515_setRegister(a3, 0);
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	ce 01       	movw	r24, r28
    18a8:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
        a1++;
    18ac:	1f 5f       	subi	r17, 0xFF	; 255
                                                                        /* transmit buffers             */
                                                                        /* TXBnCTRL -> TXBnD7           */
    a1 = MCP_TXB0CTRL;
    a2 = MCP_TXB1CTRL;
    a3 = MCP_TXB2CTRL;
    for (i = 0; i < 14; i++) {                                          /* in-buffer loop               */
    18ae:	1e 33       	cpi	r17, 0x3E	; 62
    18b0:	61 f7       	brne	.-40     	; 0x188a <_ZN7MCP_CAN22mcp2515_initCANBuffersEv+0xa>
        mcp2515_setRegister(a3, 0);
        a1++;
        a2++;
        a3++;
    }
    mcp2515_setRegister(MCP_RXB0CTRL, 0);
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	60 e6       	ldi	r22, 0x60	; 96
    18b6:	ce 01       	movw	r24, r28
    18b8:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    mcp2515_setRegister(MCP_RXB1CTRL, 0);
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	60 e7       	ldi	r22, 0x70	; 112
    18c0:	ce 01       	movw	r24, r28
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
        a1++;
        a2++;
        a3++;
    }
    mcp2515_setRegister(MCP_RXB0CTRL, 0);
    mcp2515_setRegister(MCP_RXB1CTRL, 0);
    18c8:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>

000018cc <_ZN7MCP_CAN12mcp2515_initEh>:
/*********************************************************************************************************
** Function name:           mcp2515_init
** Descriptions:            init the device
*********************************************************************************************************/
INT8U MCP_CAN::mcp2515_init(const INT8U canSpeed)                       /* mcp2515init                  */
{
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	ec 01       	movw	r28, r24
    18d6:	06 2f       	mov	r16, r22

  INT8U res;

    mcp2515_reset();
    18d8:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7MCP_CAN13mcp2515_resetEv>

    res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
    18dc:	60 e8       	ldi	r22, 0x80	; 128
    18de:	ce 01       	movw	r24, r28
    18e0:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
    18e4:	18 2f       	mov	r17, r24
    if(res > 0)
    {
#if DEBUG_MODE
      Serial.print("Enter setting mode fall\r\n"); 
#else
      delay(10);
    18e6:	6a e0       	ldi	r22, 0x0A	; 10
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
  INT8U res;

    mcp2515_reset();

    res = mcp2515_setCANCTRL_Mode(MODE_CONFIG);
    if(res > 0)
    18ee:	11 11       	cpse	r17, r1
    18f0:	0c c0       	rjmp	.+24     	; 0x190a <_ZN7MCP_CAN12mcp2515_initEh+0x3e>
      return res;
    }
#if DEBUG_MODE
    Serial.print("Enter setting mode success \r\n");
#else
    delay(10);
    18f2:	0e 94 fe 07 	call	0xffc	; 0xffc <delay>
#endif

                                                                        /* set boadrate                 */
    if(mcp2515_configRate(canSpeed))
    18f6:	60 2f       	mov	r22, r16
    18f8:	ce 01       	movw	r24, r28
    18fa:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <_ZN7MCP_CAN18mcp2515_configRateEh>
    18fe:	88 23       	and	r24, r24
    1900:	39 f0       	breq	.+14     	; 0x1910 <_ZN7MCP_CAN12mcp2515_initEh+0x44>
    {
#if DEBUG_MODE
      Serial.print("set rate fall!!\r\n");
#else
      delay(10);
    1902:	6a e0       	ldi	r22, 0x0A	; 10
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 fe 07 	call	0xffc	; 0xffc <delay>
#endif
      return res;
    190e:	28 c0       	rjmp	.+80     	; 0x1960 <_ZN7MCP_CAN12mcp2515_initEh+0x94>
    }
#if DEBUG_MODE
    Serial.print("set rate success!!\r\n");
#else
    delay(10);
    1910:	6a e0       	ldi	r22, 0x0A	; 10
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 fe 07 	call	0xffc	; 0xffc <delay>
#endif

    if ( res == MCP2515_OK ) {

                                                                        /* init canbuffers              */
        mcp2515_initCANBuffers();
    191c:	ce 01       	movw	r24, r28
    191e:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>

                                                                        /* interrupt mode               */
        mcp2515_setRegister(MCP_CANINTE, MCP_RX0IF | MCP_RX1IF);
    1922:	43 e0       	ldi	r20, 0x03	; 3
    1924:	6b e2       	ldi	r22, 0x2B	; 43
    1926:	ce 01       	movw	r24, r28
    1928:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
                                                                        /* with std. and ext. identifie */
                                                                        /* rs                           */
                                                                        /* and enable rollover          */
        mcp2515_modifyRegister(MCP_RXB0CTRL,
        MCP_RXB_RX_MASK | MCP_RXB_BUKT_MASK,
        MCP_RXB_RX_STDEXT | MCP_RXB_BUKT_MASK );
    192c:	24 e0       	ldi	r18, 0x04	; 4
    192e:	44 e6       	ldi	r20, 0x64	; 100
    1930:	60 e6       	ldi	r22, 0x60	; 96
    1932:	ce 01       	movw	r24, r28
    1934:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
        mcp2515_modifyRegister(MCP_RXB1CTRL, MCP_RXB_RX_MASK,
        MCP_RXB_RX_STDEXT);
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	40 e6       	ldi	r20, 0x60	; 96
    193c:	60 e7       	ldi	r22, 0x70	; 112
    193e:	ce 01       	movw	r24, r28
    1940:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
#endif
                                                                        /* enter normal mode            */
        res = mcp2515_setCANCTRL_Mode(MODE_NORMAL);                                                                
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	ce 01       	movw	r24, r28
    1948:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
    194c:	c8 2f       	mov	r28, r24
        if(res)
    194e:	88 23       	and	r24, r24
    1950:	c1 f2       	breq	.-80     	; 0x1902 <_ZN7MCP_CAN12mcp2515_initEh+0x36>
        {
#if DEBUG_MODE        
          Serial.print("Enter Normal Mode Fall!!\r\n");
#else
            delay(10);
    1952:	6a e0       	ldi	r22, 0x0A	; 10
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 fe 07 	call	0xffc	; 0xffc <delay>
#endif           
          return res;
    195e:	1c 2f       	mov	r17, r28
#endif

    }
    return res;

}
    1960:	81 2f       	mov	r24, r17
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <_ZN7MCP_CAN16mcp2515_write_idEhhm>:
/*********************************************************************************************************
** Function name:           mcp2515_write_id
** Descriptions:            write can id
*********************************************************************************************************/
void MCP_CAN::mcp2515_write_id( const INT8U mcp_addr, const INT8U ext, const INT32U id )
{
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	00 d0       	rcall	.+0      	; 0x1976 <_ZN7MCP_CAN16mcp2515_write_idEhhm+0xa>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <_ZN7MCP_CAN16mcp2515_write_idEhhm+0xc>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    uint16_t canid;
    INT8U tbufdata[4];

    canid = (uint16_t)(id & 0x0FFFF);

    if ( ext == 1) 
    197c:	41 30       	cpi	r20, 0x01	; 1
    197e:	b1 f4       	brne	.+44     	; 0x19ac <_ZN7MCP_CAN16mcp2515_write_idEhhm+0x40>
    {
        tbufdata[MCP_EID0] = (INT8U) (canid & 0xFF);
    1980:	0c 83       	std	Y+4, r16	; 0x04
        tbufdata[MCP_EID8] = (INT8U) (canid >> 8);
    1982:	1b 83       	std	Y+3, r17	; 0x03
        canid = (uint16_t)(id >> 16);
    1984:	89 01       	movw	r16, r18
    1986:	22 27       	eor	r18, r18
    1988:	33 27       	eor	r19, r19
        tbufdata[MCP_SIDL] = (INT8U) (canid & 0x03);
        tbufdata[MCP_SIDL] += (INT8U) ((canid & 0x1C) << 3);
    198a:	50 2f       	mov	r21, r16
    198c:	5c 71       	andi	r21, 0x1C	; 28
    if ( ext == 1) 
    {
        tbufdata[MCP_EID0] = (INT8U) (canid & 0xFF);
        tbufdata[MCP_EID8] = (INT8U) (canid >> 8);
        canid = (uint16_t)(id >> 16);
        tbufdata[MCP_SIDL] = (INT8U) (canid & 0x03);
    198e:	40 2f       	mov	r20, r16
    1990:	43 70       	andi	r20, 0x03	; 3
        tbufdata[MCP_SIDL] += (INT8U) ((canid & 0x1C) << 3);
    1992:	78 e0       	ldi	r23, 0x08	; 8
    1994:	57 9f       	mul	r21, r23
    1996:	40 0d       	add	r20, r0
    1998:	11 24       	eor	r1, r1
        tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
    199a:	48 60       	ori	r20, 0x08	; 8
    199c:	4a 83       	std	Y+2, r20	; 0x02
        tbufdata[MCP_SIDH] = (INT8U) (canid >> 5 );
    199e:	55 e0       	ldi	r21, 0x05	; 5
    19a0:	16 95       	lsr	r17
    19a2:	07 95       	ror	r16
    19a4:	5a 95       	dec	r21
    19a6:	e1 f7       	brne	.-8      	; 0x19a0 <_ZN7MCP_CAN16mcp2515_write_idEhhm+0x34>
    19a8:	09 83       	std	Y+1, r16	; 0x01
    19aa:	0d c0       	rjmp	.+26     	; 0x19c6 <_ZN7MCP_CAN16mcp2515_write_idEhhm+0x5a>
    }
    else 
    {
        tbufdata[MCP_SIDH] = (INT8U) (canid >> 3 );
    19ac:	a8 01       	movw	r20, r16
    19ae:	23 e0       	ldi	r18, 0x03	; 3
    19b0:	56 95       	lsr	r21
    19b2:	47 95       	ror	r20
    19b4:	2a 95       	dec	r18
    19b6:	e1 f7       	brne	.-8      	; 0x19b0 <_ZN7MCP_CAN16mcp2515_write_idEhhm+0x44>
    19b8:	49 83       	std	Y+1, r20	; 0x01
        tbufdata[MCP_SIDL] = (INT8U) ((canid & 0x07 ) << 5);
    19ba:	02 95       	swap	r16
    19bc:	00 0f       	add	r16, r16
    19be:	00 7e       	andi	r16, 0xE0	; 224
    19c0:	0a 83       	std	Y+2, r16	; 0x02
        tbufdata[MCP_EID0] = 0;
    19c2:	1c 82       	std	Y+4, r1	; 0x04
        tbufdata[MCP_EID8] = 0;
    19c4:	1b 82       	std	Y+3, r1	; 0x03
    }
    mcp2515_setRegisterS( mcp_addr, tbufdata, 4 );
    19c6:	24 e0       	ldi	r18, 0x04	; 4
    19c8:	ae 01       	movw	r20, r28
    19ca:	4f 5f       	subi	r20, 0xFF	; 255
    19cc:	5f 4f       	sbci	r21, 0xFF	; 255
    19ce:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh>
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <_ZN7MCP_CAN15mcp2515_read_idEhPhPm>:
/*********************************************************************************************************
** Function name:           mcp2515_read_id
** Descriptions:            read can id
*********************************************************************************************************/
void MCP_CAN::mcp2515_read_id( const INT8U mcp_addr, INT8U* ext, INT32U* id )
{
    19e4:	ef 92       	push	r14
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <_ZN7MCP_CAN15mcp2515_read_idEhPhPm+0xe>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <_ZN7MCP_CAN15mcp2515_read_idEhPhPm+0x10>
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	7a 01       	movw	r14, r20
    19fa:	89 01       	movw	r16, r18
    INT8U tbufdata[4];

    *ext = 0;
    19fc:	fa 01       	movw	r30, r20
    19fe:	10 82       	st	Z, r1
    *id = 0;
    1a00:	f9 01       	movw	r30, r18
    1a02:	10 82       	st	Z, r1
    1a04:	11 82       	std	Z+1, r1	; 0x01
    1a06:	12 82       	std	Z+2, r1	; 0x02
    1a08:	13 82       	std	Z+3, r1	; 0x03

    mcp2515_readRegisterS( mcp_addr, tbufdata, 4 );
    1a0a:	24 e0       	ldi	r18, 0x04	; 4
    1a0c:	ae 01       	movw	r20, r28
    1a0e:	4f 5f       	subi	r20, 0xFF	; 255
    1a10:	5f 4f       	sbci	r21, 0xFF	; 255
    1a12:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh>

    *id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
    1a16:	2a 81       	ldd	r18, Y+2	; 0x02
    1a18:	39 81       	ldd	r19, Y+1	; 0x01
    1a1a:	82 2f       	mov	r24, r18
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	45 e0       	ldi	r20, 0x05	; 5
    1a20:	95 95       	asr	r25
    1a22:	87 95       	ror	r24
    1a24:	4a 95       	dec	r20
    1a26:	e1 f7       	brne	.-8      	; 0x1a20 <_ZN7MCP_CAN15mcp2515_read_idEhPhPm+0x3c>
    1a28:	f8 e0       	ldi	r31, 0x08	; 8
    1a2a:	3f 9f       	mul	r19, r31
    1a2c:	80 0d       	add	r24, r0
    1a2e:	91 1d       	adc	r25, r1
    1a30:	11 24       	eor	r1, r1
    1a32:	aa 27       	eor	r26, r26
    1a34:	97 fd       	sbrc	r25, 7
    1a36:	a0 95       	com	r26
    1a38:	ba 2f       	mov	r27, r26
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	80 83       	st	Z, r24
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	a2 83       	std	Z+2, r26	; 0x02
    1a42:	b3 83       	std	Z+3, r27	; 0x03

    if ( (tbufdata[MCP_SIDL] & MCP_TXB_EXIDE_M) ==  MCP_TXB_EXIDE_M ) 
    1a44:	23 ff       	sbrs	r18, 3
    1a46:	25 c0       	rjmp	.+74     	; 0x1a92 <_ZN7MCP_CAN15mcp2515_read_idEhPhPm+0xae>
    {
                                                                        /* extended id                  */
        *id = (*id<<2) + (tbufdata[MCP_SIDL] & 0x03);
    1a48:	62 e0       	ldi	r22, 0x02	; 2
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	aa 1f       	adc	r26, r26
    1a50:	bb 1f       	adc	r27, r27
    1a52:	6a 95       	dec	r22
    1a54:	d1 f7       	brne	.-12     	; 0x1a4a <_ZN7MCP_CAN15mcp2515_read_idEhPhPm+0x66>
    1a56:	23 70       	andi	r18, 0x03	; 3
    1a58:	82 0f       	add	r24, r18
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	a1 1d       	adc	r26, r1
    1a5e:	b1 1d       	adc	r27, r1
        *id = (*id<<8) + tbufdata[MCP_EID8];
    1a60:	ba 2f       	mov	r27, r26
    1a62:	a9 2f       	mov	r26, r25
    1a64:	98 2f       	mov	r25, r24
    1a66:	88 27       	eor	r24, r24
    1a68:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6a:	82 0f       	add	r24, r18
    1a6c:	91 1d       	adc	r25, r1
    1a6e:	a1 1d       	adc	r26, r1
    1a70:	b1 1d       	adc	r27, r1
        *id = (*id<<8) + tbufdata[MCP_EID0];
    1a72:	ba 2f       	mov	r27, r26
    1a74:	a9 2f       	mov	r26, r25
    1a76:	98 2f       	mov	r25, r24
    1a78:	88 27       	eor	r24, r24
    1a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7c:	82 0f       	add	r24, r18
    1a7e:	91 1d       	adc	r25, r1
    1a80:	a1 1d       	adc	r26, r1
    1a82:	b1 1d       	adc	r27, r1
    1a84:	80 83       	st	Z, r24
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	b3 83       	std	Z+3, r27	; 0x03
        *ext = 1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	f7 01       	movw	r30, r14
    1a90:	80 83       	st	Z, r24
    }
}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	ff 90       	pop	r15
    1aa4:	ef 90       	pop	r14
    1aa6:	08 95       	ret

00001aa8 <_ZN7MCP_CAN20mcp2515_write_canMsgEh>:
/*********************************************************************************************************
** Function name:           mcp2515_write_canMsg
** Descriptions:            write msg
*********************************************************************************************************/
void MCP_CAN::mcp2515_write_canMsg( const INT8U buffer_sidh_addr)
{
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	ec 01       	movw	r28, r24
    1ab4:	f6 2e       	mov	r15, r22
    INT8U mcp_addr;
    mcp_addr = buffer_sidh_addr;
    mcp2515_setRegisterS(mcp_addr+5, m_nDta, m_nDlc );                  /* write data bytes             */
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	4a 5f       	subi	r20, 0xFA	; 250
    1aba:	5f 4f       	sbci	r21, 0xFF	; 255
    1abc:	65 e0       	ldi	r22, 0x05	; 5
    1abe:	6f 0d       	add	r22, r15
    1ac0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh>
    if ( m_nRtr == 1)                                                   /* if RTR set bit in byte       */
    1ac6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	19 f4       	brne	.+6      	; 0x1ad2 <_ZN7MCP_CAN20mcp2515_write_canMsgEh+0x2a>
    {
        m_nDlc |= MCP_RTR_MASK;  
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	80 64       	ori	r24, 0x40	; 64
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    }
    mcp2515_setRegister((mcp_addr+4), m_nDlc );                        /* write the RTR and DLC        */
    1ad2:	64 e0       	ldi	r22, 0x04	; 4
    1ad4:	6f 0d       	add	r22, r15
    1ad6:	4d 81       	ldd	r20, Y+5	; 0x05
    1ad8:	ce 01       	movw	r24, r28
    1ada:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    mcp2515_write_id(mcp_addr, m_nExtFlg, m_nID );                     /* write CAN id                 */
    1ade:	09 81       	ldd	r16, Y+1	; 0x01
    1ae0:	1a 81       	ldd	r17, Y+2	; 0x02
    1ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae6:	48 81       	ld	r20, Y
    1ae8:	6f 2d       	mov	r22, r15
    1aea:	ce 01       	movw	r24, r28
    1aec:	0e 94 b6 0c 	call	0x196c	; 0x196c <_ZN7MCP_CAN16mcp2515_write_idEhhm>

}
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	ff 90       	pop	r15
    1afa:	08 95       	ret

00001afc <_ZN7MCP_CAN19mcp2515_read_canMsgEh>:
/*********************************************************************************************************
** Function name:           mcp2515_read_canMsg
** Descriptions:            read message
*********************************************************************************************************/
void MCP_CAN::mcp2515_read_canMsg( const INT8U buffer_sidh_addr)        /* read can msg                 */
{
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	ec 01       	movw	r28, r24
    1b06:	16 2f       	mov	r17, r22
    INT8U mcp_addr, ctrl;

    mcp_addr = buffer_sidh_addr;

    mcp2515_read_id( mcp_addr, &m_nExtFlg,&m_nID );
    1b08:	9c 01       	movw	r18, r24
    1b0a:	2f 5f       	subi	r18, 0xFF	; 255
    1b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0e:	ac 01       	movw	r20, r24
    1b10:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN7MCP_CAN15mcp2515_read_idEhPhPm>

    ctrl = mcp2515_readRegister( mcp_addr-1 );
    1b14:	6f ef       	ldi	r22, 0xFF	; 255
    1b16:	61 0f       	add	r22, r17
    1b18:	ce 01       	movw	r24, r28
    1b1a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    1b1e:	08 2f       	mov	r16, r24
    m_nDlc = mcp2515_readRegister( mcp_addr+4 );
    1b20:	64 e0       	ldi	r22, 0x04	; 4
    1b22:	61 0f       	add	r22, r17
    1b24:	ce 01       	movw	r24, r28
    1b26:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	8d 83       	std	Y+5, r24	; 0x05

    if ((ctrl & 0x08)) {
    1b2e:	03 ff       	sbrs	r16, 3
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <_ZN7MCP_CAN19mcp2515_read_canMsgEh+0x3c>
        m_nRtr = 1;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	8e 87       	std	Y+14, r24	; 0x0e
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <_ZN7MCP_CAN19mcp2515_read_canMsgEh+0x3e>
    }
    else {
        m_nRtr = 0;
    1b38:	1e 86       	std	Y+14, r1	; 0x0e
    }

    m_nDlc &= MCP_DLC_MASK;
    1b3a:	2f 70       	andi	r18, 0x0F	; 15
    1b3c:	2d 83       	std	Y+5, r18	; 0x05
    mcp2515_readRegisterS( mcp_addr+5, &(m_nDta[0]), m_nDlc );
    1b3e:	ae 01       	movw	r20, r28
    1b40:	4a 5f       	subi	r20, 0xFA	; 250
    1b42:	5f 4f       	sbci	r21, 0xFF	; 255
    1b44:	65 e0       	ldi	r22, 0x05	; 5
    1b46:	61 0f       	add	r22, r17
    1b48:	ce 01       	movw	r24, r28
}
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    else {
        m_nRtr = 0;
    }

    m_nDlc &= MCP_DLC_MASK;
    mcp2515_readRegisterS( mcp_addr+5, &(m_nDta[0]), m_nDlc );
    1b52:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh>

00001b56 <_ZN7MCP_CAN22mcp2515_start_transmitEh>:
** Function name:           sendMsg
** Descriptions:            send message
*********************************************************************************************************/
void MCP_CAN::mcp2515_start_transmit(const INT8U mcp_addr)              /* start transmit               */
{
    mcp2515_modifyRegister( mcp_addr-1 , MCP_TXB_TXREQ_M, MCP_TXB_TXREQ_M );
    1b56:	61 50       	subi	r22, 0x01	; 1
    1b58:	28 e0       	ldi	r18, 0x08	; 8
    1b5a:	48 e0       	ldi	r20, 0x08	; 8
    1b5c:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>

00001b60 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>:
/*********************************************************************************************************
** Function name:           sendMsg
** Descriptions:            send message
*********************************************************************************************************/
INT8U MCP_CAN::mcp2515_getNextFreeTXBuf(INT8U *txbuf_n)                 /* get Next free txbuf          */
{
    1b60:	9f 92       	push	r9
    1b62:	af 92       	push	r10
    1b64:	bf 92       	push	r11
    1b66:	cf 92       	push	r12
    1b68:	df 92       	push	r13
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x18>
    1b78:	1f 92       	push	r1
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	6c 01       	movw	r12, r24
    1b80:	7b 01       	movw	r14, r22
    INT8U res, i, ctrlval;
    INT8U ctrlregs[MCP_N_TXBUFFERS] = { MCP_TXB0CTRL, MCP_TXB1CTRL, MCP_TXB2CTRL };
    1b82:	80 e3       	ldi	r24, 0x30	; 48
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	80 e4       	ldi	r24, 0x40	; 64
    1b88:	8a 83       	std	Y+2, r24	; 0x02
    1b8a:	80 e5       	ldi	r24, 0x50	; 80
    1b8c:	8b 83       	std	Y+3, r24	; 0x03

    res = MCP_ALLTXBUSY;
    *txbuf_n = 0x00;
    1b8e:	fb 01       	movw	r30, r22
    1b90:	10 82       	st	Z, r1
    1b92:	8e 01       	movw	r16, r28
    1b94:	0f 5f       	subi	r16, 0xFF	; 255
    1b96:	1f 4f       	sbci	r17, 0xFF	; 255
    1b98:	5e 01       	movw	r10, r28
    1b9a:	f4 e0       	ldi	r31, 0x04	; 4
    1b9c:	af 0e       	add	r10, r31
    1b9e:	b1 1c       	adc	r11, r1

                                                                        /* check all 3 TX-Buffers       */
    for (i=0; i<MCP_N_TXBUFFERS; i++) {
        ctrlval = mcp2515_readRegister( ctrlregs[i] );
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	91 90       	ld	r9, Z+
    1ba4:	8f 01       	movw	r16, r30
    1ba6:	69 2d       	mov	r22, r9
    1ba8:	c6 01       	movw	r24, r12
    1baa:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
        if ( (ctrlval & MCP_TXB_TXREQ_M) == 0 ) {
    1bae:	98 2f       	mov	r25, r24
    1bb0:	98 70       	andi	r25, 0x08	; 8
    1bb2:	83 fd       	sbrc	r24, 3
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x5e>
            *txbuf_n = ctrlregs[i]+1;                                   /* return SIDH-address of Buffe */
    1bb6:	93 94       	inc	r9
    1bb8:	f7 01       	movw	r30, r14
    1bba:	90 82       	st	Z, r9
                                                                        /* r                            */
            res = MCP2515_OK;
            return res;                                                 /* ! function exit              */
    1bbc:	04 c0       	rjmp	.+8      	; 0x1bc6 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x66>

    res = MCP_ALLTXBUSY;
    *txbuf_n = 0x00;

                                                                        /* check all 3 TX-Buffers       */
    for (i=0; i<MCP_N_TXBUFFERS; i++) {
    1bbe:	0a 15       	cp	r16, r10
    1bc0:	1b 05       	cpc	r17, r11
    1bc2:	71 f7       	brne	.-36     	; 0x1ba0 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x40>
                                                                        /* r                            */
            res = MCP2515_OK;
            return res;                                                 /* ! function exit              */
        }
    }
    return res;
    1bc4:	92 e0       	ldi	r25, 0x02	; 2
}
    1bc6:	89 2f       	mov	r24, r25
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	9f 90       	pop	r9
    1be4:	08 95       	ret

00001be6 <_ZN7MCP_CANC1Eh>:

/*********************************************************************************************************
** Function name:           set CS
** Descriptions:            init CS pin and set UNSELECTED
*********************************************************************************************************/
MCP_CAN::MCP_CAN(INT8U _CS)
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	ec 01       	movw	r28, r24
    1bec:	86 2f       	mov	r24, r22
{
    SPICS = _CS;
    1bee:	68 8b       	std	Y+16, r22	; 0x10
    pinMode(SPICS, OUTPUT);
    1bf0:	61 e0       	ldi	r22, 0x01	; 1
    1bf2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <pinMode>
    MCP2515_UNSELECT();
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	88 89       	ldd	r24, Y+16	; 0x10
}
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
*********************************************************************************************************/
MCP_CAN::MCP_CAN(INT8U _CS)
{
    SPICS = _CS;
    pinMode(SPICS, OUTPUT);
    MCP2515_UNSELECT();
    1bfe:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <digitalWrite>

00001c02 <_ZN7MCP_CAN5beginEh>:
/*********************************************************************************************************
** Function name:           init
** Descriptions:            init can and set speed
*********************************************************************************************************/
INT8U MCP_CAN::begin(INT8U speedset)
{
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <_ZN7MCP_CAN5beginEh+0x6>
    1c08:	1f 92       	push	r1
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    INT8U res;

    SPI.begin();
    1c0e:	6b 83       	std	Y+3, r22	; 0x03
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <_ZN8SPIClass5beginEv>
    res = mcp2515_init(speedset);
    1c18:	6b 81       	ldd	r22, Y+3	; 0x03
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1e:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_ZN7MCP_CAN12mcp2515_initEh>
    if (res == MCP2515_OK) return CAN_OK;
    1c22:	91 e0       	ldi	r25, 0x01	; 1
    1c24:	81 11       	cpse	r24, r1
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <_ZN7MCP_CAN5beginEh+0x28>
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    else return CAN_FAILINIT;
}
    1c2a:	89 2f       	mov	r24, r25
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <_ZN7MCP_CAN6setMsgEmhhPh>:
/*********************************************************************************************************
** Function name:           setMsg
** Descriptions:            set can message, such as dlc, id, dta[] and so on
*********************************************************************************************************/
INT8U MCP_CAN::setMsg(INT32U id, INT8U ext, INT8U len, INT8U *pData)
{
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	fc 01       	movw	r30, r24
    int i = 0;
    m_nExtFlg = ext;
    1c44:	20 83       	st	Z, r18
    m_nID     = id;
    1c46:	41 83       	std	Z+1, r20	; 0x01
    1c48:	52 83       	std	Z+2, r21	; 0x02
    1c4a:	63 83       	std	Z+3, r22	; 0x03
    1c4c:	74 83       	std	Z+4, r23	; 0x04
    m_nDlc    = len;
    1c4e:	05 83       	std	Z+5, r16	; 0x05
    1c50:	d7 01       	movw	r26, r14
    for(i = 0; i<MAX_CHAR_IN_MESSAGE; i++)
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    {
        m_nDta[i] = *(pData+i);
    1c56:	2d 91       	ld	r18, X+
    1c58:	ef 01       	movw	r28, r30
    1c5a:	c8 0f       	add	r28, r24
    1c5c:	d9 1f       	adc	r29, r25
    1c5e:	2e 83       	std	Y+6, r18	; 0x06
{
    int i = 0;
    m_nExtFlg = ext;
    m_nID     = id;
    m_nDlc    = len;
    for(i = 0; i<MAX_CHAR_IN_MESSAGE; i++)
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	88 30       	cpi	r24, 0x08	; 8
    1c64:	91 05       	cpc	r25, r1
    1c66:	b9 f7       	brne	.-18     	; 0x1c56 <_ZN7MCP_CAN6setMsgEmhhPh+0x1e>
    {
        m_nDta[i] = *(pData+i);
    }
    return MCP2515_OK;
}
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	08 95       	ret

00001c76 <_ZN7MCP_CAN7sendMsgEv>:
/*********************************************************************************************************
** Function name:           sendMsg
** Descriptions:            send message
*********************************************************************************************************/
INT8U MCP_CAN::sendMsg()
{
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	1f 92       	push	r1
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	8c 01       	movw	r16, r24
    INT8U res, res1, txbuf_n;
    uint16_t uiTimeOut = 0;
    1c8a:	e1 2c       	mov	r14, r1
    1c8c:	f1 2c       	mov	r15, r1

    do {
        res = mcp2515_getNextFreeTXBuf(&txbuf_n);                       /* info = addr.                 */
    1c8e:	be 01       	movw	r22, r28
    1c90:	6f 5f       	subi	r22, 0xFF	; 255
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	c8 01       	movw	r24, r16
    1c96:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>
        uiTimeOut++;
    1c9a:	9f ef       	ldi	r25, 0xFF	; 255
    1c9c:	e9 1a       	sub	r14, r25
    1c9e:	f9 0a       	sbc	r15, r25
INT8U MCP_CAN::sendMsg()
{
    INT8U res, res1, txbuf_n;
    uint16_t uiTimeOut = 0;

    do {
    1ca0:	82 30       	cpi	r24, 0x02	; 2
    1ca2:	29 f4       	brne	.+10     	; 0x1cae <_ZN7MCP_CAN7sendMsgEv+0x38>
        res = mcp2515_getNextFreeTXBuf(&txbuf_n);                       /* info = addr.                 */
        uiTimeOut++;
    } while (res == MCP_ALLTXBUSY && (uiTimeOut < TIMEOUTVALUE));
    1ca4:	82 e3       	ldi	r24, 0x32	; 50
    1ca6:	e8 16       	cp	r14, r24
    1ca8:	f1 04       	cpc	r15, r1
    1caa:	89 f7       	brne	.-30     	; 0x1c8e <_ZN7MCP_CAN7sendMsgEv+0x18>
    1cac:	23 c0       	rjmp	.+70     	; 0x1cf4 <_ZN7MCP_CAN7sendMsgEv+0x7e>

    if(uiTimeOut == TIMEOUTVALUE) 
    1cae:	92 e3       	ldi	r25, 0x32	; 50
    1cb0:	e9 16       	cp	r14, r25
    1cb2:	f1 04       	cpc	r15, r1
    1cb4:	f9 f0       	breq	.+62     	; 0x1cf4 <_ZN7MCP_CAN7sendMsgEv+0x7e>
    {   
        return CAN_GETTXBFTIMEOUT;                                      /* get tx buff time out         */
    }
    uiTimeOut = 0;
    mcp2515_write_canMsg( txbuf_n);
    1cb6:	69 81       	ldd	r22, Y+1	; 0x01
    1cb8:	c8 01       	movw	r24, r16
    1cba:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN7MCP_CAN20mcp2515_write_canMsgEh>
    mcp2515_start_transmit( txbuf_n );
    1cbe:	69 81       	ldd	r22, Y+1	; 0x01
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN7MCP_CAN22mcp2515_start_transmitEh>

    if(uiTimeOut == TIMEOUTVALUE) 
    {   
        return CAN_GETTXBFTIMEOUT;                                      /* get tx buff time out         */
    }
    uiTimeOut = 0;
    1cc6:	e1 2c       	mov	r14, r1
    1cc8:	f1 2c       	mov	r15, r1
    mcp2515_write_canMsg( txbuf_n);
    mcp2515_start_transmit( txbuf_n );
    do
    {
        uiTimeOut++;        
    1cca:	8f ef       	ldi	r24, 0xFF	; 255
    1ccc:	e8 1a       	sub	r14, r24
    1cce:	f8 0a       	sbc	r15, r24
        res1= mcp2515_readRegister(txbuf_n);  			                /* read send buff ctrl reg 	*/
    1cd0:	69 81       	ldd	r22, Y+1	; 0x01
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
        return CAN_GETTXBFTIMEOUT;                                      /* get tx buff time out         */
    }
    uiTimeOut = 0;
    mcp2515_write_canMsg( txbuf_n);
    mcp2515_start_transmit( txbuf_n );
    do
    1cd8:	83 ff       	sbrs	r24, 3
    1cda:	06 c0       	rjmp	.+12     	; 0x1ce8 <_ZN7MCP_CAN7sendMsgEv+0x72>
    {
        uiTimeOut++;        
        res1= mcp2515_readRegister(txbuf_n);  			                /* read send buff ctrl reg 	*/
        res1 = res1 & 0x08;                               		
    }while(res1 && (uiTimeOut < TIMEOUTVALUE));   
    1cdc:	92 e3       	ldi	r25, 0x32	; 50
    1cde:	e9 16       	cp	r14, r25
    1ce0:	f1 04       	cpc	r15, r1
    1ce2:	99 f7       	brne	.-26     	; 0x1cca <_ZN7MCP_CAN7sendMsgEv+0x54>
    if(uiTimeOut == TIMEOUTVALUE)                                       /* send msg timeout             */	
    {
        return CAN_SENDMSGTIMEOUT;
    1ce4:	87 e0       	ldi	r24, 0x07	; 7
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <_ZN7MCP_CAN7sendMsgEv+0x80>
    {
        uiTimeOut++;        
        res1= mcp2515_readRegister(txbuf_n);  			                /* read send buff ctrl reg 	*/
        res1 = res1 & 0x08;                               		
    }while(res1 && (uiTimeOut < TIMEOUTVALUE));   
    if(uiTimeOut == TIMEOUTVALUE)                                       /* send msg timeout             */	
    1ce8:	82 e3       	ldi	r24, 0x32	; 50
    1cea:	e8 16       	cp	r14, r24
    1cec:	f1 04       	cpc	r15, r1
    1cee:	d1 f3       	breq	.-12     	; 0x1ce4 <_ZN7MCP_CAN7sendMsgEv+0x6e>
    {
        return CAN_SENDMSGTIMEOUT;
    }
    return CAN_OK;
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <_ZN7MCP_CAN7sendMsgEv+0x80>
        uiTimeOut++;
    } while (res == MCP_ALLTXBUSY && (uiTimeOut < TIMEOUTVALUE));

    if(uiTimeOut == TIMEOUTVALUE) 
    {   
        return CAN_GETTXBFTIMEOUT;                                      /* get tx buff time out         */
    1cf4:	86 e0       	ldi	r24, 0x06	; 6
    {
        return CAN_SENDMSGTIMEOUT;
    }
    return CAN_OK;

}
    1cf6:	0f 90       	pop	r0
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	08 95       	ret

00001d06 <_ZN7MCP_CAN10sendMsgBufEmhhPh>:
/*********************************************************************************************************
** Function name:           sendMsgBuf
** Descriptions:            send buf
*********************************************************************************************************/
INT8U MCP_CAN::sendMsgBuf(INT32U id, INT8U ext, INT8U len, INT8U *buf)
{
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	0f 93       	push	r16
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	ec 01       	movw	r28, r24
    setMsg(id, ext, len, buf);
    1d12:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN7MCP_CAN6setMsgEmhhPh>
    return sendMsg();
    1d16:	ce 01       	movw	r24, r28
}
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	0f 91       	pop	r16
    1d1e:	ff 90       	pop	r15
    1d20:	ef 90       	pop	r14
** Descriptions:            send buf
*********************************************************************************************************/
INT8U MCP_CAN::sendMsgBuf(INT32U id, INT8U ext, INT8U len, INT8U *buf)
{
    setMsg(id, ext, len, buf);
    return sendMsg();
    1d22:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <_ZN7MCP_CAN7sendMsgEv>

00001d26 <_ZN7MCP_CAN7readMsgEv>:
/*********************************************************************************************************
** Function name:           readMsg
** Descriptions:            read message
*********************************************************************************************************/
INT8U MCP_CAN::readMsg()
{
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	ec 01       	movw	r28, r24
    INT8U stat, res;

    stat = mcp2515_readStatus();
    1d2c:	0e 94 b5 0b 	call	0x176a	; 0x176a <_ZN7MCP_CAN18mcp2515_readStatusEv>

    if ( stat & MCP_STAT_RX0IF )                                        /* Msg in Buffer 0              */
    1d30:	80 ff       	sbrs	r24, 0
    1d32:	07 c0       	rjmp	.+14     	; 0x1d42 <_ZN7MCP_CAN7readMsgEv+0x1c>
    {
        mcp2515_read_canMsg( MCP_RXBUF_0);
    1d34:	61 e6       	ldi	r22, 0x61	; 97
    1d36:	ce 01       	movw	r24, r28
    1d38:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7MCP_CAN19mcp2515_read_canMsgEh>
        mcp2515_modifyRegister(MCP_CANINTF, MCP_RX0IF, 0);
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	08 c0       	rjmp	.+16     	; 0x1d52 <_ZN7MCP_CAN7readMsgEv+0x2c>
        res = CAN_OK;
    }
    else if ( stat & MCP_STAT_RX1IF )                                   /* Msg in Buffer 1              */
    1d42:	81 ff       	sbrs	r24, 1
    1d44:	0c c0       	rjmp	.+24     	; 0x1d5e <_ZN7MCP_CAN7readMsgEv+0x38>
    {
        mcp2515_read_canMsg( MCP_RXBUF_1);
    1d46:	61 e7       	ldi	r22, 0x71	; 113
    1d48:	ce 01       	movw	r24, r28
    1d4a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7MCP_CAN19mcp2515_read_canMsgEh>
        mcp2515_modifyRegister(MCP_CANINTF, MCP_RX1IF, 0);
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	42 e0       	ldi	r20, 0x02	; 2
    1d52:	6c e2       	ldi	r22, 0x2C	; 44
    1d54:	ce 01       	movw	r24, r28
    1d56:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <_ZN7MCP_CAN7readMsgEv+0x3a>
        res = CAN_OK;
    }
    else 
    {
        res = CAN_NOMSG;
    1d5e:	84 e0       	ldi	r24, 0x04	; 4
    }
    return res;
}
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	08 95       	ret

00001d66 <_ZN7MCP_CAN12readMsgBufIDEPmPhS1_>:
/*********************************************************************************************************
** Function name:           readMsgBufID
** Descriptions:            read message buf and can bus source ID
*********************************************************************************************************/
INT8U MCP_CAN::readMsgBufID(INT32U *ID, INT8U *len, INT8U buf[])
{
    1d66:	cf 92       	push	r12
    1d68:	df 92       	push	r13
    1d6a:	ef 92       	push	r14
    1d6c:	ff 92       	push	r15
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <_ZN7MCP_CAN12readMsgBufIDEPmPhS1_+0x12>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	6c 01       	movw	r12, r24
    1d7e:	7b 01       	movw	r14, r22
    1d80:	8a 01       	movw	r16, r20
    INT8U rc;
    rc = readMsg();
    1d82:	29 83       	std	Y+1, r18	; 0x01
    1d84:	3a 83       	std	Y+2, r19	; 0x02
    1d86:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN7MCP_CAN7readMsgEv>

    if (rc == CAN_OK) {
    1d8a:	29 81       	ldd	r18, Y+1	; 0x01
    1d8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d8e:	81 11       	cpse	r24, r1
    1d90:	28 c0       	rjmp	.+80     	; 0x1de2 <_ZN7MCP_CAN12readMsgBufIDEPmPhS1_+0x7c>
       *len = m_nDlc;
    1d92:	d6 01       	movw	r26, r12
    1d94:	15 96       	adiw	r26, 0x05	; 5
    1d96:	9c 91       	ld	r25, X
    1d98:	15 97       	sbiw	r26, 0x05	; 5
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	90 83       	st	Z, r25
       *ID  = m_nID;
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	4d 91       	ld	r20, X+
    1da2:	5d 91       	ld	r21, X+
    1da4:	6d 91       	ld	r22, X+
    1da6:	7c 91       	ld	r23, X
    1da8:	14 97       	sbiw	r26, 0x04	; 4
    1daa:	d7 01       	movw	r26, r14
    1dac:	4d 93       	st	X+, r20
    1dae:	5d 93       	st	X+, r21
    1db0:	6d 93       	st	X+, r22
    1db2:	7c 93       	st	X, r23
    1db4:	13 97       	sbiw	r26, 0x03	; 3
    1db6:	f9 01       	movw	r30, r18
       for(int i = 0; i<m_nDlc && i < MAX_CHAR_IN_MESSAGE; i++) {
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	d6 01       	movw	r26, r12
    1dbe:	15 96       	adiw	r26, 0x05	; 5
    1dc0:	4c 91       	ld	r20, X
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	24 17       	cp	r18, r20
    1dc6:	35 07       	cpc	r19, r21
    1dc8:	74 f4       	brge	.+28     	; 0x1de6 <_ZN7MCP_CAN12readMsgBufIDEPmPhS1_+0x80>
    1dca:	28 30       	cpi	r18, 0x08	; 8
    1dcc:	31 05       	cpc	r19, r1
    1dce:	59 f0       	breq	.+22     	; 0x1de6 <_ZN7MCP_CAN12readMsgBufIDEPmPhS1_+0x80>
    1dd0:	d6 01       	movw	r26, r12
    1dd2:	a2 0f       	add	r26, r18
    1dd4:	b3 1f       	adc	r27, r19
          buf[i] = m_nDta[i];
    1dd6:	16 96       	adiw	r26, 0x06	; 6
    1dd8:	9c 91       	ld	r25, X
    1dda:	91 93       	st	Z+, r25
    rc = readMsg();

    if (rc == CAN_OK) {
       *len = m_nDlc;
       *ID  = m_nID;
       for(int i = 0; i<m_nDlc && i < MAX_CHAR_IN_MESSAGE; i++) {
    1ddc:	2f 5f       	subi	r18, 0xFF	; 255
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	ed cf       	rjmp	.-38     	; 0x1dbc <_ZN7MCP_CAN12readMsgBufIDEPmPhS1_+0x56>
          buf[i] = m_nDta[i];
       }
    } else {
       *len = 0;
    1de2:	f8 01       	movw	r30, r16
    1de4:	10 82       	st	Z, r1
    }
    return rc;
}
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	cf 90       	pop	r12
    1dfa:	08 95       	ret

00001dfc <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    1dfc:	cf 93       	push	r28
  uint8_t sreg = SREG;
    1dfe:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1e00:	f8 94       	cli
  if (!initialized) {
    1e02:	80 91 6f 03 	lds	r24, 0x036F
    1e06:	81 11       	cpse	r24, r1
    1e08:	16 c0       	rjmp	.+44     	; 0x1e36 <_ZN8SPIClass5beginEv+0x3a>
    // Set SS to high so a connected chip will be "deselected" by default
    digitalWrite(SS, HIGH);
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	8a e0       	ldi	r24, 0x0A	; 10
    1e0e:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <digitalWrite>

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	8a e0       	ldi	r24, 0x0A	; 10
    1e16:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1e1a:	8c b5       	in	r24, 0x2c	; 44
    1e1c:	80 61       	ori	r24, 0x10	; 16
    1e1e:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1e20:	8c b5       	in	r24, 0x2c	; 44
    1e22:	80 64       	ori	r24, 0x40	; 64
    1e24:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1e26:	61 e0       	ldi	r22, 0x01	; 1
    1e28:	8d e0       	ldi	r24, 0x0D	; 13
    1e2a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <pinMode>
    pinMode(MOSI, OUTPUT);
    1e2e:	61 e0       	ldi	r22, 0x01	; 1
    1e30:	8b e0       	ldi	r24, 0x0B	; 11
    1e32:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <pinMode>
  }
  initialized++; // reference count
    1e36:	80 91 6f 03 	lds	r24, 0x036F
    1e3a:	8f 5f       	subi	r24, 0xFF	; 255
    1e3c:	80 93 6f 03 	sts	0x036F, r24
  SREG = sreg;
    1e40:	cf bf       	out	0x3f, r28	; 63
}
    1e42:	cf 91       	pop	r28
    1e44:	08 95       	ret

00001e46 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	81 f0       	breq	.+32     	; 0x1e6a <turnOffPWM+0x24>
    1e4a:	28 f4       	brcc	.+10     	; 0x1e56 <turnOffPWM+0x10>
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	99 f0       	breq	.+38     	; 0x1e76 <turnOffPWM+0x30>
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	a1 f0       	breq	.+40     	; 0x1e7c <turnOffPWM+0x36>
    1e54:	08 95       	ret
    1e56:	87 30       	cpi	r24, 0x07	; 7
    1e58:	a9 f0       	breq	.+42     	; 0x1e84 <turnOffPWM+0x3e>
    1e5a:	88 30       	cpi	r24, 0x08	; 8
    1e5c:	b9 f0       	breq	.+46     	; 0x1e8c <turnOffPWM+0x46>
    1e5e:	84 30       	cpi	r24, 0x04	; 4
    1e60:	d1 f4       	brne	.+52     	; 0x1e96 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1e62:	80 91 80 00 	lds	r24, 0x0080
    1e66:	8f 7d       	andi	r24, 0xDF	; 223
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1e6a:	80 91 80 00 	lds	r24, 0x0080
    1e6e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1e70:	80 93 80 00 	sts	0x0080, r24
    1e74:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1e76:	84 b5       	in	r24, 0x24	; 36
    1e78:	8f 77       	andi	r24, 0x7F	; 127
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1e7c:	84 b5       	in	r24, 0x24	; 36
    1e7e:	8f 7d       	andi	r24, 0xDF	; 223
    1e80:	84 bd       	out	0x24, r24	; 36
    1e82:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1e84:	80 91 b0 00 	lds	r24, 0x00B0
    1e88:	8f 77       	andi	r24, 0x7F	; 127
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1e8c:	80 91 b0 00 	lds	r24, 0x00B0
    1e90:	8f 7d       	andi	r24, 0xDF	; 223
    1e92:	80 93 b0 00 	sts	0x00B0, r24
    1e96:	08 95       	ret

00001e98 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	e6 56       	subi	r30, 0x66	; 102
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e2 55       	subi	r30, 0x52	; 82
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1eae:	88 23       	and	r24, r24
    1eb0:	49 f1       	breq	.+82     	; 0x1f04 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	fc 01       	movw	r30, r24
    1eba:	e4 53       	subi	r30, 0x34	; 52
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	a5 91       	lpm	r26, Z+
    1ec0:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    1ec2:	8e 53       	subi	r24, 0x3E	; 62
    1ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	c5 91       	lpm	r28, Z+
    1eca:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    1ecc:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    1ece:	61 11       	cpse	r22, r1
    1ed0:	08 c0       	rjmp	.+16     	; 0x1ee2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
    1ed2:	f8 94       	cli
		*reg &= ~bit;
    1ed4:	8c 91       	ld	r24, X
    1ed6:	20 95       	com	r18
    1ed8:	82 23       	and	r24, r18
    1eda:	8c 93       	st	X, r24
		*out &= ~bit;
    1edc:	88 81       	ld	r24, Y
    1ede:	82 23       	and	r24, r18
    1ee0:	0a c0       	rjmp	.+20     	; 0x1ef6 <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1ee2:	62 30       	cpi	r22, 0x02	; 2
    1ee4:	51 f4       	brne	.+20     	; 0x1efa <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
    1ee6:	f8 94       	cli
		*reg &= ~bit;
    1ee8:	8c 91       	ld	r24, X
    1eea:	32 2f       	mov	r19, r18
    1eec:	30 95       	com	r19
    1eee:	83 23       	and	r24, r19
    1ef0:	8c 93       	st	X, r24
		*out |= bit;
    1ef2:	88 81       	ld	r24, Y
    1ef4:	82 2b       	or	r24, r18
    1ef6:	88 83       	st	Y, r24
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
    1efa:	f8 94       	cli
		*reg |= bit;
    1efc:	8c 91       	ld	r24, X
    1efe:	82 2b       	or	r24, r18
    1f00:	8c 93       	st	X, r24
		SREG = oldSREG;
    1f02:	9f bf       	out	0x3f, r25	; 63
	}
}
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	08 95       	ret

00001f0a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	1f 92       	push	r1
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	f9 01       	movw	r30, r18
    1f1e:	ea 57       	subi	r30, 0x7A	; 122
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1f24:	f9 01       	movw	r30, r18
    1f26:	e6 56       	subi	r30, 0x66	; 102
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	e2 55       	subi	r30, 0x52	; 82
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1f34:	00 23       	and	r16, r16
    1f36:	c9 f0       	breq	.+50     	; 0x1f6a <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1f38:	88 23       	and	r24, r24
    1f3a:	21 f0       	breq	.+8      	; 0x1f44 <digitalWrite+0x3a>
    1f3c:	69 83       	std	Y+1, r22	; 0x01
    1f3e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <turnOffPWM>
    1f42:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    1f44:	e0 2f       	mov	r30, r16
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	ee 0f       	add	r30, r30
    1f4a:	ff 1f       	adc	r31, r31
    1f4c:	ee 53       	subi	r30, 0x3E	; 62
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	a5 91       	lpm	r26, Z+
    1f52:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1f54:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1f56:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    1f58:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    1f5a:	61 11       	cpse	r22, r1
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <digitalWrite+0x5a>
		*out &= ~bit;
    1f5e:	10 95       	com	r17
    1f60:	81 23       	and	r24, r17
    1f62:	01 c0       	rjmp	.+2      	; 0x1f66 <digitalWrite+0x5c>
	} else {
		*out |= bit;
    1f64:	81 2b       	or	r24, r17
    1f66:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1f68:	9f bf       	out	0x3f, r25	; 63
}
    1f6a:	0f 90       	pop	r0
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <__subsf3>:
    1f76:	50 58       	subi	r21, 0x80	; 128

00001f78 <__addsf3>:
    1f78:	bb 27       	eor	r27, r27
    1f7a:	aa 27       	eor	r26, r26
    1f7c:	0e d0       	rcall	.+28     	; 0x1f9a <__addsf3x>
    1f7e:	44 c1       	rjmp	.+648    	; 0x2208 <__fp_round>
    1f80:	35 d1       	rcall	.+618    	; 0x21ec <__fp_pscA>
    1f82:	30 f0       	brcs	.+12     	; 0x1f90 <__addsf3+0x18>
    1f84:	3a d1       	rcall	.+628    	; 0x21fa <__fp_pscB>
    1f86:	20 f0       	brcs	.+8      	; 0x1f90 <__addsf3+0x18>
    1f88:	31 f4       	brne	.+12     	; 0x1f96 <__addsf3+0x1e>
    1f8a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <__addsf3+0x1a>
    1f8e:	1e f4       	brtc	.+6      	; 0x1f96 <__addsf3+0x1e>
    1f90:	2a c1       	rjmp	.+596    	; 0x21e6 <__fp_nan>
    1f92:	0e f4       	brtc	.+2      	; 0x1f96 <__addsf3+0x1e>
    1f94:	e0 95       	com	r30
    1f96:	e7 fb       	bst	r30, 7
    1f98:	20 c1       	rjmp	.+576    	; 0x21da <__fp_inf>

00001f9a <__addsf3x>:
    1f9a:	e9 2f       	mov	r30, r25
    1f9c:	46 d1       	rcall	.+652    	; 0x222a <__fp_split3>
    1f9e:	80 f3       	brcs	.-32     	; 0x1f80 <__addsf3+0x8>
    1fa0:	ba 17       	cp	r27, r26
    1fa2:	62 07       	cpc	r22, r18
    1fa4:	73 07       	cpc	r23, r19
    1fa6:	84 07       	cpc	r24, r20
    1fa8:	95 07       	cpc	r25, r21
    1faa:	18 f0       	brcs	.+6      	; 0x1fb2 <__addsf3x+0x18>
    1fac:	71 f4       	brne	.+28     	; 0x1fca <__addsf3x+0x30>
    1fae:	9e f5       	brtc	.+102    	; 0x2016 <__addsf3x+0x7c>
    1fb0:	5e c1       	rjmp	.+700    	; 0x226e <__fp_zero>
    1fb2:	0e f4       	brtc	.+2      	; 0x1fb6 <__addsf3x+0x1c>
    1fb4:	e0 95       	com	r30
    1fb6:	0b 2e       	mov	r0, r27
    1fb8:	ba 2f       	mov	r27, r26
    1fba:	a0 2d       	mov	r26, r0
    1fbc:	0b 01       	movw	r0, r22
    1fbe:	b9 01       	movw	r22, r18
    1fc0:	90 01       	movw	r18, r0
    1fc2:	0c 01       	movw	r0, r24
    1fc4:	ca 01       	movw	r24, r20
    1fc6:	a0 01       	movw	r20, r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	ff 27       	eor	r31, r31
    1fcc:	59 1b       	sub	r21, r25
    1fce:	99 f0       	breq	.+38     	; 0x1ff6 <__addsf3x+0x5c>
    1fd0:	59 3f       	cpi	r21, 0xF9	; 249
    1fd2:	50 f4       	brcc	.+20     	; 0x1fe8 <__addsf3x+0x4e>
    1fd4:	50 3e       	cpi	r21, 0xE0	; 224
    1fd6:	68 f1       	brcs	.+90     	; 0x2032 <__addsf3x+0x98>
    1fd8:	1a 16       	cp	r1, r26
    1fda:	f0 40       	sbci	r31, 0x00	; 0
    1fdc:	a2 2f       	mov	r26, r18
    1fde:	23 2f       	mov	r18, r19
    1fe0:	34 2f       	mov	r19, r20
    1fe2:	44 27       	eor	r20, r20
    1fe4:	58 5f       	subi	r21, 0xF8	; 248
    1fe6:	f3 cf       	rjmp	.-26     	; 0x1fce <__addsf3x+0x34>
    1fe8:	46 95       	lsr	r20
    1fea:	37 95       	ror	r19
    1fec:	27 95       	ror	r18
    1fee:	a7 95       	ror	r26
    1ff0:	f0 40       	sbci	r31, 0x00	; 0
    1ff2:	53 95       	inc	r21
    1ff4:	c9 f7       	brne	.-14     	; 0x1fe8 <__addsf3x+0x4e>
    1ff6:	7e f4       	brtc	.+30     	; 0x2016 <__addsf3x+0x7c>
    1ff8:	1f 16       	cp	r1, r31
    1ffa:	ba 0b       	sbc	r27, r26
    1ffc:	62 0b       	sbc	r22, r18
    1ffe:	73 0b       	sbc	r23, r19
    2000:	84 0b       	sbc	r24, r20
    2002:	ba f0       	brmi	.+46     	; 0x2032 <__addsf3x+0x98>
    2004:	91 50       	subi	r25, 0x01	; 1
    2006:	a1 f0       	breq	.+40     	; 0x2030 <__addsf3x+0x96>
    2008:	ff 0f       	add	r31, r31
    200a:	bb 1f       	adc	r27, r27
    200c:	66 1f       	adc	r22, r22
    200e:	77 1f       	adc	r23, r23
    2010:	88 1f       	adc	r24, r24
    2012:	c2 f7       	brpl	.-16     	; 0x2004 <__addsf3x+0x6a>
    2014:	0e c0       	rjmp	.+28     	; 0x2032 <__addsf3x+0x98>
    2016:	ba 0f       	add	r27, r26
    2018:	62 1f       	adc	r22, r18
    201a:	73 1f       	adc	r23, r19
    201c:	84 1f       	adc	r24, r20
    201e:	48 f4       	brcc	.+18     	; 0x2032 <__addsf3x+0x98>
    2020:	87 95       	ror	r24
    2022:	77 95       	ror	r23
    2024:	67 95       	ror	r22
    2026:	b7 95       	ror	r27
    2028:	f7 95       	ror	r31
    202a:	9e 3f       	cpi	r25, 0xFE	; 254
    202c:	08 f0       	brcs	.+2      	; 0x2030 <__addsf3x+0x96>
    202e:	b3 cf       	rjmp	.-154    	; 0x1f96 <__addsf3+0x1e>
    2030:	93 95       	inc	r25
    2032:	88 0f       	add	r24, r24
    2034:	08 f0       	brcs	.+2      	; 0x2038 <__addsf3x+0x9e>
    2036:	99 27       	eor	r25, r25
    2038:	ee 0f       	add	r30, r30
    203a:	97 95       	ror	r25
    203c:	87 95       	ror	r24
    203e:	08 95       	ret

00002040 <__cmpsf2>:
    2040:	a8 d0       	rcall	.+336    	; 0x2192 <__fp_cmp>
    2042:	08 f4       	brcc	.+2      	; 0x2046 <__cmpsf2+0x6>
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	08 95       	ret

00002048 <__divsf3>:
    2048:	0c d0       	rcall	.+24     	; 0x2062 <__divsf3x>
    204a:	de c0       	rjmp	.+444    	; 0x2208 <__fp_round>
    204c:	d6 d0       	rcall	.+428    	; 0x21fa <__fp_pscB>
    204e:	40 f0       	brcs	.+16     	; 0x2060 <__divsf3+0x18>
    2050:	cd d0       	rcall	.+410    	; 0x21ec <__fp_pscA>
    2052:	30 f0       	brcs	.+12     	; 0x2060 <__divsf3+0x18>
    2054:	21 f4       	brne	.+8      	; 0x205e <__divsf3+0x16>
    2056:	5f 3f       	cpi	r21, 0xFF	; 255
    2058:	19 f0       	breq	.+6      	; 0x2060 <__divsf3+0x18>
    205a:	bf c0       	rjmp	.+382    	; 0x21da <__fp_inf>
    205c:	51 11       	cpse	r21, r1
    205e:	08 c1       	rjmp	.+528    	; 0x2270 <__fp_szero>
    2060:	c2 c0       	rjmp	.+388    	; 0x21e6 <__fp_nan>

00002062 <__divsf3x>:
    2062:	e3 d0       	rcall	.+454    	; 0x222a <__fp_split3>
    2064:	98 f3       	brcs	.-26     	; 0x204c <__divsf3+0x4>

00002066 <__divsf3_pse>:
    2066:	99 23       	and	r25, r25
    2068:	c9 f3       	breq	.-14     	; 0x205c <__divsf3+0x14>
    206a:	55 23       	and	r21, r21
    206c:	b1 f3       	breq	.-20     	; 0x205a <__divsf3+0x12>
    206e:	95 1b       	sub	r25, r21
    2070:	55 0b       	sbc	r21, r21
    2072:	bb 27       	eor	r27, r27
    2074:	aa 27       	eor	r26, r26
    2076:	62 17       	cp	r22, r18
    2078:	73 07       	cpc	r23, r19
    207a:	84 07       	cpc	r24, r20
    207c:	38 f0       	brcs	.+14     	; 0x208c <__divsf3_pse+0x26>
    207e:	9f 5f       	subi	r25, 0xFF	; 255
    2080:	5f 4f       	sbci	r21, 0xFF	; 255
    2082:	22 0f       	add	r18, r18
    2084:	33 1f       	adc	r19, r19
    2086:	44 1f       	adc	r20, r20
    2088:	aa 1f       	adc	r26, r26
    208a:	a9 f3       	breq	.-22     	; 0x2076 <__divsf3_pse+0x10>
    208c:	33 d0       	rcall	.+102    	; 0x20f4 <__divsf3_pse+0x8e>
    208e:	0e 2e       	mov	r0, r30
    2090:	3a f0       	brmi	.+14     	; 0x20a0 <__divsf3_pse+0x3a>
    2092:	e0 e8       	ldi	r30, 0x80	; 128
    2094:	30 d0       	rcall	.+96     	; 0x20f6 <__divsf3_pse+0x90>
    2096:	91 50       	subi	r25, 0x01	; 1
    2098:	50 40       	sbci	r21, 0x00	; 0
    209a:	e6 95       	lsr	r30
    209c:	00 1c       	adc	r0, r0
    209e:	ca f7       	brpl	.-14     	; 0x2092 <__divsf3_pse+0x2c>
    20a0:	29 d0       	rcall	.+82     	; 0x20f4 <__divsf3_pse+0x8e>
    20a2:	fe 2f       	mov	r31, r30
    20a4:	27 d0       	rcall	.+78     	; 0x20f4 <__divsf3_pse+0x8e>
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	bb 1f       	adc	r27, r27
    20ae:	26 17       	cp	r18, r22
    20b0:	37 07       	cpc	r19, r23
    20b2:	48 07       	cpc	r20, r24
    20b4:	ab 07       	cpc	r26, r27
    20b6:	b0 e8       	ldi	r27, 0x80	; 128
    20b8:	09 f0       	breq	.+2      	; 0x20bc <__divsf3_pse+0x56>
    20ba:	bb 0b       	sbc	r27, r27
    20bc:	80 2d       	mov	r24, r0
    20be:	bf 01       	movw	r22, r30
    20c0:	ff 27       	eor	r31, r31
    20c2:	93 58       	subi	r25, 0x83	; 131
    20c4:	5f 4f       	sbci	r21, 0xFF	; 255
    20c6:	2a f0       	brmi	.+10     	; 0x20d2 <__divsf3_pse+0x6c>
    20c8:	9e 3f       	cpi	r25, 0xFE	; 254
    20ca:	51 05       	cpc	r21, r1
    20cc:	68 f0       	brcs	.+26     	; 0x20e8 <__divsf3_pse+0x82>
    20ce:	85 c0       	rjmp	.+266    	; 0x21da <__fp_inf>
    20d0:	cf c0       	rjmp	.+414    	; 0x2270 <__fp_szero>
    20d2:	5f 3f       	cpi	r21, 0xFF	; 255
    20d4:	ec f3       	brlt	.-6      	; 0x20d0 <__divsf3_pse+0x6a>
    20d6:	98 3e       	cpi	r25, 0xE8	; 232
    20d8:	dc f3       	brlt	.-10     	; 0x20d0 <__divsf3_pse+0x6a>
    20da:	86 95       	lsr	r24
    20dc:	77 95       	ror	r23
    20de:	67 95       	ror	r22
    20e0:	b7 95       	ror	r27
    20e2:	f7 95       	ror	r31
    20e4:	9f 5f       	subi	r25, 0xFF	; 255
    20e6:	c9 f7       	brne	.-14     	; 0x20da <__divsf3_pse+0x74>
    20e8:	88 0f       	add	r24, r24
    20ea:	91 1d       	adc	r25, r1
    20ec:	96 95       	lsr	r25
    20ee:	87 95       	ror	r24
    20f0:	97 f9       	bld	r25, 7
    20f2:	08 95       	ret
    20f4:	e1 e0       	ldi	r30, 0x01	; 1
    20f6:	66 0f       	add	r22, r22
    20f8:	77 1f       	adc	r23, r23
    20fa:	88 1f       	adc	r24, r24
    20fc:	bb 1f       	adc	r27, r27
    20fe:	62 17       	cp	r22, r18
    2100:	73 07       	cpc	r23, r19
    2102:	84 07       	cpc	r24, r20
    2104:	ba 07       	cpc	r27, r26
    2106:	20 f0       	brcs	.+8      	; 0x2110 <__divsf3_pse+0xaa>
    2108:	62 1b       	sub	r22, r18
    210a:	73 0b       	sbc	r23, r19
    210c:	84 0b       	sbc	r24, r20
    210e:	ba 0b       	sbc	r27, r26
    2110:	ee 1f       	adc	r30, r30
    2112:	88 f7       	brcc	.-30     	; 0x20f6 <__divsf3_pse+0x90>
    2114:	e0 95       	com	r30
    2116:	08 95       	ret

00002118 <__floatunsisf>:
    2118:	e8 94       	clt
    211a:	09 c0       	rjmp	.+18     	; 0x212e <__floatsisf+0x12>

0000211c <__floatsisf>:
    211c:	97 fb       	bst	r25, 7
    211e:	3e f4       	brtc	.+14     	; 0x212e <__floatsisf+0x12>
    2120:	90 95       	com	r25
    2122:	80 95       	com	r24
    2124:	70 95       	com	r23
    2126:	61 95       	neg	r22
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	8f 4f       	sbci	r24, 0xFF	; 255
    212c:	9f 4f       	sbci	r25, 0xFF	; 255
    212e:	99 23       	and	r25, r25
    2130:	a9 f0       	breq	.+42     	; 0x215c <__floatsisf+0x40>
    2132:	f9 2f       	mov	r31, r25
    2134:	96 e9       	ldi	r25, 0x96	; 150
    2136:	bb 27       	eor	r27, r27
    2138:	93 95       	inc	r25
    213a:	f6 95       	lsr	r31
    213c:	87 95       	ror	r24
    213e:	77 95       	ror	r23
    2140:	67 95       	ror	r22
    2142:	b7 95       	ror	r27
    2144:	f1 11       	cpse	r31, r1
    2146:	f8 cf       	rjmp	.-16     	; 0x2138 <__floatsisf+0x1c>
    2148:	fa f4       	brpl	.+62     	; 0x2188 <__floatsisf+0x6c>
    214a:	bb 0f       	add	r27, r27
    214c:	11 f4       	brne	.+4      	; 0x2152 <__floatsisf+0x36>
    214e:	60 ff       	sbrs	r22, 0
    2150:	1b c0       	rjmp	.+54     	; 0x2188 <__floatsisf+0x6c>
    2152:	6f 5f       	subi	r22, 0xFF	; 255
    2154:	7f 4f       	sbci	r23, 0xFF	; 255
    2156:	8f 4f       	sbci	r24, 0xFF	; 255
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	16 c0       	rjmp	.+44     	; 0x2188 <__floatsisf+0x6c>
    215c:	88 23       	and	r24, r24
    215e:	11 f0       	breq	.+4      	; 0x2164 <__floatsisf+0x48>
    2160:	96 e9       	ldi	r25, 0x96	; 150
    2162:	11 c0       	rjmp	.+34     	; 0x2186 <__floatsisf+0x6a>
    2164:	77 23       	and	r23, r23
    2166:	21 f0       	breq	.+8      	; 0x2170 <__floatsisf+0x54>
    2168:	9e e8       	ldi	r25, 0x8E	; 142
    216a:	87 2f       	mov	r24, r23
    216c:	76 2f       	mov	r23, r22
    216e:	05 c0       	rjmp	.+10     	; 0x217a <__floatsisf+0x5e>
    2170:	66 23       	and	r22, r22
    2172:	71 f0       	breq	.+28     	; 0x2190 <__floatsisf+0x74>
    2174:	96 e8       	ldi	r25, 0x86	; 134
    2176:	86 2f       	mov	r24, r22
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	2a f0       	brmi	.+10     	; 0x2188 <__floatsisf+0x6c>
    217e:	9a 95       	dec	r25
    2180:	66 0f       	add	r22, r22
    2182:	77 1f       	adc	r23, r23
    2184:	88 1f       	adc	r24, r24
    2186:	da f7       	brpl	.-10     	; 0x217e <__floatsisf+0x62>
    2188:	88 0f       	add	r24, r24
    218a:	96 95       	lsr	r25
    218c:	87 95       	ror	r24
    218e:	97 f9       	bld	r25, 7
    2190:	08 95       	ret

00002192 <__fp_cmp>:
    2192:	99 0f       	add	r25, r25
    2194:	00 08       	sbc	r0, r0
    2196:	55 0f       	add	r21, r21
    2198:	aa 0b       	sbc	r26, r26
    219a:	e0 e8       	ldi	r30, 0x80	; 128
    219c:	fe ef       	ldi	r31, 0xFE	; 254
    219e:	16 16       	cp	r1, r22
    21a0:	17 06       	cpc	r1, r23
    21a2:	e8 07       	cpc	r30, r24
    21a4:	f9 07       	cpc	r31, r25
    21a6:	c0 f0       	brcs	.+48     	; 0x21d8 <__fp_cmp+0x46>
    21a8:	12 16       	cp	r1, r18
    21aa:	13 06       	cpc	r1, r19
    21ac:	e4 07       	cpc	r30, r20
    21ae:	f5 07       	cpc	r31, r21
    21b0:	98 f0       	brcs	.+38     	; 0x21d8 <__fp_cmp+0x46>
    21b2:	62 1b       	sub	r22, r18
    21b4:	73 0b       	sbc	r23, r19
    21b6:	84 0b       	sbc	r24, r20
    21b8:	95 0b       	sbc	r25, r21
    21ba:	39 f4       	brne	.+14     	; 0x21ca <__fp_cmp+0x38>
    21bc:	0a 26       	eor	r0, r26
    21be:	61 f0       	breq	.+24     	; 0x21d8 <__fp_cmp+0x46>
    21c0:	23 2b       	or	r18, r19
    21c2:	24 2b       	or	r18, r20
    21c4:	25 2b       	or	r18, r21
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <__fp_cmp+0x3e>
    21c8:	08 95       	ret
    21ca:	0a 26       	eor	r0, r26
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <__fp_cmp+0x3e>
    21ce:	a1 40       	sbci	r26, 0x01	; 1
    21d0:	a6 95       	lsr	r26
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	81 1d       	adc	r24, r1
    21d6:	81 1d       	adc	r24, r1
    21d8:	08 95       	ret

000021da <__fp_inf>:
    21da:	97 f9       	bld	r25, 7
    21dc:	9f 67       	ori	r25, 0x7F	; 127
    21de:	80 e8       	ldi	r24, 0x80	; 128
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	08 95       	ret

000021e6 <__fp_nan>:
    21e6:	9f ef       	ldi	r25, 0xFF	; 255
    21e8:	80 ec       	ldi	r24, 0xC0	; 192
    21ea:	08 95       	ret

000021ec <__fp_pscA>:
    21ec:	00 24       	eor	r0, r0
    21ee:	0a 94       	dec	r0
    21f0:	16 16       	cp	r1, r22
    21f2:	17 06       	cpc	r1, r23
    21f4:	18 06       	cpc	r1, r24
    21f6:	09 06       	cpc	r0, r25
    21f8:	08 95       	ret

000021fa <__fp_pscB>:
    21fa:	00 24       	eor	r0, r0
    21fc:	0a 94       	dec	r0
    21fe:	12 16       	cp	r1, r18
    2200:	13 06       	cpc	r1, r19
    2202:	14 06       	cpc	r1, r20
    2204:	05 06       	cpc	r0, r21
    2206:	08 95       	ret

00002208 <__fp_round>:
    2208:	09 2e       	mov	r0, r25
    220a:	03 94       	inc	r0
    220c:	00 0c       	add	r0, r0
    220e:	11 f4       	brne	.+4      	; 0x2214 <__fp_round+0xc>
    2210:	88 23       	and	r24, r24
    2212:	52 f0       	brmi	.+20     	; 0x2228 <__fp_round+0x20>
    2214:	bb 0f       	add	r27, r27
    2216:	40 f4       	brcc	.+16     	; 0x2228 <__fp_round+0x20>
    2218:	bf 2b       	or	r27, r31
    221a:	11 f4       	brne	.+4      	; 0x2220 <__fp_round+0x18>
    221c:	60 ff       	sbrs	r22, 0
    221e:	04 c0       	rjmp	.+8      	; 0x2228 <__fp_round+0x20>
    2220:	6f 5f       	subi	r22, 0xFF	; 255
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	8f 4f       	sbci	r24, 0xFF	; 255
    2226:	9f 4f       	sbci	r25, 0xFF	; 255
    2228:	08 95       	ret

0000222a <__fp_split3>:
    222a:	57 fd       	sbrc	r21, 7
    222c:	90 58       	subi	r25, 0x80	; 128
    222e:	44 0f       	add	r20, r20
    2230:	55 1f       	adc	r21, r21
    2232:	59 f0       	breq	.+22     	; 0x224a <__fp_splitA+0x10>
    2234:	5f 3f       	cpi	r21, 0xFF	; 255
    2236:	71 f0       	breq	.+28     	; 0x2254 <__fp_splitA+0x1a>
    2238:	47 95       	ror	r20

0000223a <__fp_splitA>:
    223a:	88 0f       	add	r24, r24
    223c:	97 fb       	bst	r25, 7
    223e:	99 1f       	adc	r25, r25
    2240:	61 f0       	breq	.+24     	; 0x225a <__fp_splitA+0x20>
    2242:	9f 3f       	cpi	r25, 0xFF	; 255
    2244:	79 f0       	breq	.+30     	; 0x2264 <__fp_splitA+0x2a>
    2246:	87 95       	ror	r24
    2248:	08 95       	ret
    224a:	12 16       	cp	r1, r18
    224c:	13 06       	cpc	r1, r19
    224e:	14 06       	cpc	r1, r20
    2250:	55 1f       	adc	r21, r21
    2252:	f2 cf       	rjmp	.-28     	; 0x2238 <__fp_split3+0xe>
    2254:	46 95       	lsr	r20
    2256:	f1 df       	rcall	.-30     	; 0x223a <__fp_splitA>
    2258:	08 c0       	rjmp	.+16     	; 0x226a <__fp_splitA+0x30>
    225a:	16 16       	cp	r1, r22
    225c:	17 06       	cpc	r1, r23
    225e:	18 06       	cpc	r1, r24
    2260:	99 1f       	adc	r25, r25
    2262:	f1 cf       	rjmp	.-30     	; 0x2246 <__fp_splitA+0xc>
    2264:	86 95       	lsr	r24
    2266:	71 05       	cpc	r23, r1
    2268:	61 05       	cpc	r22, r1
    226a:	08 94       	sec
    226c:	08 95       	ret

0000226e <__fp_zero>:
    226e:	e8 94       	clt

00002270 <__fp_szero>:
    2270:	bb 27       	eor	r27, r27
    2272:	66 27       	eor	r22, r22
    2274:	77 27       	eor	r23, r23
    2276:	cb 01       	movw	r24, r22
    2278:	97 f9       	bld	r25, 7
    227a:	08 95       	ret

0000227c <__gesf2>:
    227c:	8a df       	rcall	.-236    	; 0x2192 <__fp_cmp>
    227e:	08 f4       	brcc	.+2      	; 0x2282 <__gesf2+0x6>
    2280:	8f ef       	ldi	r24, 0xFF	; 255
    2282:	08 95       	ret

00002284 <__udivmodsi4>:
    2284:	a1 e2       	ldi	r26, 0x21	; 33
    2286:	1a 2e       	mov	r1, r26
    2288:	aa 1b       	sub	r26, r26
    228a:	bb 1b       	sub	r27, r27
    228c:	fd 01       	movw	r30, r26
    228e:	0d c0       	rjmp	.+26     	; 0x22aa <__udivmodsi4_ep>

00002290 <__udivmodsi4_loop>:
    2290:	aa 1f       	adc	r26, r26
    2292:	bb 1f       	adc	r27, r27
    2294:	ee 1f       	adc	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	a2 17       	cp	r26, r18
    229a:	b3 07       	cpc	r27, r19
    229c:	e4 07       	cpc	r30, r20
    229e:	f5 07       	cpc	r31, r21
    22a0:	20 f0       	brcs	.+8      	; 0x22aa <__udivmodsi4_ep>
    22a2:	a2 1b       	sub	r26, r18
    22a4:	b3 0b       	sbc	r27, r19
    22a6:	e4 0b       	sbc	r30, r20
    22a8:	f5 0b       	sbc	r31, r21

000022aa <__udivmodsi4_ep>:
    22aa:	66 1f       	adc	r22, r22
    22ac:	77 1f       	adc	r23, r23
    22ae:	88 1f       	adc	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	1a 94       	dec	r1
    22b4:	69 f7       	brne	.-38     	; 0x2290 <__udivmodsi4_loop>
    22b6:	60 95       	com	r22
    22b8:	70 95       	com	r23
    22ba:	80 95       	com	r24
    22bc:	90 95       	com	r25
    22be:	9b 01       	movw	r18, r22
    22c0:	ac 01       	movw	r20, r24
    22c2:	bd 01       	movw	r22, r26
    22c4:	cf 01       	movw	r24, r30
    22c6:	08 95       	ret

000022c8 <__tablejump2__>:
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31

000022cc <__tablejump__>:
    22cc:	05 90       	lpm	r0, Z+
    22ce:	f4 91       	lpm	r31, Z
    22d0:	e0 2d       	mov	r30, r0
    22d2:	09 94       	ijmp

000022d4 <_exit>:
    22d4:	f8 94       	cli

000022d6 <__stop_program>:
    22d6:	ff cf       	rjmp	.-2      	; 0x22d6 <__stop_program>
